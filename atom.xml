<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳落下</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-05T03:11:59.409Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 专题导航</title>
    <link href="http://yoursite.com/2018/06/05/Linux-%E4%B8%93%E9%A2%98%E5%AF%BC%E8%88%AA/"/>
    <id>http://yoursite.com/2018/06/05/Linux-专题导航/</id>
    <published>2018-06-05T03:09:32.000Z</published>
    <updated>2018-05-05T03:11:59.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件管理&quot;&gt;&lt;a href=&quot;#文件管理&quot; class=&quot;headerlink&quot; title=&quot;文件管理&quot;&gt;&lt;/a&gt;文件管理&lt;/h2&gt;&lt;h2 id=&quot;权限管理&quot;&gt;&lt;a href=&quot;#权限管理&quot; class=&quot;headerlink&quot; title=&quot;权限管理&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>VIM常用按键</title>
    <link href="http://yoursite.com/2018/05/26/VIM%E5%B8%B8%E7%94%A8%E6%8C%89%E9%94%AE/"/>
    <id>http://yoursite.com/2018/05/26/VIM常用按键/</id>
    <published>2018-05-25T20:57:06.000Z</published>
    <updated>2018-05-26T01:58:45.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install vim</div><div class="line">apt install vim</div></pre></td></tr></table></figure>
<embed src="../../../lib/zoltan_basic-vim.bw.pdf" width="100%" height="550" type="application/pdf">

<h2 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>Insert 模式，按 ESC 回到 Normal 模式.</td>
<td></td>
</tr>
<tr>
<td>x</td>
<td>删当前光标所在的一个字符。</td>
</tr>
<tr>
<td>:wq</td>
<td>存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）</td>
</tr>
<tr>
<td>dd</td>
<td>删除当前行，并把删除的行存到剪贴板里</td>
</tr>
<tr>
<td>yy</td>
<td>复制当前行</td>
</tr>
<tr>
<td>p</td>
<td>粘贴剪贴板</td>
</tr>
<tr>
<td>hjkl/←↓↑→</td>
<td>方向键</td>
</tr>
<tr>
<td>:help <command></td>
<td>显示相关命令的帮助。退出帮助需要输入:q</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>a</td>
<td>在光标后插入</td>
</tr>
<tr>
<td></td>
<td>o</td>
<td>在当前行后插入一个新行</td>
</tr>
<tr>
<td>O</td>
<td>在当前行前插入一个新行</td>
</tr>
<tr>
<td>cw</td>
<td>替换从光标所在位置后到一个单词结尾的字符</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>0</td>
<td>数字零，到行头</td>
</tr>
<tr>
<td>^</td>
<td>到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</td>
</tr>
<tr>
<td>$</td>
<td>到本行行尾</td>
</tr>
<tr>
<td>g_</td>
<td>到本行最后一个不是blank字符的位置。</td>
</tr>
<tr>
<td>/pattern</td>
<td>搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>P</td>
<td>粘贴</td>
</tr>
<tr>
<td>yy</td>
<td>拷贝当前行当行于 ddP</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>u</td>
<td>undo</td>
</tr>
<tr>
<td><c-r></c-r></td>
<td>redo</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>:e <path to="" file=""></path></td>
<td>打开一个文件</td>
</tr>
<tr>
<td>:w</td>
<td>存盘</td>
</tr>
<tr>
<td>:saveas <path to="" file=""></path></td>
<td>另存为 <path to="" file=""></path></td>
</tr>
<tr>
<td>:x， ZZ 或 :wq</td>
<td>保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)</td>
</tr>
<tr>
<td>:q!</td>
<td>退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。</td>
</tr>
<tr>
<td>:bn 和 :bp</td>
<td>你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell条件判断 case、for、while、until</title>
    <link href="http://yoursite.com/2018/05/24/Shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-case%E3%80%81for%E3%80%81while%E3%80%81until/"/>
    <id>http://yoursite.com/2018/05/24/Shell条件判断-case、for、while、until/</id>
    <published>2018-05-24T14:48:25.000Z</published>
    <updated>2018-05-24T15:04:27.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多分支语句case"><a href="#多分支语句case" class="headerlink" title="多分支语句case"></a>多分支语句case</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">case $变量名 in</div><div class="line">    &quot;值1&quot;)</div><div class="line">        如果变量值等于值1，执行程序1</div><div class="line">        ;;</div><div class="line">    &quot;值2&quot;)</div><div class="line">        如果变量值等于值2，执行程序2</div><div class="line">        ;;</div><div class="line">    *）</div><div class="line">        如果变量值都不是以上值，则执行此程序</div><div class="line">        ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>与if多分支最大区别是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash  </div><div class="line">name=&apos;basename $0 .sh&apos;  </div><div class="line">case $1 in  </div><div class="line">    s|start) echo &quot;start...&quot;</div><div class="line">    ;;</div><div class="line">    stop) echo &quot;stop ...&quot;</div><div class="line">    ;;</div><div class="line">    reload)echo &quot;reload...&quot;</div><div class="line">    ;;</div><div class="line">    *)echo &quot;Usage: $name [start|stop|reload]&quot;</div><div class="line">    exit 1</div><div class="line">    ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>| 分割多个模式，相当于 or</p>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">for 变量 in 值1 值2 值3... </div><div class="line">    do</div><div class="line">        程序</div><div class="line">    done</div><div class="line"></div><div class="line">for ((初始值;循环控制条件;变量变化))</div><div class="line">    do</div><div class="line">        程序</div><div class="line">    done</div></pre></td></tr></table></figure>
<p>in后面跟多少值，for循环就循环多少次，每次循环依次把值赋给变量，直到后面的值全都运行一遍。<br>可以将要操作的数据内容放在一个文件中，利用 for i in $(cat 文件名)来避免手动输入。也可以将内容赋给变量，利用for i in $val 来避免手动输入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#从1加到100</div><div class="line"></div><div class="line">s=0</div><div class="line">for ((i=1;i&lt;=100;i=i+1))</div><div class="line">    do</div><div class="line">        s=$(($s+$i))</div><div class="line">    done</div><div class="line">#没有i++</div></pre></td></tr></table></figure>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while [ 条件判断式 ]</div><div class="line">    do</div><div class="line">          程序</div><div class="line">    done</div></pre></td></tr></table></figure>
<p>实例：从1加到100<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">sum=0</div><div class="line">i=1</div><div class="line">while [ $i -le 100 ]</div><div class="line">    do</div><div class="line">        sum=$(( $sum+$i ))</div><div class="line">        i=$(( $i+1 ))</div><div class="line">    done</div><div class="line">echo &quot;sum is : $sum&quot;</div></pre></td></tr></table></figure></p>
<p><a href="http://wiki.jikexueyuan.com/project/shell-learning/case-statements.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/shell-learning/case-statements.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多分支语句case&quot;&gt;&lt;a href=&quot;#多分支语句case&quot; class=&quot;headerlink&quot; title=&quot;多分支语句case&quot;&gt;&lt;/a&gt;多分支语句case&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell条件判断 双分支if语句</title>
    <link href="http://yoursite.com/2018/05/24/Shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-%E5%8F%8C%E5%88%86%E6%94%AFif%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2018/05/24/Shell条件判断-双分支if语句/</id>
    <published>2018-05-24T14:17:33.000Z</published>
    <updated>2018-05-24T14:46:49.817Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断式 ]</div><div class="line">    then</div><div class="line">        条件成立时执行的程序</div><div class="line">    else</div><div class="line">        条件不成立时，执行的另一个程序</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>实例：判断输入的路径是不是一个目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -t 30 -p &quot;Input a dir:&quot; dir</div><div class="line">if [ -d &quot;$dir&quot; ]</div><div class="line">then</div><div class="line">    echo &quot;Yes,yes yes&quot;</div><div class="line">else</div><div class="line">    echo &quot;No,no,no&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>实例：判断apache服务是否启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">test=$(ps aux |grep httpd |grep -v grep)</div><div class="line">#定义变量test 并且查找是否启动apache的结果赋值给test</div><div class="line">#ps aux  查看当前所有正在运行的进程 </div><div class="line">#grep httpd 过滤出apache进程</div><div class="line">#grep -v grep 排除自身进程</div><div class="line"></div><div class="line">if [ -n &quot;$test&quot; ]</div><div class="line">then</div><div class="line">    cho &quot; $(date) httpd is ok &quot; &gt;&gt; /tmp/autostart-acc.log</div><div class="line">else</div><div class="line">    systemctl start httpd.service &amp;&gt;/dev/null</div><div class="line">    #centos7</div><div class="line">    echo &quot; $(date) httpd is no \n httpd is autostart now&quot; &gt;&gt; /tmp/autostart-err.log</div><div class="line">fi</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell条件判断 多分支if语句</title>
    <link href="http://yoursite.com/2018/05/24/Shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-%E5%A4%9A%E5%88%86%E6%94%AFif%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2018/05/24/Shell条件判断-多分支if语句/</id>
    <published>2018-05-24T14:07:06.000Z</published>
    <updated>2018-05-24T14:47:00.453Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断式1 ]</div><div class="line">then</div><div class="line">    当条件判断式1成立时，执行程序1</div><div class="line">elif [ 条件判断式2 ]</div><div class="line">then</div><div class="line">    当条件判断式2成立时，执行程序2</div><div class="line">else</div><div class="line">    当所有条件都不成立时，最后执行此程序</div><div class="line">fi</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell条件判断 单分支if语句</title>
    <link href="http://yoursite.com/2018/05/24/Shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-%E5%8D%95%E5%88%86%E6%94%AFif%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2018/05/24/Shell条件判断-单分支if语句/</id>
    <published>2018-05-24T14:06:50.000Z</published>
    <updated>2018-05-24T14:46:27.461Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断式 ];then</div><div class="line">    程序</div><div class="line">fi</div><div class="line"></div><div class="line">if [ 条件判断式 ] </div><div class="line">    then</div><div class="line">        程序</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>注：</p>
<ol>
<li>if语句使用fi结尾，和一般语言使用大括号结尾不同</li>
<li><code>[ 条件判断式 ]</code>就是使用test命令判断，所以中括号和条件判断式之间必须有空格</li>
<li>then后面跟符合条件之后执行的程序，可以放在[]之后，用<code>;</code>分割，也可以换行写入，就不需要<code>;</code>了</li>
</ol>
<p>实例：判断当前登录用户是不是root<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">testuser=$(env | grep &quot;USER&quot; | cut -d &quot;=&quot; -f 2)</div><div class="line">#env是linux的一个外部命令，可以显示当前用户的环境变量，其中一行显示当前用户</div><div class="line">if [ &quot;$testuser&quot; == &quot;root&quot; ]</div><div class="line">then</div><div class="line">    echo &quot;Current user is root.&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>实例：判断分区使用率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#统计根分区使用率</div><div class="line">#/dev/sda3是df判断的</div><div class="line">test=$(df -h | grep &quot;/dev/sda3&quot; | awk &apos;&#123;print $5&#125;&apos; | cut -d &quot;%&quot; -f 1)</div><div class="line">if [ &quot;$test&quot; -ge 90 ]</div><div class="line">then</div><div class="line">    echo &quot;/ is full&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell条件判断 条件判断式</title>
    <link href="http://yoursite.com/2018/05/24/Shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/24/Shell条件判断-条件判断式/</id>
    <published>2018-05-24T13:42:14.000Z</published>
    <updated>2018-05-24T14:04:51.258Z</updated>
    
    <content type="html"><![CDATA[<style>
table th:nth-of-type(1){
width: 20%;
}
table th:nth-of-type(2){
width: 80%;
}

</style>

<p><strong>引用变量要加””</strong></p>
<h2 id="按文件类型判断"><a href="#按文件类型判断" class="headerlink" title="按文件类型判断"></a>按文件类型判断</h2><table>
<thead>
<tr>
<th>测试选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>判断该文件是否存在，并且是否为块设备文件（是为真）</td>
</tr>
<tr>
<td>-c</td>
<td>判断该文件是否存在，并且是否为字符设备文件（是为真）</td>
</tr>
<tr>
<td>-d</td>
<td>判断该文件是否存在，并且是否为目录文件（是为真）</td>
</tr>
<tr>
<td>-e</td>
<td>判断该文件是否存在（存在为真）</td>
</tr>
<tr>
<td>-f</td>
<td>判断该文件是否存在，并且是否为普通文件（是为真）</td>
</tr>
<tr>
<td>-L</td>
<td>判断该文件是否存在，并且是否为符号链接文件（是为真）</td>
</tr>
<tr>
<td>-p</td>
<td>判断该文件是否存在，并且是否为管道文件（是为真）</td>
</tr>
<tr>
<td>-s</td>
<td>判断该文件是否存在，并且是否为非空（非空为真）</td>
</tr>
<tr>
<td>-S</td>
<td>判断该文件是否存在，并且是否为套接字文件（是为真）</td>
</tr>
</tbody>
</table>
<h4 id="两种判断格式"><a href="#两种判断格式" class="headerlink" title="两种判断格式"></a>两种判断格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[-e /root/install.log]      #常用</div><div class="line">test -e /root/install.log</div></pre></td></tr></table></figure>
<p>[-e /root/install.log] &amp;&amp; echo yes || echo no<br>第一个判断命令如果正确执行，则打印yes，否则打印no<br>&amp;&amp; 和 || 不可以调换位置</p>
<p><br></p>
<h2 id="按文件权限判断"><a href="#按文件权限判断" class="headerlink" title="按文件权限判断"></a>按文件权限判断</h2><table>
<thead>
<tr>
<th>测试选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r</td>
<td>判断该文件是否存在，并且是否该文件拥有读权限（有为真）</td>
</tr>
<tr>
<td>-w</td>
<td>判断该文件是否存在，并且是否该文件拥有写权限（有为真）</td>
</tr>
<tr>
<td>-x</td>
<td>判断该文件是否存在，并且是否该文件拥有执行权限（有为真）</td>
</tr>
<tr>
<td>-u</td>
<td>判断该文件是否存在，并且是否该文件拥有SUID权限（有为真）</td>
</tr>
<tr>
<td>-g</td>
<td>判断该文件是否存在，并且是否该文件拥有SGID权限（有为真）</td>
</tr>
<tr>
<td>-k</td>
<td>判断该文件是否存在，并且是否该文件拥有SBit权限（有为真）</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="两个文件之间的比较"><a href="#两个文件之间的比较" class="headerlink" title="两个文件之间的比较"></a>两个文件之间的比较</h2><table>
<thead>
<tr>
<th>测试选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>file1 -nt file2</td>
<td>判断文件1的修改时间是否比文件2的新(如果新则为真)</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>判断文件1的修改时间是否比文件2的旧(如果旧则为真)</td>
</tr>
<tr>
<td>file1 -ef file2</td>
<td>判断文件1是否比文件2的Inode号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的办法</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="两个整数之间的比较"><a href="#两个整数之间的比较" class="headerlink" title="两个整数之间的比较"></a>两个整数之间的比较</h2><table>
<thead>
<tr>
<th>测试选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>num1 -eq num2</td>
<td>判断整数1是否和整数2相等(相等为真)</td>
</tr>
<tr>
<td>num1 -ne num2</td>
<td>判断整数1是否和整数2不相等(不相等为真)</td>
</tr>
<tr>
<td>num1 -gt num2</td>
<td>判断整数1是否大于整数2(大于为真)</td>
</tr>
<tr>
<td>num1 -lt num2</td>
<td>判断整数1是否小于整数2(小于为真)</td>
</tr>
<tr>
<td>num1 -ge num2</td>
<td>判断整数1是否大于或等于整数2(大于等于为真)</td>
</tr>
<tr>
<td>num1 -le num2</td>
<td>判断整数1是否小于或等于整数2(小于等于为真)</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="字符串的判断"><a href="#字符串的判断" class="headerlink" title="字符串的判断"></a>字符串的判断</h2><table>
<thead>
<tr>
<th>测试选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>-z 字符串</td>
<td>判断字符串是否为空，为空返回真</td>
</tr>
<tr>
<td>-n 字符串</td>
<td>判断字符串是否为非空，非空返回真</td>
</tr>
<tr>
<td>字符串1 == 字符串2</td>
<td>判断两字符串是否相等，相等返回真，==左右加空格</td>
</tr>
<tr>
<td>字符串1 != 字符串2</td>
<td>判断两字符串是否不相等，不相等返回真，!=左右加空格</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h2><table>
<thead>
<tr>
<th>测试选项</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>判断1 -a 判断2</td>
<td>#逻辑与，判断1和判断2都成立，结果为真</td>
</tr>
<tr>
<td>判断1 -o 判断2</td>
<td>#逻辑或，判断1和判断2有一个成立，结果就为真</td>
</tr>
<tr>
<td>!判断</td>
<td>#逻辑非，判断结果取反</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[-n &quot;$a&quot; -a &quot;$a&quot; -gt 23]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
table th:nth-of-type(1){
width: 20%;
}
table th:nth-of-type(2){
width: 80%;
}

&lt;/style&gt;

&lt;p&gt;&lt;strong&gt;引用变量要加””&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;按文
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux DNS搭建 Bind服务</title>
    <link href="http://yoursite.com/2018/05/24/Linux-DNS%E6%90%AD%E5%BB%BA-Bind%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/05/24/Linux-DNS搭建-Bind服务/</id>
    <published>2018-05-24T13:37:47.000Z</published>
    <updated>2018-05-25T03:13:54.929Z</updated>
    
    <content type="html"><![CDATA[<p>Centos<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install bind  bind-utils</div><div class="line"></div><div class="line">#centos默认的安装是没有host，dig，nsloopup等命令的，需要安装bind-utils</div></pre></td></tr></table></figure></p>
<p>Ubuntu<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install bind9</div></pre></td></tr></table></figure></p>
<p><a href="https://www.phpini.com/linux/fix-nslookup-dig-host-command-not-found" target="_blank" rel="external">https://www.phpini.com/linux/fix-nslookup-dig-host-command-not-found</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PowerPoint 2016拆分汉字、制作笔画</title>
    <link href="http://yoursite.com/2018/05/24/PowerPoint-2016%E6%8B%86%E5%88%86%E6%B1%89%E5%AD%97%E3%80%81%E5%88%B6%E4%BD%9C%E7%AC%94%E7%94%BB/"/>
    <id>http://yoursite.com/2018/05/24/PowerPoint-2016拆分汉字、制作笔画/</id>
    <published>2018-05-24T01:53:30.000Z</published>
    <updated>2018-05-24T02:35:51.883Z</updated>
    
    <content type="html"><![CDATA[<p>需要工具word、powerpoint</p>
<ol>
<li>打开word，输入汉字，设置字体为楷体GB2312/仿宋（这两种字体的笔画是分离的，WindowsXP中默认有这两种字体，但Windows 7开始系统默认没有这两种字体）</li>
<li>保存为doc格式</li>
<li>选中文字，【右击】，在快捷菜单中打开【字体】对话框，选择【空心】格式</li>
<li>复制“空心”汉字。打开PowerPoint中，【开始】选项卡–【选择性粘贴】，选择【图片（Windows元文件）】，取消组合两次。汉字笔画就分解出来了。删除不需要的对象（一般有1-2个空白形状）</li>
</ol>
<p><a href="http://www.360doc.com/content/16/0107/08/982782_526070895.shtml" target="_blank" rel="external">http://www.360doc.com/content/16/0107/08/982782_526070895.shtml</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要工具word、powerpoint&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开word，输入汉字，设置字体为楷体GB2312/仿宋（这两种字体的笔画是分离的，WindowsXP中默认有这两种字体，但Windows 7开始系统默认没有这两种字体）&lt;/li&gt;
&lt;li&gt;保存为doc格式&lt;
    
    </summary>
    
    
      <category term="PPT" scheme="http://yoursite.com/tags/PPT/"/>
    
  </entry>
  
  <entry>
    <title>Linux 工具</title>
    <link href="http://yoursite.com/2018/05/22/Linux-%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2018/05/22/Linux-工具/</id>
    <published>2018-05-22T02:27:29.000Z</published>
    <updated>2018-05-22T03:43:04.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vifm"><a href="#Vifm" class="headerlink" title="Vifm"></a>Vifm</h2><p>Vifm 是一个 Linux 控制台下的文件管理器，基于 ncurse 的两列面板界面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#安装</div><div class="line">sudo apt install vifm</div><div class="line">#运行</div><div class="line">vifm</div></pre></td></tr></table></figure></p>
<p>使用<code>空格键</code>从一个窗格移动到另一个窗格。<br>要打开目录或文件，只需按<code>Enter</code>按钮。<br>水平分割窗口按Ctrl-W然后s<br>垂直分割窗口按Ctrl-W然后v<br>一个窗格中的文件，另一个窗格中查看<code>:view</code><br>删除文件：dd</p>
<p>如果您在Vifm中删除文件，则会将其存储在垃圾箱中。 要查看垃圾邮件目录，请键入此命令。<br><code>:trashes</code><br>要查看垃圾桶中的文件，请运行lstrash命令（按q返回）。<br><code>:lstrash</code></p>
<p>要从垃圾邮件目录还原文件，首先使用cd命令进入它。<br><code>:cd /home/aaronkilik/.local/share/vifm/Trash</code><br>然后选择要还原的文件，然后键入：<br><code>:restore</code></p>
<h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>终端分屏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install tmux</div><div class="line">tmux</div></pre></td></tr></table></figure></p>
<p>tmux所有自带命令都默认需要先按Ctrl + b，然后再键入对应的命令</p>
<p>Ctrl+b “ - split pane horizontally<br>Ctrl+b % - 将当前窗格垂直划分<br>Ctrl+b 方向键 - 在各窗格间切换<br>Ctrl+b，并且不要松开Ctrl，方向键 - 调整窗格大小<br>Ctrl+b c - (c)reate 生成一个新的窗口<br>Ctrl+b n - (n)ext 移动到下一个窗口<br>Ctrl+b p - (p)revious 移动到前一个窗口.<br>Ctrl+b 空格键 - 采用下一个内置布局<br>Ctrl+b q - 显示分隔窗口的编号<br>Ctrl+b o - 跳到下一个分隔窗口<br>Ctrl+b &amp; - 确认后退出 tmux </p>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>sh<br><a href="http://ohmyz.sh/" target="_blank" rel="external">http://ohmyz.sh/</a><br><a href="https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87</a>)<br><a href="https://www.zhihu.com/question/21418449" target="_blank" rel="external">https://www.zhihu.com/question/21418449</a></p>
<h2 id="awesome"><a href="#awesome" class="headerlink" title="awesome"></a>awesome</h2><p>桌面<br><a href="https://www.linuxzen.com/awesometmuxgnomedoda-zao-gao-xiao-linuxzhuo-mian-huan-jing.html" target="_blank" rel="external">https://www.linuxzen.com/awesometmuxgnomedoda-zao-gao-xiao-linuxzhuo-mian-huan-jing.html</a><br><a href="https://wiki.archlinux.org/index.php/Awesome_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Awesome_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87</a>)<br><a href="http://www.hahack.com/tools/awesome/" target="_blank" rel="external">http://www.hahack.com/tools/awesome/</a></p>
<h2 id="Apvlv"><a href="#Apvlv" class="headerlink" title="Apvlv"></a>Apvlv</h2><p>vim 化的 PDF 阅读工具</p>
<p><a href="https://github.com/naihe2010/apvlv" target="_blank" rel="external">https://github.com/naihe2010/apvlv</a><br><a href="http://naihe2010.github.io/apvlv/" target="_blank" rel="external">http://naihe2010.github.io/apvlv/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vifm&quot;&gt;&lt;a href=&quot;#Vifm&quot; class=&quot;headerlink&quot; title=&quot;Vifm&quot;&gt;&lt;/a&gt;Vifm&lt;/h2&gt;&lt;p&gt;Vifm 是一个 Linux 控制台下的文件管理器，基于 ncurse 的两列面板界面&lt;br&gt;&lt;figure class=&quot;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MyLinux.sh</title>
    <link href="http://yoursite.com/2018/05/22/MyLinux-sh/"/>
    <id>http://yoursite.com/2018/05/22/MyLinux-sh/</id>
    <published>2018-05-22T01:57:06.000Z</published>
    <updated>2018-05-22T01:57:42.295Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#/bin/bash</div><div class="line"></div><div class="line"># 使用Elementary OS 0.4</div><div class="line"></div><div class="line">#个别系统不能增加ppa</div><div class="line">sudo apt install software-properties-common</div><div class="line"></div><div class="line">sudo apt install vim</div><div class="line"></div><div class="line">if [ &quot;$?&quot; -ne 0 ]</div><div class="line">	then</div><div class="line">		exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">sudo apt install vifm</div><div class="line"></div><div class="line">if [ &quot;$?&quot; -ne 0 ]</div><div class="line">	then</div><div class="line">		exit 2</div><div class="line">fi</div><div class="line"></div><div class="line">#添加中文环境 Settings &gt;&gt; Language &amp; Region &gt;&gt; unLock &gt;&gt; Complete Installation &gt;&gt; click on English in the left sidebar &gt;&gt; Set System Language</div><div class="line">#安装fcitx五笔，其他相关包也会安装，fcitx\fcitx-config-gtk\fcitx-config-common</div><div class="line">sudo apt install fcitx-table-wubi</div><div class="line"></div><div class="line">#baka-player</div><div class="line">#http://bakamplayer.u8sand.net/installation.php</div><div class="line">cd ~/Download</div><div class="line">sudo apt install wget</div><div class="line">wget https://github.com/u8sand/Baka-MPlayer/releases/download/v2.0.4/baka-mplayer_2.0.4-1_amd64.deb</div><div class="line">sudo dpkg -i baka-mplayer_2.0.4-1_amd64.deb</div><div class="line"></div><div class="line">#filezilla</div><div class="line">sudo apt install filezilla</div><div class="line"></div><div class="line">#virtual studio code</div><div class="line">sudo apt install code</div><div class="line"></div><div class="line">#virtualbox</div><div class="line">sudo apt install virtualbox-5.2</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>awk: run time error: not enough arguments passed to printf(5%)</title>
    <link href="http://yoursite.com/2018/05/21/awk-run-time-error-not-enough-arguments-passed-to-printf-5/"/>
    <id>http://yoursite.com/2018/05/21/awk-run-time-error-not-enough-arguments-passed-to-printf-5/</id>
    <published>2018-05-21T00:25:38.000Z</published>
    <updated>2018-05-21T00:29:53.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用<code>awk &#39;{printf $1}&#39;</code>时，系统提示出错，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">awk: run time error: not enough arguments passed to printf(&quot;5%&quot;)</div><div class="line">        FILENAME=&quot;b&quot; FNR=1 NR=1</div></pre></td></tr></table></figure></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>因为要输出的内容里<code>5%</code> 包含<code>%</code>，printf认为这是格式语句，所以更改printf的使用方式<br>使用如下格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk &apos;&#123;printf(&quot;%s&quot;,$1)&#125;&apos;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;awk &amp;#39;{printf $1}&amp;#39;&lt;/code&gt;时，系统提示出错，如下&lt;br&gt;&lt;figure class=&quot;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell正则表达式 字符处理命令sort、wc</title>
    <link href="http://yoursite.com/2018/05/20/Shell-%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4sort%E3%80%81wc/"/>
    <id>http://yoursite.com/2018/05/20/Shell-字符处理命令sort、wc/</id>
    <published>2018-05-20T12:06:24.000Z</published>
    <updated>2018-05-20T12:23:02.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序命令sort"><a href="#排序命令sort" class="headerlink" title="排序命令sort"></a>排序命令sort</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sort [选项]</div><div class="line">选项</div><div class="line">-f 忽略大小写</div><div class="line">-n 以数值型进行排序，默认使用字符串型排序</div><div class="line">-r 反向排序</div><div class="line">-t 指定分隔符,默认是制表符</div><div class="line">-k n[,m] 按照指定的字段范围排序.从第n字段开始,m字段结束(默认到行尾)</div><div class="line"></div><div class="line">sort /etc/passwd   </div><div class="line">#按照字母顺序a-z排列文件内容</div><div class="line">sort -r /etc/passwd   </div><div class="line">#反向排序，即按z-a顺序排列文件内容</div><div class="line">#sort -n -t &quot;:&quot; -k 3,3 /etc/passwd   </div><div class="line">#以数值型进行排序，指定分隔符为“:”，并只取第三字段的内容</div></pre></td></tr></table></figure>
<h2 id="统计命令wc"><a href="#统计命令wc" class="headerlink" title="统计命令wc"></a>统计命令wc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wc [选项] 文件名</div><div class="line">选项:</div><div class="line">-l 只统计行数</div><div class="line">-w 只统计单词数</div><div class="line">-m 只统计字符数</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;排序命令sort&quot;&gt;&lt;a href=&quot;#排序命令sort&quot; class=&quot;headerlink&quot; title=&quot;排序命令sort&quot;&gt;&lt;/a&gt;排序命令sort&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell正则表达式 sed命令</title>
    <link href="http://yoursite.com/2018/05/20/Shell-sed%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/20/Shell-sed命令/</id>
    <published>2018-05-20T10:28:14.000Z</published>
    <updated>2018-05-20T12:23:09.951Z</updated>
    
    <content type="html"><![CDATA[<p>sed是一种几乎包括在所有的UNIX平台（包括Linux）的轻量级流编辑器。sed主要是用来将数据进行选取、替换、删除、新增的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sed [选项] &apos;[动作]&apos; 文件名</div><div class="line">#&apos;&apos;不能省略</div><div class="line">选项:</div><div class="line">-n 只输出经过sed处理过的行到屏幕</div><div class="line">-e 允许一次应用多个动作</div><div class="line">-i 直接修改文件,并且不由屏幕输出</div><div class="line"></div><div class="line">动作:</div><div class="line">a：追加,在当前行后添加一行或多行</div><div class="line">i：插入,在当前行前插入一行或多行</div><div class="line">c：整行替换，用c后面的字符串替换原数据行</div><div class="line">d：删除，删除指定的行</div><div class="line">p：打印，输出指定的行</div><div class="line">s: 字串替换(替换格式与vim中的类似) &apos;行范围s/旧字串/新字串/g&apos;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sed -n &apos;2p&apos; student.txt         查看文件的第二行，如果没有-n将输出全部内容</div><div class="line">sed &apos;2,4d&apos; student.txt          表示删除第2-4行，但是不改变文件本身</div><div class="line">sed &apos;2a piaoliangdecxiaoguniang&apos; student.txt    在第2行之后添加字符串，但是不改变字符串本身</div><div class="line">sed &apos;2i heol&apos; student.txt       在第2行之前插入数据</div><div class="line">sed &apos;4c xxwmpg&apos; student.txt     将第二行的整行替换为xxwmpg</div><div class="line">sed &apos;6s/70/100/g&apos; student.txt   将第7行的所有70全部替换为100，如果不指定行的话会替换所有的指定字符串</div><div class="line">sed -i &apos;6s/70/100/g&apos; student.txt                sed操作的数据直接写入文件</div><div class="line">sed -e &apos;s/fengj//g&apos;;s/cang//g&apos; student.txt      同时把fengj和cang替换为空</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sed是一种几乎包括在所有的UNIX平台（包括Linux）的轻量级流编辑器。sed主要是用来将数据进行选取、替换、删除、新增的命令。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell正则表达式 awk命令</title>
    <link href="http://yoursite.com/2018/05/20/Shell-awk%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/20/Shell-awk命令/</id>
    <published>2018-05-20T10:28:08.000Z</published>
    <updated>2018-05-20T12:23:15.243Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">awk &apos;条件1&#123;动作1&#125;条件2&#123;动作2&#125;...&apos; 文件名</div><div class="line"></div><div class="line">条件</div><div class="line">-一般使用关系表达式作为条件</div><div class="line">-x&gt;10、x&gt;=10、x&lt;=10</div><div class="line"></div><div class="line">动作</div><div class="line">-格式化输出</div><div class="line">-流程控制</div></pre></td></tr></table></figure>
<p>一个条件满足，就执行条件后面{}内的动作。<br>没有条件就无条件执行{}内的动作，如果有条件，就只有满足条件才能执行{}内的动作。</p>
<p>awk的流程：依次读取每一行数据，读取完一行数据后，进行条件判断，如果满足条件，就执行该条件对应的动作，其中文件名为$0，剩下的每一列依次为$1\$2…，判断完一行后，继续判断下一行，直到知道文件全部判断完</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">awk &apos;&#123;printf $2 &quot;\t&quot; $4&quot;\n&quot;&#125;&apos; student.txt </div><div class="line">#注意printf里面输出格式的双引号，printf中的转义符号都要用&quot;&quot;括起来。</div><div class="line">#printf后面要接换行符&quot;\n&quot;</div><div class="line"></div><div class="line">df -h| awk &apos;&#123;printf $1&quot;\t&quot; $5&quot;\n&quot;&#125;&apos;</div><div class="line">#查看系统使用率</div></pre></td></tr></table></figure>
<h2 id="BAGIN条件"><a href="#BAGIN条件" class="headerlink" title="BAGIN条件"></a>BAGIN条件</h2><p>条件BAGIN表示在所有动作执行前先执行BEGIN后的那个动作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df -h | awk &apos;BEGIN&#123;print &quot;test&quot;&#125;&#123;print $1 &quot;\t&quot; $3&#125;&apos;</div><div class="line">会在最前面输出test</div><div class="line">awk在指定分隔符前面一定要加BEGIN</div></pre></td></tr></table></figure></p>
<h2 id="END条件"><a href="#END条件" class="headerlink" title="END条件"></a>END条件</h2><p>条件END表示在所有动作执行后才执行END后的那个动作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#df -h | awk &apos;END&#123;print &quot;test&quot;&#125;&#123;print $1 &quot;\t&quot; $3&#125;&apos; </div><div class="line">会在最后面输出test</div></pre></td></tr></table></figure></p>
<h2 id="FS内置变量"><a href="#FS内置变量" class="headerlink" title="FS内置变量"></a>FS内置变量</h2><p>修改分隔符（默认为空格和制表符）<br>在修改FS的变量的动作前要加上BEGIN，这样在执行所有其它动作之前先修改分割符，否则读取第一行数据的时候不能识别指定的分隔符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | grep &quot;/bin/bash&quot; | awk &apos;BEGIN&#123;FS=&quot;:&quot;&#125;&#123;print $1 &quot;\t&quot; #3&#125;&apos;</div><div class="line">#awk在指定分隔符前面一定要加BEGIN，此例截取第1、3列</div><div class="line"></div><div class="line">cat student.txt | grep -v Name | awk &apos;$4&gt;=70&#123;print $2&#125;&apos;</div><div class="line">#此例截取除了列头的成绩大于等于70分的学生姓名，grep -v Name为取反命令，不输出带“Name”的行</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell正则表达式 格式化输出命令printf</title>
    <link href="http://yoursite.com/2018/05/20/Shell-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E5%91%BD%E4%BB%A4printf/"/>
    <id>http://yoursite.com/2018/05/20/Shell-格式化输出命令printf/</id>
    <published>2018-05-20T09:49:39.000Z</published>
    <updated>2018-05-20T12:26:37.120Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">printf &quot;输出类型输出格式&quot; 输出内容</div><div class="line"></div><div class="line">输出类型：</div><div class="line">%ns：输出字符串。n是数字，指代输出几个字符</div><div class="line">%ni：输出整数。n是数字，指代输出几个数字</div><div class="line">%m.nf：输出浮点数。m和n是数字，指代输出的整数位数和小数位数。如%8.2f代表共输出8位数，其中2是小数位数，6位是整数</div><div class="line"></div><div class="line">输出格式：</div><div class="line">\a：输出警告声音</div><div class="line">\b：输出退格键，也就是Backspace键</div><div class="line">\f：清空屏幕</div><div class="line">\n：换行</div><div class="line">\r：回车，也就是Enter键</div><div class="line">\t：水平输出退格键，也就是Tab键</div><div class="line">\v：垂直输出退格键，也就是Tab键</div><div class="line"></div><div class="line">printf %s 1 2 3 4 5 6           123456</div><div class="line">printf %s %s %s 1 2 3 4 5 6     %s%s123456      后两个%s被当作输入</div><div class="line">printf &apos;%s %s %s&apos; 1 2 3 4 5 6   1 2 34 5 6      </div><div class="line">printf &apos;%s\t%s\t%s\n&apos; 1 2 3 4 5 6</div><div class="line">1 	2	3</div><div class="line">4	5	6</div></pre></td></tr></table></figure>
<p>使用printf输出命令，必须明确指出所有的格式<br>如果想要使用printf读取文件中的内容就需要：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">printf &apos;%s&apos; $(cat student.txt)  </div><div class="line">#不调整输出格式，文本内的内容输出到一行</div><div class="line"></div><div class="line">printf &apos;%s\t%s\t%s\t%s\n&apos; $(cat student.txt) </div><div class="line">#调整输出格式，根据文本内容进行调整</div></pre></td></tr></table></figure></p>
<p>print在输出之后会在自动加入换行符，但Linux系统中默认没有print命令<br>printf是标准格式输出命令，并不会自动加入换行符，如需换行，需要手动加入换行符<br>printf “%s\n” a</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell正则表达式 字符截取命令cut</title>
    <link href="http://yoursite.com/2018/05/20/Shell-%E5%AD%97%E7%AC%A6%E6%88%AA%E5%8F%96%E5%91%BD%E4%BB%A4cut/"/>
    <id>http://yoursite.com/2018/05/20/Shell-字符截取命令cut/</id>
    <published>2018-05-20T09:49:22.000Z</published>
    <updated>2018-05-20T12:23:02.195Z</updated>
    
    <content type="html"><![CDATA[<p>grep行提取，cut列提取</p>
<h2 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cut [选项] 文件名</div><div class="line">选项 </div><div class="line">-f 列号：提取第几列（从1开始）</div><div class="line">-d 分隔符：按照指定分隔符分割列 默认为tab</div><div class="line"></div><div class="line">cut -f 列号,列号 文件名 （多个列号用逗号隔开；这个方法默认的文件以TAB制表符）</div><div class="line">cut -f 列号,列号 -d &quot;指定的分隔符&quot; 文件名</div><div class="line"></div><div class="line">grep &quot;bin/bash&quot; /etc/passwd     可以登录的用户</div><div class="line">grep &quot;bin/bash&quot; /etc/passwd | grep -v &quot;root&quot;    排除root的可登录用户</div><div class="line">grep &quot;bin/bash&quot; /etc/passwd | grep -v &quot;root&quot; | cut -f 1 -d &quot;:&quot; 提取非root登录用户用户名</div></pre></td></tr></table></figure>
<h2 id="cut命令的局限性"><a href="#cut命令的局限性" class="headerlink" title="cut命令的局限性"></a>cut命令的局限性</h2><p>用cut截取比较规律的文件，用默认制表符或其他符号作为分隔符，可以方便截取，如果是用空格或多个空格做分隔符，就会有问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df -h | cut -d &quot; &quot; -f 1,3</div><div class="line">无法正确分隔多个空格，只能以一个空格分隔</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;grep行提取，cut列提取&lt;/p&gt;
&lt;h2 id=&quot;cut命令&quot;&gt;&lt;a href=&quot;#cut命令&quot; class=&quot;headerlink&quot; title=&quot;cut命令&quot;&gt;&lt;/a&gt;cut命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>文本去除重复行</title>
    <link href="http://yoursite.com/2018/05/20/%E6%96%87%E6%9C%AC%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E8%A1%8C/"/>
    <id>http://yoursite.com/2018/05/20/文本去除重复行/</id>
    <published>2018-05-20T05:02:58.000Z</published>
    <updated>2018-05-20T05:03:29.980Z</updated>
    
    <content type="html"><![CDATA[<p>Find what:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(.*)(\r?\n\1)+$</div></pre></td></tr></table></figure></p>
<p>Replace with:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$1</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Find what:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Shell正则表达式 概述</title>
    <link href="http://yoursite.com/2018/05/20/Shell-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/20/Shell-正则表达式/</id>
    <published>2018-05-20T01:44:07.000Z</published>
    <updated>2018-05-20T12:22:30.507Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是用于描述字符排列和匹配模式的一种语法规则。它主要用于字符串的模式分割、匹配、查找及替换操作。主要用于模糊匹配。</p>
<h2 id="正则表达式与通配符的区别"><a href="#正则表达式与通配符的区别" class="headerlink" title="正则表达式与通配符的区别"></a>正则表达式与通配符的区别</h2><p>正则表达式用来在文件中匹配符合条件的<strong>字符串</strong>，正则是<strong>包含匹配</strong>。grep、awk、sed等命令可以支持正则表达式</p>
<p>通配符用来匹配符合条件的<strong>文件名</strong>，通配符是<strong>完全匹配</strong>。ls、find、cp这些命令不支持正则表达式，所以只能使用shell自己的通配符进行匹配</p>
<p><br></p>
<h2 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>前一个字符匹配0次或任意多次</td>
</tr>
<tr>
<td>.</td>
<td>匹配除了换行符外任意一个字符</td>
</tr>
<tr>
<td>^</td>
<td>匹配行首。例如<code>^hello</code>会匹配以hello开头的行</td>
</tr>
<tr>
<td>$</td>
<td>匹配行尾。例如<code>hello$</code>会匹配以hello结尾的行</td>
</tr>
<tr>
<td>[]</td>
<td>匹配中括号中指定的任意一个字符，只匹配一个字符。[0-9]匹配任意一位数字</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配除中括号的字符以外的任意一个字符。<br> 例如：[^0-9]匹配任意一位非数字字符<br>[^a-z]表示任意一位非小写字母</td>
</tr>
<tr>
<td>\</td>
<td>转义符。用于取消将特殊符号的含义取消</td>
</tr>
<tr>
<td><code>\{n\}</code></td>
<td>表示其前面的字符恰好出现N次<br>例如：<code>[0-9]\{4\}</code> 匹配4位数字<br><code>[1][3-8][0-9]\{9\}</code> 匹配手机号码</td>
</tr>
<tr>
<td><code>\{n,\}</code></td>
<td>表示其前面的字符出现不小于n次。 例如 <code>[0-9]\{2,\}</code>表示两位及以上的数字</td>
</tr>
<tr>
<td><code>\{n,m\}</code></td>
<td>表示其前面的字符至少出现n次，最多出现m次。 <br> 例如<code>[a-z]\{6,8\}</code>匹配6到8位的小写字母</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">a*      匹配所有内容，包括空白行</div><div class="line">aa*     匹配至少包含有一个a的行</div><div class="line">aaa*    匹配最少包含两个连续a的字符串</div><div class="line">aaaaa*  匹配最少包含四个连续a的字符串</div><div class="line">区别于通配符里的*，通配符里的a*表示以a开头的字符串，这也说明了正则是一种包含匹配</div><div class="line"></div><div class="line">s..d    匹配s和d之间含有2个任意字符(除换行符)行，有多少个点就多少个字符</div><div class="line">s.*d    匹配s和d之间含有任意内容的行</div><div class="line">.*      匹配所有内容</div><div class="line"></div><div class="line">^s      匹配以s开头的行</div><div class="line">n$      匹配以n结尾的行</div><div class="line">^$      匹配空白行</div><div class="line"></div><div class="line">s[ao]id     匹配s和i字母中，要不是a，要不是o</div><div class="line">[0-9]       匹配任意任意一个数字</div><div class="line">^[a-z]      匹配用小写字母开头的行</div><div class="line">[a-zA-z]    匹配所有字母，shell中不支持[A-z]</div><div class="line"></div><div class="line">^[^a-z]     匹配非小写字母开头的行</div><div class="line">^[^a-zA-Z]  匹配非字母开头的行</div><div class="line"></div><div class="line">\.$     匹配使用.结尾的行</div><div class="line">.$      以任意字符结尾的行</div><div class="line"></div><div class="line"></div><div class="line">a\&#123;3\&#125;      匹配a字母连续出现三次的字符串</div><div class="line">[0-9]\&#123;3\&#125;  匹配包含连续的三个数字的字符串</div><div class="line">c\&#123;3\&#125;u     匹配u前面有三个c的字符串</div><div class="line">&quot;xc\&#123;3\&#125;u&quot;  匹配x和u之间三个c的字符串，x、u为定界符</div><div class="line">**实际使用中也会匹配多于n次的，如果需要准确匹配，则需要在前后使用分隔符**</div><div class="line"></div><div class="line">^[0-9]\&#123;3,\&#125;[a-z]   匹配最少用连续三个数字开头的行</div><div class="line">sa\&#123;1,3\&#125;i  匹配在字母s和字母i之间最少一个a，最多三个a</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">正则表达式适合在文档中提取，不适合做写入的判断依据</div><div class="line"></div><div class="line">[0-9]\&#123;4\&#125;-[0-9]\&#123;2\&#125;-[0-9]\&#123;2\&#125;</div><div class="line">匹配日期</div><div class="line"></div><div class="line">^[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;</div><div class="line">匹配IP地址</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式是用于描述字符排列和匹配模式的一种语法规则。它主要用于字符串的模式分割、匹配、查找及替换操作。主要用于模糊匹配。&lt;/p&gt;
&lt;h2 id=&quot;正则表达式与通配符的区别&quot;&gt;&lt;a href=&quot;#正则表达式与通配符的区别&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell正则表达式 通配符</title>
    <link href="http://yoursite.com/2018/05/20/Shell-%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/05/20/Shell-通配符/</id>
    <published>2018-05-20T01:04:43.000Z</published>
    <updated>2018-05-20T13:09:20.860Z</updated>
    
    <content type="html"><![CDATA[<style>
table th:nth-of-type(1){
width: 30%;
}
table th:nth-of-type(2){
width: 70%;
}
</style>

<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>?</td>
<td>匹配一个任意字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个任意字符</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号中任意一个字符</td>
</tr>
<tr>
<td>[-]</td>
<td>匹配括号中任意一个字符，-代表一个范围</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配不是括号中的一个字符</td>
</tr>
</tbody>
</table>
<p>Bash中其他特殊符号</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>‘’</td>
<td>单引号，在单引号中左右的特殊符号，如$、`(反引号)都没有特殊含义</td>
</tr>
<tr>
<td>“”</td>
<td>双引号，在双引号中左右的特殊符号都没有特殊含义，但是“$”,”`”,”\”是例外。拥有“调用变量的值”，“引用命令”和“转义符”的特殊含义</td>
</tr>
<tr>
<td>``</td>
<td>反引号，反引号括起来的内容是系统命令，在Bash中会先执行它。和$()作用一样。不过推荐使用$()，因为反引号非常容易看错</td>
</tr>
<tr>
<td>$()</td>
<td>和反引号作用一样，用来引用系统命令</td>
</tr>
<tr>
<td>#</td>
<td>在Shell脚本中，#开头的行代表注释</td>
</tr>
<tr>
<td>$</td>
<td>用于调用变量的值，如需要调用变量name的值时，需要用$name的方式得到变量的值</td>
</tr>
<tr>
<td>\</td>
<td>转义符，跟在\之后的特殊符号将失去特殊含义，变为普通字符。如\\$将输出”$”符号，而不再是变量引用</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">echo `ls`</div><div class="line">echo date</div><div class="line">echo `date`</div><div class="line">echo $(date)</div><div class="line"></div><div class="line">name=xi</div><div class="line">echo &apos;$name&apos;</div><div class="line">echo &quot;$name&quot;</div><div class="line">echo &apos;$(date)&apos;</div><div class="line">echo &quot;$(date)&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
table th:nth-of-type(1){
width: 30%;
}
table th:nth-of-type(2){
width: 70%;
}
&lt;/style&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
</feed>
