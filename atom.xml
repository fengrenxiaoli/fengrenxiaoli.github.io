<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳落下</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-05T03:11:59.409Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 专题导航</title>
    <link href="http://yoursite.com/2018/06/05/Linux-%E4%B8%93%E9%A2%98%E5%AF%BC%E8%88%AA/"/>
    <id>http://yoursite.com/2018/06/05/Linux-专题导航/</id>
    <published>2018-06-05T03:09:32.000Z</published>
    <updated>2018-05-05T03:11:59.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件管理&quot;&gt;&lt;a href=&quot;#文件管理&quot; class=&quot;headerlink&quot; title=&quot;文件管理&quot;&gt;&lt;/a&gt;文件管理&lt;/h2&gt;&lt;h2 id=&quot;权限管理&quot;&gt;&lt;a href=&quot;#权限管理&quot; class=&quot;headerlink&quot; title=&quot;权限管理&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell 变量测试</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E5%8F%98%E9%87%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/05/19/Shell-变量测试/</id>
    <published>2018-05-19T14:30:46.000Z</published>
    <updated>2018-05-19T14:34:53.570Z</updated>
    
    <content type="html"><![CDATA[<p>变量测试在脚本优化时使用</p>
<p><img src="http://ow3dy62zt.bkt.clouddn.com/IMG49.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">例子：测试x=$&#123;y-新值&#125;</div><div class="line">unset y</div><div class="line">x=$&#123;y-2&#125;</div><div class="line">echo $x</div><div class="line">2</div><div class="line"></div><div class="line">y=&quot;&quot;</div><div class="line">#将y的值设为空值</div><div class="line">x=$&#123;y-2&#125;</div><div class="line">echo $x</div><div class="line">#x为空</div><div class="line"></div><div class="line">y=1</div><div class="line">x=$&#123;y-2&#125;</div><div class="line">echo $x</div><div class="line">1</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;变量测试在脚本优化时使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow3dy62zt.bkt.clouddn.com/IMG49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 数值运算</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2018/05/19/Shell-数值运算/</id>
    <published>2018-05-19T14:21:38.000Z</published>
    <updated>2018-05-19T14:35:51.842Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记住一名话就OK，<code>$((运算式))</code></p>
</blockquote>
<h2 id="数值运算方法一-declare-i"><a href="#数值运算方法一-declare-i" class="headerlink" title="数值运算方法一 declare -i"></a>数值运算方法一 declare -i</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">aa=11</div><div class="line">bb=22</div><div class="line">declare -i cc=$aa+$bb</div><div class="line">echo $cc</div><div class="line">33</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="数值运算方法2：expr或let"><a href="#数值运算方法2：expr或let" class="headerlink" title="数值运算方法2：expr或let"></a>数值运算方法2：expr或let</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">aa=11</div><div class="line">bb=22</div><div class="line">dd=$(expr $aa + $bb)</div><div class="line">#+号两边必须有空格，没有空格依旧是字符串拼接</div><div class="line">echo $dd</div><div class="line">33</div><div class="line"></div><div class="line">aa=11</div><div class="line">bb=22</div><div class="line">let &quot;ee=aa+bb&quot;</div><div class="line">echo $ee</div><div class="line">33</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="数值运算方法3：-运算式-或-运算式"><a href="#数值运算方法3：-运算式-或-运算式" class="headerlink" title="数值运算方法3：$((运算式))或$[运算式]"></a>数值运算方法3：$((运算式))或$[运算式]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">aa=11</div><div class="line">bb=22</div><div class="line">ff=$(($aa+$bb))</div><div class="line">echo $ff</div><div class="line">33</div></pre></td></tr></table></figure>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p><img src="http://ow3dy62zt.bkt.clouddn.com/IMG48.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记住一名话就OK，&lt;code&gt;$((运算式))&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数值运算方法一-declare-i&quot;&gt;&lt;a href=&quot;#数值运算方法一-declare-i&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell declare命令</title>
    <link href="http://yoursite.com/2018/05/19/Shell-declare%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/19/Shell-declare命令/</id>
    <published>2018-05-19T14:02:08.000Z</published>
    <updated>2018-05-19T14:20:56.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="declare命令"><a href="#declare命令" class="headerlink" title="declare命令"></a>declare命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">declare [+/-][选项] 变量名 </div><div class="line">#declare命令用来声明shell的变量类型，因为shell变量默认都是字符串型</div><div class="line">选项：</div><div class="line">-：用于给变量设定类型属性</div><div class="line">+：用于取消变量的类型属性</div><div class="line">-a：将变量声明为数组型</div><div class="line">-i：将变量声明为整型</div><div class="line">-x：将变量声明为环境变量</div><div class="line">-r：将变量声明为只读变量</div><div class="line">-p：显示指定变量被声明的类型</div><div class="line"></div><div class="line">aa=11 </div><div class="line">bb=22</div><div class="line">declare -i cc=$aa+$bb</div><div class="line">declare -p c  #查看变量cc的类型</div><div class="line">#声明变量cc的类型是整数型，它的值是aa和bb的和</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#定义数组</div><div class="line">#数组的定义不需要declare命令也可以，直接使用movie[i]=value</div><div class="line">movie[0]=zp</div><div class="line">movie[1]=tp</div><div class="line">declare -a movie[2]=live</div><div class="line"></div><div class="line">#查看数组</div><div class="line">echo $&#123;movie&#125;   #输出数组下标为0的变量值</div><div class="line">echo $&#123;movie[2]&#125; </div><div class="line">echo $&#123;movie[*]&#125; #输出数组的全部值</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="声明环境变量"><a href="#声明环境变量" class="headerlink" title="声明环境变量"></a>声明环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">declare -x test=123</div><div class="line">#和export作用类似，export命令实际过程是调用declare命令</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="声明变量只读属性"><a href="#声明变量只读属性" class="headerlink" title="声明变量只读属性"></a>声明变量只读属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">declare -r test</div><div class="line">#给test赋予只读属性，赋予后不能修改该变量，不能删除，甚至不能取消只读属性</div><div class="line">#临时生效，重启无效</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="查询变量的属性"><a href="#查询变量的属性" class="headerlink" title="查询变量的属性"></a>查询变量的属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">declare -p</div><div class="line">#列出系统中所有变量的类型</div><div class="line"></div><div class="line">declare -p 变量名</div><div class="line">#查询指定变量的属性</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;declare命令&quot;&gt;&lt;a href=&quot;#declare命令&quot; class=&quot;headerlink&quot; title=&quot;declare命令&quot;&gt;&lt;/a&gt;declare命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell Bash语系变量</title>
    <link href="http://yoursite.com/2018/05/19/Shell-Bash%E8%AF%AD%E7%B3%BB%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/19/Shell-Bash语系变量/</id>
    <published>2018-05-19T10:03:47.000Z</published>
    <updated>2018-05-19T10:10:29.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="当前语系查询"><a href="#当前语系查询" class="headerlink" title="当前语系查询"></a>当前语系查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">locale</div><div class="line">#查询当前系统语系</div><div class="line">#LANG:定义系统主语系的变量</div><div class="line">#LC_ALL:定义整体语系的变量</div></pre></td></tr></table></figure>
<h2 id="语系变量LANG"><a href="#语系变量LANG" class="headerlink" title="语系变量LANG"></a>语系变量LANG</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">echo $LANG</div><div class="line">#查看系统当前语系</div><div class="line">locale -a | more</div><div class="line">#查看Linux支持的所有语系</div></pre></td></tr></table></figure>
<h2 id="查询系统默认语系"><a href="#查询系统默认语系" class="headerlink" title="查询系统默认语系"></a>查询系统默认语系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /etc/sysconfig/i18n</div><div class="line">#下次开机以后的系统环境</div></pre></td></tr></table></figure>
<h2 id="设置当前语系"><a href="#设置当前语系" class="headerlink" title="设置当前语系"></a>设置当前语系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LANG=zh_CN.UTF-8  </div><div class="line">#切换成中文</div><div class="line"></div><div class="line">LANG=en_US.UTF-8</div></pre></td></tr></table></figure>
<p>Linux支持中文的前提条件是正确安装中文字体和中文语系</p>
<ul>
<li>如果有图形界面，可以正确使用支持中文显示</li>
<li>如果使用第三方远程工具，只要语系设定正确，可以支持中文显示</li>
<li>如果使用纯字符界面，必须使用第三方插件（如zhcon等），即使设置LANG变量也没用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;当前语系查询&quot;&gt;&lt;a href=&quot;#当前语系查询&quot; class=&quot;headerlink&quot; title=&quot;当前语系查询&quot;&gt;&lt;/a&gt;当前语系查询&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 预定义变量和位置参数变量</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%92%8C%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/19/Shell-预定义变量和位置参数变量/</id>
    <published>2018-05-19T09:52:46.000Z</published>
    <updated>2018-05-19T12:31:01.171Z</updated>
    
    <content type="html"><![CDATA[<style>
table th:nth-of-type(1){
width: 30%;
}
table th:nth-of-type(2){
width: 70%
;
}

</style>


<h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><table>
<thead>
<tr>
<th>预定义变量</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>$?</td>
<td>最后一次执行命令的返回状态。如果正确执行，则返回0；如果返回为非零（具体数值由命令决定），则上一条命令执行不正确</td>
</tr>
<tr>
<td>$$</td>
<td>返回当前进程的PID</td>
</tr>
<tr>
<td>$!</td>
<td>返回后台运行的最后一个进程的PID</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ls || echo yes</div><div class="line">ls qwe  &amp;&amp; echo no</div><div class="line">前面一条语句正确执行，才执行后一条语句。这里就是通过执行命令的返回值来判断的</div><div class="line"></div><div class="line">echo $?</div><div class="line">echo $$     #直接打印返回的是/bin/bash，需要时可以放到shell脚本里</div><div class="line">echo $!</div></pre></td></tr></table></figure>
<p>可以通过一个简单的shell来展示一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">ehco &quot;dang qian de PID: $$&quot;</div><div class="line"></div><div class="line">find / hello.sh &amp;</div><div class="line">echo &quot;hou tai de PID: $!&quot;</div></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p>位置参数变量本质上还是预定义变量</p>
<table>
<thead>
<tr>
<th>位置参数变量</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>n 为数字，<strong>$0 代表命令本身</strong>，$1-$9 代表第一到第九个参数，十以上的参数需要用大括号包含，如 ${10}</td>
</tr>
<tr>
<td>$*</td>
<td>这个变量代表命令行中所有的参数，$* 把所有的参数看成一个整体</td>
</tr>
<tr>
<td>$@</td>
<td>这个变量也代表命令行中所有的参数，不过 $@ 把每个参数区分对待</td>
</tr>
<tr>
<td>$#</td>
<td>这个变量代表命令行中所有参数的个数</td>
</tr>
</tbody>
</table>
<h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">num1=$1</div><div class="line">num2=$2</div><div class="line">sum=$(($num1+$num2)) </div><div class="line">#变量 sum 的和是 num1 加 num2</div><div class="line">echo $sum </div><div class="line">#打印变量 sum 的值</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#执行脚本</div><div class="line">./test.sh 45 76</div></pre></td></tr></table></figure>
<h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;A total of $# parameters&quot;</div><div class="line">#使用 $# 代表所有参数的个数</div><div class="line">echo &quot;The parameters is：$*&quot;</div><div class="line">#使用 $* 代表所有的参数</div><div class="line">echo &quot;The parameters is：$@&quot;</div><div class="line">#使用 $@ 代表所有的参数</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#执行脚本</div><div class="line">./test.sh 11 22 33 44</div></pre></td></tr></table></figure>
<h4 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">for i in &quot;$*&quot;</div><div class="line"># $* 中所有参数看成是一个整体，所以这个 for 循环只会循环一次</div><div class="line">do</div><div class="line">  echo &quot;The parameters is:$i&quot;</div><div class="line">done</div><div class="line"></div><div class="line">for y in &quot;$@&quot;</div><div class="line"># $@ 中每个参数都看成是独立的，所以 $@ 中有几个参数，就会循环几次</div><div class="line">do</div><div class="line">  echo &quot;Parameter:$y&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="接收键盘输入"><a href="#接收键盘输入" class="headerlink" title="接收键盘输入"></a>接收键盘输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">read [选项] [变量名]</div><div class="line">选项：</div><div class="line">-p &quot;提示信息&quot;：在等待read输入时，输出提示信息</div><div class="line">-t 秒数：read命令会一直等待用户输入，使用此选项可以指定等待时间</div><div class="line">-n 字符数：read命令只接受指定的字符数，就会执行</div><div class="line">-s：隐藏输入的数据，适用于机密信息的输入，比如密码</div></pre></td></tr></table></figure>
<p><code>read.sh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -p &quot;please input your name:&quot; -t 30 name</div><div class="line">echo $name</div><div class="line">#如果超过30秒不输入，就终止当前命令</div><div class="line"></div><div class="line">read -p &quot;please input your passwd:&quot; -s passwd</div><div class="line">echo -e &quot;\n&quot;</div><div class="line">echo $passwd</div><div class="line">#输入的值是隐藏的，看不见的，但是在sh里面还是可以获取到的，并且可以输出的</div><div class="line"></div><div class="line">read -p &quot;please input your sex [M/F]:&quot; sex</div><div class="line">echo -e &quot;\n&quot;</div><div class="line">echo $sex</div><div class="line">#只能输入一个字符，且输入之后立马执行</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
table th:nth-of-type(1){
width: 30%;
}
table th:nth-of-type(2){
width: 70%
;
}

&lt;/style&gt;


&lt;h2 id=&quot;预定义变量&quot;&gt;&lt;a href=&quot;#预定义变量&quot; class=&quot;he
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 环境变量</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/19/Shell-环境变量/</id>
    <published>2018-05-19T07:32:58.000Z</published>
    <updated>2018-05-19T09:41:51.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境变量与用户自定义变量的区别"><a href="#环境变量与用户自定义变量的区别" class="headerlink" title="环境变量与用户自定义变量的区别"></a>环境变量与用户自定义变量的区别</h2><p>环境变量是全局变量，用户自定义变量是局部变量。<br>用户自定义变量只在当前的 shell 中生效，环境变量在当前 shell 和这个 shell 的所有子 shell 中生效。<br>用户可以自定义环境变量，但对系统生效的环境变量名和变量作用是固定的。</p>
<p><br></p>
<h2 id="用户自定义环境变量"><a href="#用户自定义环境变量" class="headerlink" title="用户自定义环境变量"></a>用户自定义环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">export 变量名=变量值</div><div class="line">或</div><div class="line">变量名=变量值</div><div class="line">export 变量名</div><div class="line"></div><div class="line">export Y=1</div><div class="line"></div><div class="line">Z=1</div><div class="line">export Z</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set </div><div class="line">#查看所有变量</div><div class="line"></div><div class="line">env </div><div class="line">#查看环境变量</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unset 环境名</div><div class="line">#没有$</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h2><p>HOSTNAME：主机名<br>SHELL：当前的shell<br>TERM：终端环境<br>HISTSIZE：历史命令条数<br>SSH_CLIENT：当前操作环境是用 ssh 连接的，这里记录客户端 ip<br>SSH_TTY：ssh 连接的终端是 pts/1<br>USER：当前登录的用户</p>
<h4 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#系统搜索命令的路径</div><div class="line"></div><div class="line">echo $PATH</div><div class="line">#查看PATH环境变量</div><div class="line"></div><div class="line">PATH=&quot;$PATH&quot;:/root/sh</div><div class="line">#临时增加PATH变量的值，系统重启后失效</div></pre></td></tr></table></figure>
<h4 id="PS1环境变量"><a href="#PS1环境变量" class="headerlink" title="PS1环境变量"></a>PS1环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">命令提示符设置</div><div class="line">[root@localhost ~]#</div><div class="line">\d：显示日期，格式为&quot;星期 月 日&quot;</div><div class="line">\H：显示完整的主机名</div><div class="line">\t：显示 24 小时制时间，格式为&quot;HH:MM:SS&quot;</div><div class="line">\A：显示 24 小时制时间，格式为&quot;HH:MM&quot;</div><div class="line">\u：显示当前用户名</div><div class="line">\w：显示当前所在目录的完整名称</div><div class="line">\W：显示当前所在目录的最后一个目录</div><div class="line">\$：提示符。root 用户为&quot;#&quot;，普通用户为&quot;$&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境变量与用户自定义变量的区别&quot;&gt;&lt;a href=&quot;#环境变量与用户自定义变量的区别&quot; class=&quot;headerlink&quot; title=&quot;环境变量与用户自定义变量的区别&quot;&gt;&lt;/a&gt;环境变量与用户自定义变量的区别&lt;/h2&gt;&lt;p&gt;环境变量是全局变量，用户自定义变量是
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 用户自定义变量</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/19/Shell-用户自定义变量/</id>
    <published>2018-05-19T07:32:37.000Z</published>
    <updated>2018-05-19T09:33:43.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">变量名=变量值</div><div class="line">#=号左右不可有空格</div><div class="line">#变量值有空格需要加&quot;&quot;</div><div class="line">#所有变量默认的值都是字符串类型，不可做Math运算</div><div class="line"></div><div class="line">x=5</div><div class="line">x=&quot;hello jx&quot;</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="调用变量"><a href="#调用变量" class="headerlink" title="调用变量"></a>调用变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$变量名</div><div class="line"></div><div class="line">echo $x</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="变量叠加"><a href="#变量叠加" class="headerlink" title="变量叠加"></a>变量叠加</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">x=123           #123</div><div class="line">x=&quot;$x&quot;456       #123456</div><div class="line">x=$&#123;x&#125;789       #123456789</div><div class="line"></div><div class="line">x=5</div><div class="line">y=6</div><div class="line">z=$x+$y         #5+6</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="变量查看"><a href="#变量查看" class="headerlink" title="变量查看"></a>变量查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">set</div><div class="line">选项：</div><div class="line">-u：如果设定此选项，调用未声明变量里会报错（默认调用未声明变量无任何提示，值为空的变量也无任何提示）</div><div class="line"></div><div class="line">echo $jflajlf</div><div class="line">set -u</div><div class="line">echo $jflajlf</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">unset 变量名</div><div class="line">#注意变量名没有$，因为要删除的是变量，而不是变量的值</div><div class="line"></div><div class="line">unset x</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义变量&quot;&gt;&lt;a href=&quot;#定义变量&quot; class=&quot;headerlink&quot; title=&quot;定义变量&quot;&gt;&lt;/a&gt;定义变量&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 变量</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/19/Shell-变量/</id>
    <published>2018-05-19T07:14:11.000Z</published>
    <updated>2018-05-19T09:22:43.303Z</updated>
    
    <content type="html"><![CDATA[<p>Shell是一种脚本语言</p>
<h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><ol>
<li>变量名必须以字母或下划线打头，名字中间只能由字母、数字和下划线组成</li>
<li>变量名的长度不超过255个字符</li>
<li>变量名在有效的范围内必须是唯一的，如再次定义则会替换上一个变量的值</li>
<li>在Bash中，变量的默认类型都是字符串型，系统把所有值都当作字符串放到变量中，不论这个“字符串”实际上是整数、浮点数等等，shell也不区分字符串型，整型，浮点型，日期型</li>
</ol>
<p>目录名、文件名、变量名要有含义</p>
<p><br></p>
<h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><ul>
<li>用户自定义变量：变量自定义的</li>
<li>环境变量：这种变量中主要保存的是和系统操作环境相关的数据，变量可以自定义，但是对系统生效的环境变量名和变量作用是固定的</li>
<li>位置参数变量：这种变量主要是用来向脚本当中传递参数或数据的，变量名不能自定义，变量作用是固定的。实际就是预定义变量的一种，只是功能单一固定，所以单独拿出来</li>
<li>预定义变量：Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的</li>
</ul>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shell是一种脚本语言&lt;/p&gt;
&lt;h2 id=&quot;变量命名规则&quot;&gt;&lt;a href=&quot;#变量命名规则&quot; class=&quot;headerlink&quot; title=&quot;变量命名规则&quot;&gt;&lt;/a&gt;变量命名规则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;变量名必须以字母或下划线打头，名字中间只能由字母、数字和
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 通配符</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/05/19/Shell-通配符/</id>
    <published>2018-05-19T04:04:43.000Z</published>
    <updated>2018-05-19T04:19:12.540Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>?</td>
<td>匹配一个任意字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个任意字符</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号中任意一个字符</td>
</tr>
<tr>
<td>[-]</td>
<td>匹配括号中任意一个字符，-代表一个范围</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配不是括号中的一个字符</td>
</tr>
</tbody>
</table>
<p>Bash中其他特殊符号<br>|符号 |作用 |<br>|–| –|<br>|’’| 单引号，在单引号中左右的特殊符号，如$、<code>(反引号)都没有特殊含义|
|&quot;&quot;| 双引号，在双引号中左右的特殊符号都没有特殊含义，但是“$”,&quot;</code>“,”\”是例外。拥有“调用变量的值”，“引用命令”和“转义符”的特殊含义|<br>|``| 反引号，反引号括起来的内容是系统命令，在Bash中会先执行它。和$()作用一样。不过推荐使用$()，因为反引号非常容易看错|<br>|$() |和反引号作用一样，用来引用系统命令|<br>|# |在Shell脚本中，#开头的行代表注释|<br>|$ |用于调用变量的值，如需要调用变量name的值时，需要用$name的方式得到变量的值|<br>|\ |转义符，跟在\之后的特殊符号将失去特殊含义，变为普通字符。如\\$将输出”$”符号，而不再是变量引用|</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">echo `ls`</div><div class="line">echo date</div><div class="line">echo `date`</div><div class="line">echo $(date)</div><div class="line"></div><div class="line">name=xi</div><div class="line">echo &apos;$name&apos;</div><div class="line">echo &quot;$name&quot;</div><div class="line">echo &apos;$(date)&apos;</div><div class="line">echo &quot;$(date)&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;匹配一个任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;匹配0个或多个任意字符&lt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 管道符</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E5%A4%9A%E5%91%BD%E4%BB%A4%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%92%8C%E7%AE%A1%E9%81%93%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/05/19/Shell-多命令顺序执行和管道符/</id>
    <published>2018-05-19T02:43:28.000Z</published>
    <updated>2018-05-19T04:04:18.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多命令顺序执行"><a href="#多命令顺序执行" class="headerlink" title="多命令顺序执行"></a>多命令顺序执行</h2><table>
<thead>
<tr>
<th>多命令执行符</th>
<th>格式</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>;</code></td>
<td>命令1;命令2</td>
<td>多个命令顺序执行，命令之间没有任何逻辑联系</td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>命令1&amp;&amp;命令2</td>
<td>逻辑与<br>当命令1正确执行，则命令2才会执行<br>当命令1执行不正确，则命令2不会执行</td>
</tr>
<tr>
<td>`</td>
<td></td>
<td>`</td>
<td>命令1\</td>
<td>\</td>
<td>命令2</td>
<td>逻辑或<br>当命令1执行不正确，则命令2才会执行<br>当命令1正确执行，则命令2不会执行</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">date ; tar -zcvf etc.tar.gz /etc ; date        </div><div class="line">#可以计算备份所用的时间</div><div class="line"></div><div class="line">ls &amp;&amp; echo yes || echo no          </div><div class="line">#当ls正确执行时打印yes；当ls错误执行时打印no</div><div class="line">#顺序不能颠倒，不然命令出错的时候会同时输出no yes</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">命令1 | 命令2    </div><div class="line">#命令1的正确输出作为命令2的操作对象</div><div class="line"></div><div class="line">netstat -an | grep ESTABLISHED | wc -l     </div><div class="line">#查找当前有多少用户正在连接服务器</div><div class="line">ll -a /etc/ | more</div><div class="line"></div><div class="line">more [文件名] </div><div class="line">#分页显示文件内容&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多命令顺序执行&quot;&gt;&lt;a href=&quot;#多命令顺序执行&quot; class=&quot;headerlink&quot; title=&quot;多命令顺序执行&quot;&gt;&lt;/a&gt;多命令顺序执行&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;多命令执行符&lt;/th&gt;
&lt;th&gt;格式&lt;/th&gt;
&lt;th&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 重定向</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://yoursite.com/2018/05/19/Shell-重定向/</id>
    <published>2018-05-19T02:41:59.000Z</published>
    <updated>2018-05-19T03:47:45.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件标识符："><a href="#文件标识符：" class="headerlink" title="文件标识符："></a>文件标识符：</h2><table>
<thead>
<tr>
<th>设备</th>
<th>设备文件名</th>
<th>文件标识符</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>键盘</td>
<td>/dev/stdin</td>
<td>0</td>
<td>标准输入</td>
</tr>
<tr>
<td>显示器</td>
<td>/dev/stdout</td>
<td>1</td>
<td>标准输出</td>
</tr>
<tr>
<td>显示器</td>
<td>/dev/stderr</td>
<td>2</td>
<td>标准错误输出</td>
</tr>
</tbody>
</table>
<p>3-9是保留的标识符</p>
<p><br></p>
<h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>一旦使用数字、&amp;，数字、&amp;和&gt;、&gt;&gt;之间不能有空格<br>没有数字、%有无空格没有关系，但是为了方便还是有比较好</p>
<table><br>    <tr><br>        <td>类型</td><br>        <td>符号</td><br>        <td>作用</td><br>    </tr><br>    <tr><br>        <td rowspan="2">标准输出重定向</td><br>        <td>命令 &gt; 文件</td><br>        <td>以覆盖的方式，把命令的正确输出输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td>命令 &gt;&gt; 文件</td><br>        <td>以追加的方式把命令的正确输出输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td rowspan="2">标准错误输出重定向</td><br>        <td>错误命令 2&gt;文件</td><br>        <td>以覆盖的方式把命令的错误输出输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td>错误命令 2&gt;&gt;文件</td><br>        <td>以追加的方式把命令的错误输出输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td rowspan="5">正确输出和错误输出同时保存</td><br>        <td>命令 &gt;文件 2&gt;&amp;1</td><br>        <td>以覆盖方式把命令的正确输出、输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td>命令 &gt;&gt;文件 2&gt;&amp;1</td><br>        <td>以追加方式把命令的正确输出、输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td>命令 &amp;&gt;文件</td><br>        <td>以覆盖方式把命令的正确输出、输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td>命令 &amp;&gt;&gt;文件</td><br>        <td>以追加方式把命令的正确输出、输出到指定文件或设备中</td><br>    </tr><br>    <tr><br>        <td>命令 &gt;&gt;文件1 2&gt;&gt;文件2</td><br>        <td>把正确的输出追加到文件1中，把错误的输出追加到文件2中</td><br>    </tr><br>    <tr><br>        <td>只执行，不显示</td><br>        <td>命令 &amp;&gt; /dev/null </td><br>        <td>将命令的结果丢入null（作用类似于垃圾箱）中，只执行，不显示</td><br>    </tr><br></table> 


<p><br></p>
<h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">命令 &lt; 文件名 </div><div class="line">#把文件的内容作为输入 </div><div class="line">命令 &lt;&lt; 标识符</div><div class="line">#统计标识符到标识符再次出现之间的字符</div><div class="line"></div><div class="line"></div><div class="line">wc [选项] [文件名]</div><div class="line">选项：</div><div class="line">-c：统计字节数</div><div class="line">-w：统计行数</div><div class="line">-l：统计单词数</div><div class="line">wc执行后 输入 ctrl+d结束 会统计输入行数 单词数 字母数</div></pre></td></tr></table></figure>
<p><br></p>
<p>参考：</p>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-iotips/index.html" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/linux/l-iotips/index.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件标识符：&quot;&gt;&lt;a href=&quot;#文件标识符：&quot; class=&quot;headerlink&quot; title=&quot;文件标识符：&quot;&gt;&lt;/a&gt;文件标识符：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备&lt;/th&gt;
&lt;th&gt;设备文件名&lt;/th&gt;
&lt;th&gt;文件标识符
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 历史命令</title>
    <link href="http://yoursite.com/2018/05/19/Shell-%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/19/Shell-历史命令/</id>
    <published>2018-05-19T02:41:38.000Z</published>
    <updated>2018-05-19T03:05:26.505Z</updated>
    
    <content type="html"><![CDATA[<p>历史命令指的是把操作过的命令保留在系统当中, 当需要的时候可以重新进行调用</p>
<h2 id="histo"><a href="#histo" class="headerlink" title="histo"></a>histo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">history [选项] [历史命令保存文件]</div><div class="line">选项：</div><div class="line">-c：清空历史命令</div><div class="line">-w：把缓存中的历史命令强制写入历史命令保存文件 ~/.bash_history</div><div class="line"></div><div class="line">不建议清空</div><div class="line">当本次操作出现错误可用过历史命令进行比对排错</div><div class="line">当登录后发现历史命令被清空, 则可判断出有人登录过该账户或服务器</div><div class="line">即使命令保存数目众多, 文件大小也不大, 不会给服务器造成多大压力</div></pre></td></tr></table></figure>
<p>历史命令默认保存1000条, 可以在环境变量配置文件<code>/etc/profile</code>中进行修改<code>HISTSIZE=1000</code><br>使用history命令查看的, 不止有之前保存下来的, 还有本次登录后新操作的命令, 这些命令只有本次正确退出之后才会写入 <code>~/.bash_history</code></p>
<h2 id="历史命令的调用"><a href="#历史命令的调用" class="headerlink" title="历史命令的调用"></a>历史命令的调用</h2><ul>
<li>使用上、下箭头调用以前的历史命令</li>
<li>使用 “!n” 重复执行一次第 n 条历史命令</li>
<li>使用 “!!” 重复执行一次上一条命令</li>
<li>使用 “!字串” 重复执行最后一条以该字串开头的命令</li>
</ul>
<h2 id="命令与文本补全"><a href="#命令与文本补全" class="headerlink" title="命令与文本补全"></a>命令与文本补全</h2><p>在Bash中, 命令与文件补全是非常方便与常用的功能, 我们只要在输入命令或文件时, 按”Tab”键就会自动进行补全<br>系统进行命令补全依赖<code>$PATH</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;历史命令指的是把操作过的命令保留在系统当中, 当需要的时候可以重新进行调用&lt;/p&gt;
&lt;h2 id=&quot;histo&quot;&gt;&lt;a href=&quot;#histo&quot; class=&quot;headerlink&quot; title=&quot;histo&quot;&gt;&lt;/a&gt;histo&lt;/h2&gt;&lt;figure class=&quot;h
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell Bash别名和快捷键</title>
    <link href="http://yoursite.com/2018/05/19/Shell-Bash%E5%88%AB%E5%90%8D%E5%92%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/05/19/Shell-Bash别名和快捷键/</id>
    <published>2018-05-19T02:41:19.000Z</published>
    <updated>2018-05-19T02:49:35.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">alias</div><div class="line">#查看系统当中默认已经生效的别名</div><div class="line"></div><div class="line">alias ls = &apos;ls --color=auto&apos;</div><div class="line">#临时设定别名</div><div class="line"></div><div class="line">vi ~/.bashrc</div><div class="line">vi /root/.bashrc</div><div class="line">#写入环境变量配置文件，系统再次重启后永久生效</div><div class="line">source .bashrc</div><div class="line">#使当前环境变量设置立即生效，不需要系统重启</div><div class="line"></div><div class="line">unalias ls</div><div class="line">#删除别名</div></pre></td></tr></table></figure>
<p>命令生效顺序</p>
<ol>
<li>第一顺位执行绝对路径或者相对路径的命令</li>
<li>第二顺位执行别名</li>
<li>第三顺位执行Bash的内部命令</li>
<li>第四顺位执行按照$PATH环境变量设置定义的目录顺序的第一个命令</li>
</ol>
<p><br></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl + c 强制终止<br>ctrl + l 清屏相当于clear<br>ctrl + a 光标快速回到行首<br>ctrl + e 光标快速去到行尾<br>ctrl + u 从光标所在位置删除到行首<br>ctrl + z 把命令放入后台–，暂停<br>ctrl + r 历史命令搜索</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;别名&quot;&gt;&lt;a href=&quot;#别名&quot; class=&quot;headerlink&quot; title=&quot;别名&quot;&gt;&lt;/a&gt;别名&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本执行方式</title>
    <link href="http://yoursite.com/2018/05/19/Shell%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/19/Shell脚本执行方式/</id>
    <published>2018-05-19T02:23:28.000Z</published>
    <updated>2018-05-19T02:38:59.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚本执行："><a href="#脚本执行：" class="headerlink" title="脚本执行："></a>脚本执行：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">方法1：赋予执行权限，直接运行</div><div class="line">chmod 755 hello.sh</div><div class="line">./hello.sh（或者绝对路径执行 /root/hello.sh）</div><div class="line"></div><div class="line">方法2：通过Bash调用执行脚本</div><div class="line">bash hello.sh</div></pre></td></tr></table></figure>
<p>在shell脚本中<code>#!/bin/Bash</code>不是注释，它标称下面的内容是linux的标准脚本程序<br>如果该脚本使用纯shell语句完成，不加<code>#!/bin/Bash</code>运行是没问题的，但如果脚本调用了其他语言，就会报错</p>
<h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">echo [选项] [输出内容]</div><div class="line"></div><div class="line">选项： -e：支持反斜线控制的字符转换</div><div class="line"></div><div class="line">内容转义</div><div class="line">\a - 输出警告音</div><div class="line">\b - 退格符</div><div class="line">\n - 换行符</div><div class="line">\r - 回车键</div><div class="line">\t - 制表符，也就是tab键</div><div class="line">\v - 垂直制表符</div><div class="line">\0nnn - 按照八进制ASCII码输出字符</div><div class="line">\xhh - 按照十六进制ASCII表输出字符</div><div class="line"></div><div class="line">输出带颜色的内容 </div><div class="line">echo -e &quot;\e[1;31m文字\e[0m&quot;</div><div class="line">#输出颜色 \e[1;##m - 开启颜色显示； \e[0m - 关闭颜色显示</div><div class="line">#30m=黑色，31m=红色，32m=绿色，33m=黄色</div><div class="line">#34m=蓝色，35m=洋红，36m=青色，37m=白色</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;脚本执行：&quot;&gt;&lt;a href=&quot;#脚本执行：&quot; class=&quot;headerlink&quot; title=&quot;脚本执行：&quot;&gt;&lt;/a&gt;脚本执行：&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell概述</title>
    <link href="http://yoursite.com/2018/05/19/Shell%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/05/19/Shell概述/</id>
    <published>2018-05-19T01:05:24.000Z</published>
    <updated>2018-05-19T01:22:06.136Z</updated>
    
    <content type="html"><![CDATA[<p>Shell是一个命令行解释器（程序 -&gt; 依赖ASCII码表翻译为二进制 -&gt; Linux内核（发送请求）-&gt; 运行程序），它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至时编写一些程序。</p>
<p>Shell还是一个功能相当强大的编程语言，易编写，易调试，灵活性较强。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令</p>
<h2 id="Shell分类"><a href="#Shell分类" class="headerlink" title="Shell分类"></a>Shell分类</h2><ul>
<li>Bourne Shell：主文件名为sh，从1979年起Unix就开始使用Bourne Shell</li>
<li>C Shell:主要在BSD版的Unix系统中使用，其语法和C语言相类似而得名</li>
</ul>
<p>Shell的两种主要语法类型有Bourne和C，彼此不兼容。<br>Bourne家族主要包括sh,ksh,Bash(Linux使用的标准Shell，不区分发行版),psh,zsh;<br>C家族（Unix使用）主要包括：csh,tcsh（和Bash语法，配置微小区别）</p>
<p>Linux，Unix的主要区别：　Shell的不同</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">echo $SHELL </div><div class="line">#查看Shell</div><div class="line"></div><div class="line">cat /etc/shells</div><div class="line">#查看Linux支持的shell</div><div class="line"></div><div class="line">sh</div><div class="line">#进入sh模式</div><div class="line">exit</div><div class="line">#关闭模式</div></pre></td></tr></table></figure>
<p>Bash：Bash与sh兼容，现在使用的Linux就是使用Bash作为用户的基本Shell<br>Bourne Again Shell (bash) 是兼容Bourne Shell的一种相当于升级版本，注意命令bash中的ｂ是小写字母</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shell是一个命令行解释器（程序 -&amp;gt; 依赖ASCII码表翻译为二进制 -&amp;gt; Linux内核（发送请求）-&amp;gt; 运行程序），它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至时编写一些程序。&lt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>局域网安装ftp</title>
    <link href="http://yoursite.com/2018/05/18/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%89%E8%A3%85ftp/"/>
    <id>http://yoursite.com/2018/05/18/局域网安装ftp/</id>
    <published>2018-05-18T03:47:05.000Z</published>
    <updated>2018-05-18T03:59:13.212Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章的主要目的是方便局域网内的ftp配置</p>
<p>基本上实现这三点足够了：</p>
<ul>
<li>不允许匿名访问，因为我不想其他机器随便都能登陆上来；</li>
<li>锁定一个共享目录，在这个目录下我可以上传和下载文件，进行文件共享；</li>
<li>不单独建立ftp用户，本机就可以访问；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vsftpd </div><div class="line"></div><div class="line">#ubuntu的配置文件位置</div><div class="line">sudo vim /etc/vsftpd.conf</div><div class="line"></div><div class="line">anonymous_enable=NO         #禁止匿名登陆</div><div class="line">local_root=/home/user/ftp   #设定一个共享目录</div><div class="line">local_enable=YES            #本机可以访问</div><div class="line">write_enable=YES            #可以写</div><div class="line">chroot_list_enable=YES      </div><div class="line">chroot_list_file=/etc/vsftpd.chroot_list</div><div class="line">#不单独建立ftp用户</div><div class="line"></div><div class="line">#在其中写入可以使用ftp的用户名</div><div class="line">sudo vim /etc/vsftpd.chroot_list</div><div class="line"></div><div class="line">#不允许其他用户写</div><div class="line">chmod u-w,g-w ftp</div><div class="line"></div><div class="line">#重启</div><div class="line">sudo service vsftpd restart</div></pre></td></tr></table></figure>
<p>然后就可以使用各种客户端登陆了</p>
<p><br></p>
<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/hongbin_xu/article/details/73177748" target="_blank" rel="external">https://blog.csdn.net/hongbin_xu/article/details/73177748</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章的主要目的是方便局域网内的ftp配置&lt;/p&gt;
&lt;p&gt;基本上实现这三点足够了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不允许匿名访问，因为我不想其他机器随便都能登陆上来；&lt;/li&gt;
&lt;li&gt;锁定一个共享目录，在这个目录下我可以上传和下载文件，进行文件共享；&lt;/li&gt;
&lt;li&gt;不
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux SFTP、SCP命令</title>
    <link href="http://yoursite.com/2018/05/18/Linux-SFTP%5CSCP%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/18/Linux-SFTP\SCP命令/</id>
    <published>2018-05-18T02:20:11.000Z</published>
    <updated>2018-05-18T03:45:29.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h2><p>SFTP是安全文件传送协议，可以为传输文件提供一种安全的网络的加密方法。</p>
<p>SFTP 与 FTP 有着几乎一样的语法和功能。SFTP 为 SSH的其中一部分，所以说 SFTP 就是通过SSH端口（默认 22端口）和 Linux 用户和密码登陆的（例如 root 账号）。SFTP 使用加密传输认证信息和传输的数据，所以使用SFTP是非常安全的。但是由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多。</p>
<p>使用SFTP并不需要在服务器上做任何配置，只需要找个SFTP客户端，然后知道SSH端口、服务器用户名+密码即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"># 连接到SFTP</div><div class="line">sftp tecmint@27.48.137.6</div><div class="line"></div><div class="line"># 获得帮助</div><div class="line">?</div><div class="line">help</div><div class="line"></div><div class="line"># 检查本地工作目录</div><div class="line">lpwd</div><div class="line"># 检查远程工作目录</div><div class="line">pwd</div><div class="line"></div><div class="line"># 列出本地文件</div><div class="line">lls</div><div class="line"># 列出远程文件</div><div class="line">ls</div><div class="line"></div><div class="line"># 上传单个或多个文件</div><div class="line">put local.profile</div><div class="line"># 上传多个文件</div><div class="line">mput * .xls</div><div class="line"></div><div class="line"># 下载单个或多个文件</div><div class="line">get SettlementReport_1-10th.xls</div><div class="line"># 下载多个文件</div><div class="line">mget * .xls</div><div class="line"></div><div class="line"># 切换本地目录</div><div class="line">lcd Documents</div><div class="line"># 切换远程目录</div><div class="line">cd test</div><div class="line"></div><div class="line"># 创建目录</div><div class="line">mkdir test</div><div class="line">lmkdir test</div><div class="line"></div><div class="line"># 删除目录，该目录必须为空</div><div class="line">rm Report.xls</div><div class="line">rmdir sub1</div><div class="line"></div><div class="line"># 退出SFTP</div><div class="line">!</div><div class="line">exit</div></pre></td></tr></table></figure>
<h2 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h2><p>使用SSH协议来传输文件的</p>
<ul>
<li>SCP比较简单，是轻量级的，SFTP的功能则比较多</li>
<li>SCP的速度较快</li>
<li>SFTP在文件传输过程中中断的话，连接后还可以继续传输，但SCP不行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scp [-r] 用户名@ip:文件路径 本地路径</div><div class="line"># 网络复制命令, 下载文件 或加-r 下载文件夹</div><div class="line"></div><div class="line">scp [-r] 本地文件 用户名@ip:上传路径</div><div class="line"># 网络复制命令, 上传文件 或加-r 上传文件夹</div><div class="line"># 此为linux 与 linux之间进行文件传输的最简单方式</div></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="https://www.tecmint.com/sftp-command-examples/" target="_blank" rel="external">https://www.tecmint.com/sftp-command-examples/</a></li>
<li><a href="https://www.jscape.com/blog/scp-vs-sftp" target="_blank" rel="external">https://www.jscape.com/blog/scp-vs-sftp</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SFTP&quot;&gt;&lt;a href=&quot;#SFTP&quot; class=&quot;headerlink&quot; title=&quot;SFTP&quot;&gt;&lt;/a&gt;SFTP&lt;/h2&gt;&lt;p&gt;SFTP是安全文件传送协议，可以为传输文件提供一种安全的网络的加密方法。&lt;/p&gt;
&lt;p&gt;SFTP 与 FTP 有着几乎一样的
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>FTP主动模式和被动模式</title>
    <link href="http://yoursite.com/2018/05/17/FTP%E4%B8%BB%E5%8A%A8%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A2%AB%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/17/FTP主动模式和被动模式/</id>
    <published>2018-05-17T04:40:42.000Z</published>
    <updated>2018-05-17T07:25:52.565Z</updated>
    
    <content type="html"><![CDATA[<p>FTP只通过TCP连接,没有用于FTP的UDP组件.FTP不同于其他服务的是它使用了两个端口, 一个数据端口和一个命令端口(或称为控制端口)。通常21端口是命令端口，20端口是数据端口。根据FTP工作方式的不同，数据端口并不总是20，这就是主动与被动FTP的最大不同之处。（不管主动模式还是被动模式都是用TCP 21端口来传输控制信号的。）</p>
<h2 id="主动FTP-PORT-Active"><a href="#主动FTP-PORT-Active" class="headerlink" title="主动FTP(PORT/Active)"></a>主动FTP(PORT/Active)</h2><p>客户端从一个任意的非特权端口N（N&gt;1023）连接到FTP服务器的命令端口，也就是21端口。然后客户端开始监听端口N+1，并发送FTP命令“port N+1”到FTP服务器。接着服务器会从它自己的数据端口（20）连接到客户端指定的数据端口（N+1）。<br><img src="http://ow3dy62zt.bkt.clouddn.com/IMG43.jpg" alt=""></p>
<p>针对FTP服务器前面的防火墙来说，必须允许以下通讯才能支持主动方式FTP：</p>
<ol>
<li>任何大于1024的端口到FTP服务器的21端口。（客户端初始化的连接）</li>
<li>FTP服务器的21端口到大于1023的端口。 （服务器响应客户端的控制端口）</li>
<li>FTP服务器的20端口到大于1023的端口。（服务器端初始化数据连接到客户端的数据端口）</li>
<li>大于1023端口到FTP服务器的20端口（客户端发送ACK响应到服务器的数据端口）</li>
</ol>
<h2 id="被动FTP-PASV-Passive"><a href="#被动FTP-PASV-Passive" class="headerlink" title="被动FTP(PASV/Passive)"></a>被动FTP(PASV/Passive)</h2><p>为了解决服务器发起到客户的连接的问题，人们开发了一种不同的FTP连接方式。这就是所谓的被动方式，当客户端通知服务器它处于被动模式时才启用。</p>
<p>在被动方式FTP中，命令连接和数据连接都由客户端发起，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题。</p>
<p>当开启一个 FTP连接时，客户端打开两个任意的非特权本地端口（N &gt; 1024和N+1）。第一个端口连接服务器的21端口，但与主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口，而是提交 PASV命令。这样做的结果是服务器会开启一个任意的非特权端口（P &gt; 1024），并发送PORT P命令给客户端。然后客户端发起从本地端口N+1到服务器的端口P的连接用来传送数据。</p>
<p><img src="http://ow3dy62zt.bkt.clouddn.com/IMG44.jpg" alt=""></p>
<p>对于服务器端的防火墙来说，必须允许下面的通讯才能支持被动方式的FTP:</p>
<ol>
<li>从任何大于1023的端口到服务器的21端口 （客户端初始化的连接）</li>
<li>服务器的21端口到任何大于1023的端口 （服务器响应到客户端的控制端口的连接）</li>
<li>从任何大于1023端口到服务器的大于1023端口 （客户端初始化数据连接到服务器指定的任意端口）</li>
<li>服务器的大于1023端口到远程的大于1023的端口（服务器发送ACK响应和数据到客户端的数据端口）</li>
</ol>
<h2 id="主动与被动FTP优缺点："><a href="#主动与被动FTP优缺点：" class="headerlink" title="主动与被动FTP优缺点："></a>主动与被动FTP优缺点：</h2><p>主动FTP对FTP服务器的管理有利，但对客户端的管理不利。因为FTP服务器企图与客户端的高位随机端口建立连接，而这个端口很有可能被客户端的防火墙阻塞掉。被动FTP对FTP客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立两个连接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。</p>
<p>幸运的是，有折衷的办法。既然FTP服务器的管理员需要他们的服务器有最多的客户连接，那么必须得支持被动FTP。我们可以通过为FTP服务器指定一个有限的端口范围来减小服务器高位端口的暴露。这样，不在这个范围的任何端口会被服务器的防火墙阻塞。虽然这没有消除所有针对服务器的危险，但它大大减少了危险。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主动FTP：<br>　　命令连接：客户端 &gt;1023端口 -&gt; 服务器 21端口<br>　　数据连接：客户端 &gt;1023端口 &lt;- 服务器 20端口 </p>
<p>被动FTP：<br>　　命令连接：客户端 &gt;1023端口 -&gt; 服务器 21端口<br>　　数据连接：客户端 &gt;1023端口 -&gt; 服务器 &gt;1023端口</p>
<p>主动模式是从服务器端向客户端发起连接；被动模式是客户端向服务器端发起连接。两者的共同点是都使用 21端口进行用户验证及管理，差别在于传送数据的方式不同，PORT模式的FTP服务器数据端口固定在20，而PASV模式则在1024-65535之间随机</p>
<p>PORT（主动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条命令链路。当需要传送数据时，客户端在命令链路上用PORT命令告诉服务器：“我打开了XXXX端口，你过来连接我”。于是服务器从20端口向客户端的XXXX端口发送连接请求，建立一条数据链路来传送数据。</p>
<p>PASV（被动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条命令链路。当需要传送数据时，服务器在命令链路上用PASV命令告诉客户端：“我打开了XXXX端口，你过来连接我”。于是客户端向服务器的XXXX端口发送连接请求，建立一条数据链路来传送数据。</p>
<p>当NAT(Network Address Translation)设备以主动模式访问FTP服务器时，由于NAT设备不会聪明的变更FTP包中的IP地址，从而导致无法访问服务器。</p>
<p>大部分互联网应用都是被动模式，因为大部分客户端都是在路由器后面，没有独立的公网IP地址，服务器想要主动连接客户端，难度太大，在现在真实的互联网环境里面几乎是不可能完成的任务。</p>
<p>大部分FTP客户端默认使用PASV方式，在大部分FTP客户端的设置里，常见到的字眼都是“PASV”或“被动模式”。</p>
<h2 id="vsftpd配置"><a href="#vsftpd配置" class="headerlink" title="vsftpd配置"></a>vsftpd配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># vi /etc/vsftpd/vsftpd.conf</div><div class="line">pasv_enable=YES</div><div class="line">pasv_min_port=3000</div><div class="line">pasv_max_port=4000</div></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="https://www.centos.bz/2012/08/ftp-port-pasv-mode/" target="_blank" rel="external">https://www.centos.bz/2012/08/ftp-port-pasv-mode/</a></li>
<li><a href="http://www.serv-u.com/kb/1138/Active-and-Passive-FTP-Transfers-Defined" target="_blank" rel="external">http://www.serv-u.com/kb/1138/Active-and-Passive-FTP-Transfers-Defined</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5cdb72780100jwm9.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_5cdb72780100jwm9.html</a></li>
<li><a href="http://www.rfyy.net/archives/2641.html" target="_blank" rel="external">http://www.rfyy.net/archives/2641.html</a></li>
<li><a href="https://my.oschina.net/binny/blog/17469" target="_blank" rel="external">https://my.oschina.net/binny/blog/17469</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36403412" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/36403412</a></li>
<li><a href="http://www.cnblogs.com/xiaohh/p/4789813.html" target="_blank" rel="external">http://www.cnblogs.com/xiaohh/p/4789813.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FTP只通过TCP连接,没有用于FTP的UDP组件.FTP不同于其他服务的是它使用了两个端口, 一个数据端口和一个命令端口(或称为控制端口)。通常21端口是命令端口，20端口是数据端口。根据FTP工作方式的不同，数据端口并不总是20，这就是主动与被动FTP的最大不同之处。（
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux查看用户登录时间及历史命令</title>
    <link href="http://yoursite.com/2018/05/16/linux%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%97%B6%E9%97%B4%E5%8F%8A%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/16/linux查看用户登录时间及历史命令/</id>
    <published>2018-05-16T12:34:14.000Z</published>
    <updated>2018-05-16T13:13:22.917Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">who</div><div class="line">#查看当前登录用户信息：用户名、终端类型、登陆日期以及远程主机</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">users</div><div class="line">#当前登录的用户</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">history</div><div class="line">#查看命令历史</div><div class="line">$HOME/.bash_history：每个用户都有一份命令历史记录</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">last</div><div class="line">#查看用户登录历史</div><div class="line">#此命令会读取 /var/log/wtmp 文件，/var/log/btmp可以显示远程登陆信息。 </div><div class="line">#last默认打印所有用户的登陆信息</div><div class="line">last 用户名</div><div class="line">#打印某个用户的登陆信息</div><div class="line">选项： </div><div class="line">-x：显示系统开关机以及执行等级信息 </div><div class="line">-a：将登陆ip显示在最后一行 </div><div class="line">-f ：读取特定文件，可以选择 -f /var/log/btmp文件 </div><div class="line">-d：将IP地址转换为主机名 </div><div class="line">-n：设置列出名单的显示列数 </div><div class="line">-t：查看指定时间的用户登录历史 </div><div class="line">例如： </div><div class="line">last -t 20150226160404 </div><div class="line">显示这个时间戳之前的登陆历史</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">lastlog</div><div class="line">#查看所有用户最近一次登录历史</div><div class="line">#命令将读取 /var/log/lastlog 文件，用户排列顺序按照 /etc/passwd 中的顺序</div><div class="line">选项： </div><div class="line">-u：查看某个用户的最后一次登陆历史 </div><div class="line">例如： lastlog -u test </div><div class="line">查看用户test的登陆历史 </div><div class="line"></div><div class="line">-t：查看最近几天之内的用户登录历史 </div><div class="line">例如： lastlog -t 1 </div><div class="line">查看最近1天之内的登陆历史</div><div class="line"></div><div class="line">-b：查看指定天数之前的用户登录历史 </div><div class="line">例如： lastlog -b 60 </div><div class="line">查看60天之前的用户登录历史</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ac</div><div class="line">根据/var/log/wtmp文件中的登陆和退出时间报告用户连接的时间（小时），默认输出报告总时间 </div><div class="line">-p：显示每个用户的连接时间 </div><div class="line">-d：显示每天的连接时间 </div><div class="line">-y：显示年份，和-d配合使用</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
