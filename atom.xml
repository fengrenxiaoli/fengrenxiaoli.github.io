<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳落下</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-11T09:53:43.781Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018-06-11-VIM模版</title>
    <link href="http://yoursite.com/post/22b97e54.html"/>
    <id>http://yoursite.com/post/22b97e54.html</id>
    <published>2018-06-11T09:27:23.000Z</published>
    <updated>2018-06-11T09:53:43.781Z</updated>
    
    <content type="html"><![CDATA[<p>用Vim写Python的时候，每次都要在开头写路径和编码，索性直接用模版<br>直接使用插件方式配置模版</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>使用vim-plug配置，<code>vim .vimrc</code>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plug &apos;aperezdc/vim-template&apos;</div></pre></td></tr></table></figure></p>
<p>保存，重新打开<code>.vimrc</code>，进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:PlugInstall</div></pre></td></tr></table></figure></p>
<h2 id="配置模版"><a href="#配置模版" class="headerlink" title="配置模版"></a>配置模版</h2><p>模版文件在<code>.vim/plugged/vim-template/templates</code>下</p>
<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/996afb9e4086" target="_blank" rel="external">https://www.jianshu.com/p/996afb9e4086</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Vim写Python的时候，每次都要在开头写路径和编码，索性直接用模版&lt;br&gt;直接使用插件方式配置模版&lt;/p&gt;
&lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h2&gt;&lt;p&gt;使用
    
    </summary>
    
    
      <category term="VIM" scheme="http://yoursite.com/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>使用Pygame制作飞机大战</title>
    <link href="http://yoursite.com/post/7e3c85d2.html"/>
    <id>http://yoursite.com/post/7e3c85d2.html</id>
    <published>2018-06-11T08:09:50.000Z</published>
    <updated>2018-06-12T08:55:22.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Pygame"><a href="#安装Pygame" class="headerlink" title="安装Pygame"></a>安装Pygame</h2><p>Use python 3.6.1 or greater<br><a href="https://www.pygame.org/wiki/GettingStarted" target="_blank" rel="external">https://www.pygame.org/wiki/GettingStarted</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install pygame</div><div class="line"></div><div class="line">#检验是否安装成功</div><div class="line">python3 -m pygame.examples.aliens</div></pre></td></tr></table></figure></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>把一些静止的图像绘制到流红窗口中</li>
<li>根据用户的交互或其他情况，移动这些图像，产生动画效果</li>
<li>根据图像之间是否发生重叠，判断敌机是否被摧毁等其他情况</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Pygame&quot;&gt;&lt;a href=&quot;#安装Pygame&quot; class=&quot;headerlink&quot; title=&quot;安装Pygame&quot;&gt;&lt;/a&gt;安装Pygame&lt;/h2&gt;&lt;p&gt;Use python 3.6.1 or greater&lt;br&gt;&lt;a href=&quot;https:
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>简明Python教程-读书笔记</title>
    <link href="http://yoursite.com/post/d1f541ed.html"/>
    <id>http://yoursite.com/post/d1f541ed.html</id>
    <published>2018-06-11T05:09:45.000Z</published>
    <updated>2018-06-11T08:05:54.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《简明Python教程》读书笔记"><a href="#《简明Python教程》读书笔记" class="headerlink" title="《简明Python教程》读书笔记"></a>《简明Python教程》读书笔记</h1><blockquote>
<p>使用《简明Python教程》漠伦翻译版<br><a href="https://bop.mol.uno/" target="_blank" rel="external">https://bop.mol.uno/</a><br>使用Python3.5.1</p>
</blockquote>
<h2 id="关于Python"><a href="#关于Python" class="headerlink" title="关于Python"></a>关于Python</h2><p>简单、易于学习、自由且开放（FLOSS）、高级语言、跨平台性、解释性、面向对象、可扩展性、可嵌入性、丰富的库</p>
<p>在程序内部，Python会将源代码转换为称为字节码的中间形式，尔后再转换成你的电脑所使用的语，并运行它</p>
<h2 id="安装…"><a href="#安装…" class="headerlink" title="安装…"></a>安装…</h2><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>通过Python<strong>运行程序有两种方法</strong></p>
<ol>
<li>使用交互式解释器提示符<code>&gt;&gt;&gt;</code></li>
<li>直接运行一个源代码<code>python test.py</code></li>
</ol>
<p>Python区分大小写</p>
<p><strong>获取帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">help(&apos;input&apos;)</div></pre></td></tr></table></figure></p>
<p>最好使用引号，不使用引号有时会出错，比如<code>help(return)</code><br>按<code>q</code>退出</p>
<a id="more"></a>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol>
<li>注释：使用<code>#</code></li>
<li>字面常量    </li>
<li>数字：整数<code>1</code>、浮点数<code>3.23``52.3E-4</code></li>
<li>字符串：字符串是不可变的<ul>
<li>单引号：所有引号中的空格、制表符保留原样（不是转义<code>\t</code>）</li>
<li>双引号：和单引号括起的字符串一样</li>
<li>三引号：”””或’’’，多行字符串</li>
</ul>
</li>
<li>Python从0开始计数</li>
</ol>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>字符串格式化</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">age = 20</div><div class="line">name = &apos;Swaroop&apos;</div><div class="line">print(&apos;&#123;0&#125; was &#123;1&#125; years old when he wrote this book&apos;.format(name,age))</div></pre></td></tr></table></figure></p>
<p>不需要转换格式，数字可以不写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#对于浮点数&apos;0.333&apos;保留小数点(.)后三位</div><div class="line">print(&apos;&#123;0:.3f&#125;&apos;.format(1.0/3))</div><div class="line">#使用下划线填充文本,并保持文字处于中间位置</div><div class="line">#使用(^)定义&apos;___hello___&apos;字符串长度为11</div><div class="line">print(&apos;&#123;0:_^11&#125;&apos;.format(&apos;hello&apos;))</div><div class="line">#基于关键词输出&apos;Swaroop wrote A Byte of Python&apos;，不能用&#123;0&#125;</div><div class="line">print(&apos;&#123;name&#125; wrote &#123;book&#125;&apos;.format(name=&apos;Swaroop&apos;,book=&apos;A Byte of Python&apos;))</div></pre></td></tr></table></figure>
<p><code>print</code>会以<code>\n</code>结尾，通过<code>end</code>可以指定结尾方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(&apos;a&apos;,end=&apos;&apos;)</div><div class="line">print(&apos;b&apos;,end=&apos; &apos;)</div></pre></td></tr></table></figure></p>
<p><code>print()</code>用<code>,</code>连接字符串，且会自动加上空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(&apos;a&apos;,&apos;b&apos;)</div></pre></td></tr></table></figure></p>
<p><strong>字符串连接</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name + &apos;is&apos; + str(age) + &apos;years old&apos;</div></pre></td></tr></table></figure></p>
<p>不如格式化美观，容易出错，而且需要转换类型</p>
<p><strong>转义字符</strong></p>
<ol>
<li><code>\&#39;</code>：单引号</li>
<li><code>\n</code>：换行</li>
<li><code>\t</code>：制表符</li>
<li>在一个字符串中，一个放置在末尾的反斜杠表示字符串将在下一行继续，但不会换行</li>
</ol>
<p><strong>原始字符串</strong><br><code>r</code>或<code>R</code>，在处理正则表达式时应全程使用原始字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r&apos;Newlines are indicated by \n&apos;</div></pre></td></tr></table></figure></p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>命名</strong></p>
<ol>
<li>第一个字符必须是字母表中的字母(大写ASCII字符或小写ASCII字符或Unicode字符)或下划线(<code>_</code>)。</li>
<li>标识符的其它部分可以由字符(大写 ASCII 字符或小写 ASCII 字符或 Unicode字符)、下划线(<code>_</code>)、数字(0~9)组成。</li>
<li>标识符名称区分大小写</li>
</ol>
<p>Python将程序中的任何内容统称为对象，包括数字、字符串与函数</p>
<h3 id="逻辑行与物理行"><a href="#逻辑行与物理行" class="headerlink" title="逻辑行与物理行"></a>逻辑行与物理行</h3><p>物理行(Physical    Line)是你在编写程序时你所看到的内容<br>逻辑行(Logical Line)是Python所看到的单个语句</p>
<p><strong>显式行连接</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s=&apos;This is a string \</div><div class="line">This continues the string.&apos;</div><div class="line">print(s)</div><div class="line"></div><div class="line">This is a string This continues the string.</div></pre></td></tr></table></figure></p>
<p><strong>隐式行连接</strong><br>逻辑行以括号开始，它可以是方括号或花括号，但不能是右括号<br>可以不使用<code>\</code></p>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>在逻辑行的开头留下空白区(使用空格或制表符)用以确定各逻辑行的缩进级别<br>放置在一起的语句必须拥有相同的缩进，每一组这样的语句被称为块(block)</p>
<h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><code>+</code> 、<code>-</code> 、<code>*</code> 、<code>/</code> 、<code>**</code>(乘方)、<code>//</code>(整除)、<code>%</code> (取余)</li>
<li><code>&lt;&lt;</code>(二进制左移) 、<code>&gt;&gt;</code> (二进制右移)</li>
<li><code>&amp;</code>(按位与) 、<code>|</code>(按位或) 、<code>^</code> (按位异或)、<code>~</code>(按位取反，x的按位取反结果为-(x+1))<ul>
<li>转换为二进制</li>
</ul>
</li>
<li><code>&lt;</code> 、<code>&gt;</code> 、<code>&lt;=</code> 、<code>&gt;=</code> 、<code>==</code> 、<code>!=</code><ul>
<li>所有的比较运算符返回的结果均为<code>True</code>或<code>False</code>。请注意这些名称之中的大写字母</li>
</ul>
</li>
<li><code>not</code> 、<code>and</code> 、<code>or</code><ul>
<li>短路计算</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-13 // 3	 	输出-5</div></pre></td></tr></table></figure>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>从最低优先级到最高优先级，同一行的运算符具有相同优先级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">lambda	    Lambda表达式</div><div class="line">if-else	    条件表达式</div><div class="line">or	        布尔“或”</div><div class="line">and	        布尔“与”</div><div class="line">not x	    布尔“非”</div><div class="line">in,	not in, is,	is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==	        </div><div class="line">            比较，包括成员资格测试和身份测试</div><div class="line">|	        按位或</div><div class="line">^	        按位异或</div><div class="line">&amp;	        按位与</div><div class="line">&lt;&lt;, &gt;&gt;	    移动</div><div class="line">+, -	    加与减</div><div class="line">*, /, //, %	        乘、除、整除、取余</div><div class="line">+x, -x, ~x	        正、负、按位取反</div><div class="line">**	        求幂</div><div class="line">x[index], x[index:index], x(arguments...), x.attribute  </div><div class="line">            下标、切片、调用、属性引用</div><div class="line">(expressions...), [expressions...], &#123;key:value...&#125;, &#123;expressions...&#125;    </div><div class="line">            元组、列表、字典、集合</div></pre></td></tr></table></figure></p>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p><strong>if语句</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"></div><div class="line">number=23</div><div class="line">guess=int(input(&apos;Enter an interger:&apos;))</div><div class="line"></div><div class="line">if guess==number:</div><div class="line">    print(&apos;Congratulations,you guessed it&apos;)</div><div class="line">    print(&apos;(but you do not win any prizes!)&apos;)</div><div class="line">elif guess&lt;number:</div><div class="line">    print(&apos;No,it is a little higher than that&apos;)</div><div class="line">else:</div><div class="line">    print(&apos;No,it is a little lower than that&apos;)</div><div class="line"></div><div class="line">print(&apos;Done&apos;)</div></pre></td></tr></table></figure></p>
<p><strong>while语句</strong><br>else语句在循环结束后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"></div><div class="line">number=23</div><div class="line">running=True</div><div class="line"></div><div class="line">while running:</div><div class="line">    guess=int(input(&apos;Enter an integer:&apos;))</div><div class="line"></div><div class="line">    if guess==number:</div><div class="line">        print(&apos;Congratulations,you guessed it&apos;)</div><div class="line">        running=False</div><div class="line">    elif guess&lt;number:</div><div class="line">        print(&apos;No,it is a little higher than that.&apos;)</div><div class="line">    else:</div><div class="line">        print(&apos;No,it is a little lower than that.&apos;)</div><div class="line">else:</div><div class="line">    print(&apos;The while loop is over.&apos;)</div><div class="line"></div><div class="line">print(&apos;Done&apos;)</div></pre></td></tr></table></figure></p>
<p><strong>for语句</strong><br><code>rang()</code>将会返回一个数字序列,从第一个数字开始,至第二个数字结束。<br><code>range(1,5)</code>将输出序列<code>[1,2,3,4]</code><br><code>range(1,5,2)</code>将会输出<code>[1,3]</code><br>不会包括第二个数字在内<br><code>range()</code>每次只会生成一个数字，<code>list(range(5))</code>返回完整的数字列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"></div><div class="line">for i in range(1,5):</div><div class="line">    print(i)</div><div class="line">else:</div><div class="line">    print(&apos;The loop is over&apos;)</div></pre></td></tr></table></figure>
<p>else语句在循环结束后执行</p>
<p><strong>break语句</strong><br>如果中断了一个for或while循环，任何相应循环中的else块都将不会被执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"></div><div class="line">while True:</div><div class="line">    s=input(&apos;Enter something:&apos;)</div><div class="line">    if s==&apos;quit&apos;:</div><div class="line">        break</div><div class="line">    print(&apos;Length of the string is&apos;,len(s))</div><div class="line">print(&apos;Done&apos;)</div></pre></td></tr></table></figure>
<p><strong>continue语句</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"></div><div class="line">while True:</div><div class="line">    s=input(&apos;Enter something&apos;)</div><div class="line">    if s==&apos;quit&apos;:</div><div class="line">        break</div><div class="line">    if len(s)&lt;3:</div><div class="line">        print(&apos;Too small&apos;)</div><div class="line">        continue</div><div class="line">    print(&apos;Length of the string is&apos;,len(s))</div><div class="line"></div><div class="line">print(&apos;Done&apos;)</div></pre></td></tr></table></figure></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def say_hello():</div><div class="line">    print(&apos;hello wolrd&apos;)</div><div class="line"></div><div class="line">say_hello()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def print_max(a,b):</div><div class="line">    if a&gt;=b:</div><div class="line">        print(a)</div><div class="line">    else:</div><div class="line">        print(b)</div><div class="line"></div><div class="line">print_max(3,4)</div><div class="line"></div><div class="line">x=8</div><div class="line">y=10</div><div class="line">print_max(x,y)</div></pre></td></tr></table></figure>
<p>在定义函数时给定的名称称作“形参”(Parameters)<br>在调用函数时你所提供给函数的值称作“实参”(Arguments)</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>所有变量的作用域是它们被定义的块，从定义它们的名字的定义点开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">x=50</div><div class="line">def func(x):</div><div class="line">    print(&apos;x is&apos;,x)</div><div class="line">    x=2</div><div class="line">    print(&apos;x is&apos;,x)</div><div class="line"></div><div class="line">func(x)</div><div class="line">print(&apos;x is still&apos;,x)</div></pre></td></tr></table></figure></p>
<p>结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x is 50</div><div class="line">x is 2</div><div class="line">x is still 50</div></pre></td></tr></table></figure></p>
<p>当你在一个函数的定义中声明变量时，它们不会以任何方式与身处函数之外但具有相同名称的变量产生关系</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x=50</div><div class="line">def func():</div><div class="line">    global x</div><div class="line">    print(&apos;x is&apos;,x)</div><div class="line">    x=2</div><div class="line">    print(&apos;x is&apos;,x)</div><div class="line"></div><div class="line">func()</div><div class="line">print(&apos;x is&apos;,x)</div></pre></td></tr></table></figure>
<p>结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x is 50</div><div class="line">x is 2</div><div class="line">x is 2</div></pre></td></tr></table></figure></p>
<h3 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h3><p>默认参数值应该是常数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def say(message,times=1):</div><div class="line">    print(message*times)</div><div class="line"></div><div class="line">say(&apos;Hello&apos;)</div><div class="line">say(&apos;Hello&apos;,2)</div></pre></td></tr></table></figure></p>
<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def func(a,b=5,c=10):</div><div class="line">    print(&apos;a is &#123;&#125;,and b is &#123;&#125; and c is &#123;&#125;&apos;.format(a,b,c))</div><div class="line"></div><div class="line">func(3,7)</div><div class="line">func(25,c=24)</div><div class="line">func(c=50,a=100)</div></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a is 3,and b is 7 and c is 10</div><div class="line">a is 25,and b is 5 and c is 24</div><div class="line">a is 100,and b is 5 and c is 50</div></pre></td></tr></table></figure></p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>当我们声明一个诸如<code>*param</code>的星号参数时，从此处开始直到结束的所有位置参数都将被收集并汇集成一个称为“param”的元组(Tuple)<br>类似地，当我们声明一个诸如<code>**param</code>的双星号参数时，从此处开始直至结束的所有关键字参数都将被收集并汇集成一个名为<code>param</code>的字典(Dictionary)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def total(a=5,*numbers,**phonebook):</div><div class="line">    print(&apos;a&apos;,a)</div><div class="line"></div><div class="line">    #遍历元组中的所有项目</div><div class="line">    for single_item in numbers:</div><div class="line">        print(&apos;single_item&apos;,single_item)</div><div class="line"></div><div class="line">    #遍历字典中的所有项目</div><div class="line">    for first_part,second_part in phonebook.items():</div><div class="line">        print(first_part,second_part)</div><div class="line"></div><div class="line">print(total(10,1,2,3,jack=1123,John=2231,Inge=1560))</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a 10</div><div class="line">single_item 1</div><div class="line">single_item 2</div><div class="line">single_item 3</div><div class="line">jack 1123</div><div class="line">John 2231</div><div class="line">Inge 1560</div><div class="line">None</div></pre></td></tr></table></figure></p>
<h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p>从函数中返回，中断函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def maximum(x,y):</div><div class="line">    if x&gt;y:</div><div class="line">        return x</div><div class="line">    elif x&lt;y:</div><div class="line">        return y</div><div class="line">    else:</div><div class="line">        return &apos;The numbers are equal&apos;</div></pre></td></tr></table></figure></p>
<h3 id="DocStrings-文档字符串"><a href="#DocStrings-文档字符串" class="headerlink" title="DocStrings 文档字符串"></a>DocStrings 文档字符串</h3><p><strong>文档字符串约定的格式</strong>：<br>一串多行字符串，其中第一行以某一大写字母开始，以句号结束。第二行为空行，后跟的第三行开始是任何详细的解释说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def print_max(x,y):</div><div class="line">    &apos;&apos;&apos;打印两个数值中的最大数。</div><div class="line"></div><div class="line">    这两个数都应该是整数</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    x=int(x)</div><div class="line">    y=int(y)</div><div class="line"></div><div class="line">    if x&gt;y:</div><div class="line">        print(x,&apos;is maximum&apos;)</div><div class="line">    else:</div><div class="line">        print(y,&apos;is maximum&apos;)</div><div class="line"></div><div class="line">print_max(3,5)</div><div class="line">print(print_max.__doc__)</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">5 is maximum</div><div class="line">打印两个数值中的最大数。</div><div class="line"></div><div class="line">    这两个数都应该是整数</div></pre></td></tr></table></figure></p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块用于在别的程序中重用函数</p>
<p>编写模块的方法</p>
<ol>
<li>创建一个包含函数与变量，以.py为后缀的文件</li>
<li>使用撰写Python解释器本身的语言来编写模块（C、Java）</li>
</ol>
<p>模块分为内置模块（如sys）和自行编写的模块，Python解释器从<code>sys.path</code>所提供的路径中搜索自行编写的模块，所以必须将模块在<code>sys.path</code>内所列出的目录中，比如当前目录</p>
<p>标准库模块，sys模块包含了与Python解释器及其环境相关的功能，也就是所谓的系统功能<br>运行的脚本名称在<code>sys.argv</code>的列表中是第一个，即<code>sys.argv[0]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line"></div><div class="line">print(&apos;The command line arguments are:&apos;)</div><div class="line">for i in sys.argv:</div><div class="line">    print(i)</div><div class="line"></div><div class="line">print(&apos;\n\nThe PYTHONPATH is&apos;,sys.path,&apos;\n&apos;)</div></pre></td></tr></table></figure></p>
<p>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python module_using_sys.py we are arguments</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">The command line arguments are:</div><div class="line">module_using_sys.py</div><div class="line">we</div><div class="line">are</div><div class="line">arguments</div><div class="line"></div><div class="line"></div><div class="line">The PYTHONPATH is [&apos;/home/lee/Documents/pyte&apos;, &apos;/home/lee/Documents/pyte/pyte/lib/python36.zip&apos;, &apos;/home/lee/Documents/pyte/pyte/lib/python3.6&apos;, &apos;/home/lee/Documents/pyte/pyte/lib/python3.6/lib-dynload&apos;, &apos;/home/lee/anaconda3/lib/python3.6&apos;, &apos;/home/lee/Documents/pyte/pyte/lib/python3.6/site-packages&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="pyc文件"><a href="#pyc文件" class="headerlink" title=".pyc文件"></a>.pyc文件</h3><p>将Python模块转换成中间形式的文件，以提高效率<br>按字节码编译的(Byte-Compiled)文件，这一文件以.pyc为其扩展名<br>通常会创建在与对应的<code>.py</code>文件所处的目录中</p>
<h3 id="from…import语句"><a href="#from…import语句" class="headerlink" title="from…import语句"></a>from…import语句</h3><p>直接将需要的变量导入程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from sys import argv</div></pre></td></tr></table></figure></p>
<p>尽量避免使用from…import语句，而去使用import语句<br>避免在你的程序中出现名称冲突</p>
<h3 id="模块的name"><a href="#模块的name" class="headerlink" title="模块的name"></a>模块的<strong>name</strong></h3><p>每个模块都有一个名称,而模块中的语句可以找到它们所处的模块的名称。<br>可以用于确定模块是独立运行的还是被导入进来运行<br>每一个Python模块都定义了它的<code>__name__</code>属性。如果它与<code>__main__</code>属性相同则代表这一模块是由用户独立运行的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    print(&apos;This program is being run by itself&apos;)</div><div class="line">else:</div><div class="line">    print(&apos;I am being imported from another module&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">python module_using_name.py</div><div class="line">This program is being run by itself</div><div class="line"></div><div class="line">python</div><div class="line">&gt;&gt;&gt; import module_using_name</div><div class="line">I am being imported from another module</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="编写自己的模块"><a href="#编写自己的模块" class="headerlink" title="编写自己的模块"></a>编写自己的模块</h3><p>要将模块放在<code>sys.path</code>列出的目录下，或者与其它我们即将导入这一模块的程序相同的目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;mymodule.py&apos;&apos;&apos;</div><div class="line">def say_hi():</div><div class="line">    print(&apos;Hi,this is mymodule speaking.&apos;)</div><div class="line"></div><div class="line">__version__=&apos;0.1&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;mymodule_demo.py&apos;&apos;&apos;</div><div class="line">import mymodule</div><div class="line"></div><div class="line">mymodule.say_hi()</div><div class="line">print(&apos;Version&apos;,mymodule.__version__)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;mymodule_demo2.py&apos;&apos;&apos;</div><div class="line">from mymodule import say_hi,__version__</div><div class="line"></div><div class="line">say_hi()</div><div class="line">print(&apos;Version&apos;,__version__)</div></pre></td></tr></table></figure>
<p>mymodule_demo2.py所输出的内容与mymodule_demo.py所输出的内容是一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi,this is mymodule speaking.</div><div class="line">Version 0.1</div></pre></td></tr></table></figure></p>
<h3 id="dir函数"><a href="#dir函数" class="headerlink" title="dir函数"></a>dir函数</h3><p>返回由对象所定义的名称列表<br>该函数接受参数。如果参数是模块名称，函数将返回这一指定模块的名称列表。如果没有提供参数,函数将返回当前模块的名称列表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#给出sys模块中的属性名称</div><div class="line">&gt;&gt;&gt;dir(sys)</div><div class="line">[&apos;__displayhook__&apos;, &apos;__doc__&apos;, &apos;__excepthook__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;,...</div><div class="line"></div><div class="line">#给出当前模块的属性名称</div><div class="line">&gt;&gt;&gt;dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;module_using_name&apos;, &apos;sys&apos;]</div><div class="line"></div><div class="line"></div><div class="line">&gt;&gt;&gt;a=5</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, ...</div></pre></td></tr></table></figure>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是指一个包含模块与一个特殊的<code>__init__.py</code>文件的文件夹，后者向Python表明这一文件夹是特别的,因为其包含了Python模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;some folder present in the sys.path&gt;/</div><div class="line">    -world/</div><div class="line">        -__init__.py</div><div class="line">        -asia/</div><div class="line">            -__init__.py</div><div class="line">            -india/</div><div class="line">                -__init__.py</div><div class="line">                -foo.py</div><div class="line">        -africa/</div><div class="line">            -__init__.py</div><div class="line">            -madagascar/</div><div class="line">                -__init__.py</div><div class="line">                -bar.py</div></pre></td></tr></table></figure></p>
<p>模块是一种可重用的程序。包是用以组织模块的一种层次结构</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h3><p>列表是可变的，有序的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">shoplist=[&apos;apple&apos;,&apos;mango&apos;,&apos;carrot&apos;,&apos;banana&apos;]</div><div class="line">len(shoplist)</div><div class="line"></div><div class="line">#遍历</div><div class="line">for item in shoplist:</div><div class="line">    print(item,end=&apos; &apos;)</div><div class="line"></div><div class="line">shoplist.append(&apos;rice&apos;)</div><div class="line"></div><div class="line">#排序改变本身</div><div class="line">shoplist.sort()</div><div class="line">print(&apos;Sorted shopping list is&apos;,shoplist)</div><div class="line"></div><div class="line">olditem=shoplist[0]</div><div class="line">del shoplist[0]</div></pre></td></tr></table></figure></p>
<h3 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h3><p>不可变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">()</div><div class="line">#空元组</div><div class="line"></div><div class="line">(1,)</div><div class="line">#只有一个元素的元组</div><div class="line"></div><div class="line">zoo=(&apos;python&apos;,&apos;elephent&apos;,&apos;penguin&apos;)</div><div class="line">len(zoo)</div><div class="line"></div><div class="line">new_zoo=&apos;monkey&apos;,&apos;camel&apos;,zoo   </div><div class="line">#(&apos;monkey&apos;, &apos;camel&apos;, (&apos;python&apos;, &apos;elephent&apos;, &apos;penguin&apos;))</div><div class="line"></div><div class="line">new_zoo[2]</div><div class="line">new_zoo[2][2]</div></pre></td></tr></table></figure></p>
<h3 id="字典Dict"><a href="#字典Dict" class="headerlink" title="字典Dict"></a>字典Dict</h3><p>无序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ab=&#123;</div><div class="line">    &apos;Swaroop&apos;:&apos;swaroop@swaroopch.com&apos;,</div><div class="line">    &apos;Larry&apos;:&apos;larry@wall.org&apos;,</div><div class="line">    &apos;Matsumoto&apos;:&apos;matz@ruby-lang.org&apos;,</div><div class="line">    &apos;Spammer&apos;:&apos;spammer@hotmail.com&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ab[&apos;Swaroop&apos;]</div><div class="line">del ab[&apos;Spammer&apos;]</div><div class="line"></div><div class="line">len(ab)</div><div class="line"></div><div class="line">for name,address in ab.items():</div><div class="line">    print(&apos;Contact &#123;&#125; at &#123;&#125;&apos;.format(name,address))</div><div class="line"></div><div class="line">ab[&apos;Guido&apos;]=&apos;guido@python.org&apos;</div><div class="line"></div><div class="line">if &apos;Guido&apos; in ab:</div><div class="line">    print(&quot;\nGuido&apos;s address is&quot;,ab[&apos;Guido&apos;])</div></pre></td></tr></table></figure>
<h3 id="序列Sequence"><a href="#序列Sequence" class="headerlink" title="序列Sequence"></a>序列Sequence</h3><p>序列的三种形态——列表、元组与字符串<br>资格测试（in、not in）、索引操作、切片<br>切片操作不包含结束位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">shoplist=[&apos;apple&apos;,&apos;mango&apos;,&apos;caroot&apos;,&apos;banana&apos;]</div><div class="line">name=&apos;swaroop&apos;</div><div class="line"></div><div class="line">shoplist[0]         #apple</div><div class="line">shoplist[1]         #mango</div><div class="line">shoplist[2]         #caroot</div><div class="line">shoplist[3]         #banana</div><div class="line">shoplist[-1]        #banana</div><div class="line">shoplist[-2]        #caroot</div><div class="line">shoplist[1:3]       #[&apos;mango&apos;, &apos;caroot&apos;]</div><div class="line">shoplist[2:]        #[&apos;caroot&apos;, &apos;banana&apos;]</div><div class="line">shoplist[1:-1]      #[&apos;mango&apos;, &apos;caroot&apos;]</div><div class="line">shoplist[:]         #[&apos;apple&apos;, &apos;mango&apos;, &apos;caroot&apos;, &apos;banana&apos;]</div><div class="line"></div><div class="line">shoplist[::1]</div><div class="line"># [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</div><div class="line">shoplist[::2]</div><div class="line"># [&apos;apple&apos;, &apos;carrot&apos;]</div><div class="line">shoplist[::3]</div><div class="line"># [&apos;apple&apos;, &apos;banana&apos;]</div><div class="line">shoplist[::-1]</div><div class="line"># [&apos;banana&apos;, &apos;carrot&apos;, &apos;mango&apos;, &apos;apple&apos;]</div><div class="line"></div><div class="line"></div><div class="line">name[0]             #s</div><div class="line">name[1:3]           #wa</div><div class="line">name[2:]            #aroop</div><div class="line">name[1:-1]          #waroo</div><div class="line">name[:]             #swaroop</div></pre></td></tr></table></figure></p>
<h3 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h3><p>无序，不重复</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; bri=set([&apos;brazil&apos;,&apos;russia&apos;,&apos;india&apos;])</div><div class="line">&gt;&gt;&gt; &apos;india&apos; in bri</div><div class="line">True</div><div class="line">&gt;&gt;&gt; &apos;usa&apos; in bri</div><div class="line">False</div><div class="line">&gt;&gt;&gt; bric=bri.copy()         #不是同一个</div><div class="line">&gt;&gt;&gt; bric.add(&apos;china&apos;)</div><div class="line">&gt;&gt;&gt; bric.issuperset(bri)</div><div class="line">True</div><div class="line">&gt;&gt;&gt; bric</div><div class="line">&#123;&apos;india&apos;, &apos;china&apos;, &apos;russia&apos;, &apos;brazil&apos;&#125;</div><div class="line">&gt;&gt;&gt; bri</div><div class="line">&#123;&apos;india&apos;, &apos;russia&apos;, &apos;brazil&apos;&#125;</div><div class="line">&gt;&gt;&gt; bri.remove(&apos;russia&apos;)</div><div class="line">&gt;&gt;&gt; bri &amp; bric</div><div class="line">&#123;&apos;india&apos;, &apos;brazil&apos;&#125;</div></pre></td></tr></table></figure>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">shoplist=[&apos;apple&apos;,&apos;mango&apos;,&apos;carrot&apos;,&apos;banana&apos;]</div><div class="line">#两个变量指向同一个列表</div><div class="line">mylist=shoplist</div><div class="line">del shoplist[0]</div><div class="line">print(&apos;shoplist is&apos;,shoplist)</div><div class="line">print(&apos;mylist is&apos;,mylist)</div><div class="line"></div><div class="line">#两个变量指向不同的列表</div><div class="line">mylist=shoplist[:]</div><div class="line">del mylist[0]</div><div class="line">print(&apos;shoplist is&apos;,shoplist)</div><div class="line">print(&apos;mylist is&apos;,mylist)</div></pre></td></tr></table></figure>
<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">name = &apos;Swaroop&apos;</div><div class="line">name.startswith(&apos;Swa&apos;)</div><div class="line">&apos;a&apos; in name</div><div class="line">name.find(&apos;war&apos;) != -1</div><div class="line"></div><div class="line">delimiter = &apos;_*_&apos;</div><div class="line">mylist = [&apos;Brazil&apos;, &apos;Russia&apos;, &apos;India&apos;, &apos;China&apos;]</div><div class="line">print(delimiter.join(mylist))</div><div class="line"># Brazil_*_Russia_*_India_*_China</div></pre></td></tr></table></figure>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>单独开一章</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>类与对象是面向对象编程的两个主要方面。一个类（Class）能够创建一种新的类型（Type），其中对象（Object）就是类的实例（Instance）</p>
<p>字段（Field）<br>方法（Method）<br>字段与方法通称类的属性（Attribute）<br>实例变量（Instance Variables）<br>类变量（Class Variables）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Person:</div><div class="line">    def say_hi(self):</div><div class="line">        print(&apos;Hello, how are you?&apos;)</div><div class="line"></div><div class="line">p = Person()</div><div class="line">p.say_hi()</div></pre></td></tr></table></figure>
<h3 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a><strong>init</strong>方法</h3><p><code>__init__</code>方法会在类的对象被实例化（Instantiated）时立即运行，用于初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Person:</div><div class="line">    def __init__(self, name):</div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    def say_hi(self):</div><div class="line">        print(&apos;Hello, my name is&apos;, self.name)</div><div class="line"></div><div class="line">p = Person(&apos;Swaroop&apos;)</div><div class="line">p.say_hi()</div></pre></td></tr></table></figure></p>
<h3 id="类变量和对象变量"><a href="#类变量和对象变量" class="headerlink" title="类变量和对象变量"></a>类变量和对象变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">class Robot:</div><div class="line">    &quot;&quot;&quot;表示有一个带有名字的机器人。&quot;&quot;&quot;</div><div class="line"></div><div class="line">    # 一个类变量，用来计数机器人的数量</div><div class="line">    population = 0</div><div class="line"></div><div class="line">    def __init__(self, name):</div><div class="line">        &quot;&quot;&quot;初始化数据&quot;&quot;&quot;</div><div class="line">        self.name = name</div><div class="line">        print(&quot;(Initializing &#123;&#125;)&quot;.format(self.name))</div><div class="line"></div><div class="line">        # 当有人被创建时，机器人</div><div class="line">        # 将会增加人口数量</div><div class="line">        Robot.population += 1</div><div class="line"></div><div class="line">    def die(self):</div><div class="line">        &quot;&quot;&quot;我挂了。&quot;&quot;&quot;</div><div class="line">        print(&quot;&#123;&#125; is being destroyed!&quot;.format(self.name))</div><div class="line"></div><div class="line">        Robot.population -= 1</div><div class="line"></div><div class="line">        if Robot.population == 0:</div><div class="line">            print(&quot;&#123;&#125; was the last one.&quot;.format(self.name))</div><div class="line">        else:</div><div class="line">            print(&quot;There are still &#123;:d&#125; robots working.&quot;.format(</div><div class="line">                Robot.population))</div><div class="line"></div><div class="line">    def say_hi(self):</div><div class="line">        &quot;&quot;&quot;来自机器人的诚挚问候</div><div class="line"></div><div class="line">        没问题，你做得到。&quot;&quot;&quot;</div><div class="line">        print(&quot;Greetings, my masters call me &#123;&#125;.&quot;.format(self.name))</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    def how_many(cls):</div><div class="line">        &quot;&quot;&quot;打印出当前的人口数量&quot;&quot;&quot;</div><div class="line">        print(&quot;We have &#123;:d&#125; robots.&quot;.format(cls.population))</div><div class="line"></div><div class="line">droid1 = Robot(&quot;R2-D2&quot;)</div><div class="line">droid1.say_hi()</div><div class="line">Robot.how_many()</div><div class="line"></div><div class="line">droid2 = Robot(&quot;C-3PO&quot;)</div><div class="line">droid2.say_hi()</div><div class="line">Robot.how_many()</div></pre></td></tr></table></figure>
<p><code>population</code>是类变量，<code>Robot.population</code>或<code>self.__class__.population</code>，共享数据<br><code>name</code>是对象变量，<code>self.name</code></p>
<p><code>how_many</code>是类方法</p>
<p><code>Robot.__doc__</code> 访问类的文档字符串<br><code>Robot.say_hi.__doc__</code>访问方法的文档字符串</p>
<p><code>__privatevar</code>私有变量</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class SchoolMember:</div><div class="line">    def __init__(self,name,age):</div><div class="line">        self.name=name</div><div class="line">        self.age=age</div><div class="line">        print(&apos;Initialized SchoolMember:&#123;&#125;&apos;.format(self.name))</div><div class="line"></div><div class="line">    def tell(self):</div><div class="line">        print(&apos;Name:&quot;&#123;&#125;&quot; Age:&quot;&#123;&#125;&quot;&apos;.format(self.name,self.age),end=&quot; &quot;)</div><div class="line"></div><div class="line">class Teacher(SchoolMember):</div><div class="line">    def __init__(self,name,age,salary):</div><div class="line">        SchoolMember.__init__(self,name,age)</div><div class="line">        self.salary=salary</div><div class="line">        print(&apos;Initialized Teacher:&#123;&#125;&apos;.format(self.name))</div><div class="line"></div><div class="line">    def tell(self):</div><div class="line">        SchoolMember.tell(self)</div><div class="line">        print(&apos;Salary: &quot;&#123;:d&#125;&quot;&apos;.format(self.salary))</div><div class="line"></div><div class="line">class Student(SchoolMember):</div><div class="line">    def __init__(self,name,age,marks):</div><div class="line">        SchoolMember.__init__(self,name,age)</div><div class="line">        self.marks=marks</div><div class="line">        print(&apos;Initialized Student:&#123;&#125;&apos;.format(self.name))</div><div class="line"></div><div class="line">    def tell(self):</div><div class="line">        SchoolMember.tell(self)</div><div class="line">        print(&apos;Marks:&quot;&#123;:d&#125;&quot;&apos;.format(self.marks))</div><div class="line"></div><div class="line">t=Teacher(&apos;Mrs. Shrividya&apos;,40,30000)</div><div class="line">s=Student(&apos;Swaroop&apos;,25,75)</div><div class="line"></div><div class="line">print()</div><div class="line"></div><div class="line">members=[t,s]</div><div class="line">for member in members:</div><div class="line">    member.tell()</div></pre></td></tr></table></figure>
<p><code>SchoolMember.__init__(self,name,age)</code>调用父类的构造方法<br><code>SchoolMember.tell(self)</code>调用父类的方法<br>多重继承</p>
<h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def reverse(text):</div><div class="line">    return text[::-1]</div><div class="line"></div><div class="line">def is_palindrome(text):</div><div class="line">    return text==reverse(text)</div><div class="line"></div><div class="line">something=input(&apos;Enter text:&apos;)</div><div class="line">if is_palindrome(something):</div><div class="line">    print(&apos;Yes,it is a palindrome&apos;)</div><div class="line">else:</div><div class="line">    print(&apos;No,it is not a palindrome&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">poem=&apos;&apos;&apos;\</div><div class="line">Programming is fun</div><div class="line">When the work is done</div><div class="line">if you wanna make your work also fun:</div><div class="line">    use Python!</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">f=open(&apos;poem.txt&apos;,&apos;w&apos;)</div><div class="line">f.write(poem)</div><div class="line">f.close()</div><div class="line"></div><div class="line">f=open(&apos;poem.txt&apos;)</div><div class="line">while True:</div><div class="line">    line=f.readline()</div><div class="line">    if len(line)==0:</div><div class="line">        break</div><div class="line">    print(line,end=&apos;&apos;)</div><div class="line"></div><div class="line">f.close()</div></pre></td></tr></table></figure>
<p>阅读模式（’r’）<br>写入模式（’w’）<br>追加模式（’a’）<br>文本模式（’t’）<br>二进制模式（’b’）<br>在默认情况下，open() 会将文件视作文本（text）文件，并以阅读（read）模式打开它。</p>
<p>readline会读取换行符</p>
<h3 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h3><p>将任何纯 Python 对象存储到一个文件中，并在稍后将其取回。这叫作持久化（Persistently）存储对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import pickle</div><div class="line"></div><div class="line">shoplistfile=&apos;shoplist.data&apos;</div><div class="line">shoplist=[&apos;apple&apos;,&apos;mango&apos;,&apos;carrot&apos;]</div><div class="line"></div><div class="line">f=open(shoplistfile,&apos;wb&apos;)</div><div class="line">pickle.dump(shoplist,f)</div><div class="line">f.close()</div><div class="line"></div><div class="line">del shoplist</div><div class="line"></div><div class="line">f=open(shoplistfile,&apos;rb&apos;)</div><div class="line">storedlist=pickle.load(f)</div><div class="line">print(storedlist)</div></pre></td></tr></table></figure>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># encoding=utf-8</div></pre></td></tr></table></figure>
<p>使用 io.open 并提供了“编码（Encoding）”与“解码（Decoding）”参数来告诉 Python 我们正在使用 Unicode。</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>错误处理器：抛出错误，打印出检测到的错误发生的位置</p>
<p>EOFError，文件结尾错误（End of File）</p>
<h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    text=input(&apos;Enter something--&gt;&apos;)</div><div class="line">except EOFError:</div><div class="line">    print(&apos;Why not you do an EOF on me?&apos;)</div><div class="line">except KeyboardInterrupt:</div><div class="line">    print(&apos;You cancelled the operation.&apos;)</div><div class="line">else:</div><div class="line">    print(&apos;You entered &#123;&#125;&apos;.format(text))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Press ctrl + d</div><div class="line">$ python exceptions_handle.py</div><div class="line">Enter something --&gt; Why did you do an EOF on me?</div><div class="line"></div><div class="line"># Press ctrl + c</div><div class="line">$ python exceptions_handle.py</div><div class="line">Enter something --&gt; ^CYou cancelled the operation.</div><div class="line"></div><div class="line">$ python exceptions_handle.py</div><div class="line">Enter something --&gt; No exceptions</div><div class="line">You entered No exceptions</div></pre></td></tr></table></figure>
<p>else 子句将在没有发生异常的时候执行</p>
<h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>raise 语句可以引发一次异常，具体方法是提供错误名或异常名以及要抛出（Thrown）异常的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class ShortInputException(Exception):</div><div class="line">    def __init__(self,length,atleast):</div><div class="line">        Exception.__init__(self)</div><div class="line">        self.length=length</div><div class="line">        self.atleast=atleast</div><div class="line"></div><div class="line">try:</div><div class="line">    text=input(&apos;Enter somethin---&gt;&apos;)</div><div class="line">    if len(text)&lt;3:</div><div class="line">        raise ShortInputException(len(text),3)</div><div class="line">except EOFError:</div><div class="line">    print(&apos;Why did you do an EOF on me?&apos;)</div><div class="line">except ShortInputException as ex:</div><div class="line">    print((&apos;ShortInputException:The input was &apos;+&apos;&#123;0&#125; long,expected at least &#123;1&#125;&apos;).format(ex.length,ex.atleast))</div><div class="line">else:</div><div class="line">    print(&apos;No exception was raised.&apos;)</div></pre></td></tr></table></figure></p>
<h3 id="Try…Finally"><a href="#Try…Finally" class="headerlink" title="Try…Finally"></a>Try…Finally</h3><p>无论是否会发生异常必然执行，finally<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">import time</div><div class="line"></div><div class="line">f=None</div><div class="line">try:</div><div class="line">    f=open(&quot;poem.txt&quot;)</div><div class="line">    while True:</div><div class="line">        line=f.readline()</div><div class="line">        if len(line)==0:</div><div class="line">            break</div><div class="line">        print(line,end=&apos;&apos;)</div><div class="line">        sys.stdout.flush()</div><div class="line">        print(&apos;Print ctrl-c now&apos;)</div><div class="line">        time.sleep(2)</div><div class="line">except IOError:</div><div class="line">    print(&apos;Could not find file poem.txt&apos;)</div><div class="line">except KeyboardInterrupt:</div><div class="line">    print(&apos;!! You cancelled the reading from the file.&apos;)</div><div class="line">finally:</div><div class="line">    if f:</div><div class="line">        f.close()</div><div class="line">    print(&apos;(Cleaning up:Closed the file)&apos;)</div></pre></td></tr></table></figure></p>
<h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><p>使用with open语句会自动关闭文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">with open(&apos;poem.txt&apos;) as f:</div><div class="line">    for line in f:</div><div class="line">        print(line,end=&apos;&apos;)</div></pre></td></tr></table></figure></p>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>sys模块<br>日志模块logging</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">import platform</div><div class="line">import logging</div><div class="line"></div><div class="line">if platform.platform().startswith(&apos;Windows&apos;):</div><div class="line">    logging_file=os.path.join(os.getenv(&apos;HOMEDRIVE&apos;),os.getenv(&apos;HOMEPATH&apos;),&apos;test.log&apos;)</div><div class="line">else:</div><div class="line">    logging_file=os.path.join(os.getenv(&apos;HOME&apos;),&apos;test.log&apos;)</div><div class="line"></div><div class="line">print(&apos;Logging to&apos;,logging_file)</div><div class="line">logging.basicConfig(</div><div class="line">        level=logging.DEBUG,</div><div class="line">        format=&apos;%(asctime)s:%(levelname)s:%(message)s&apos;,</div><div class="line">        filename=logging_file,</div><div class="line">        filemode=&apos;w&apos;,</div><div class="line">)</div><div class="line">logging.debug(&apos;Start of the program&apos;)</div><div class="line">logging.info(&apos;Doing something&apos;)</div><div class="line">logging.warning(&apos;Dying now&apos;)</div></pre></td></tr></table></figure>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">points=[&#123;&apos;x&apos;:2,&apos;y&apos;:3&#125;,&#123;&apos;x&apos;:4,&apos;y&apos;:1&#125;]</div><div class="line"></div><div class="line">points.sort(key=lambda i:i[&apos;y&apos;])</div><div class="line">print(points)</div></pre></td></tr></table></figure>
<h3 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">listone=[2,3,4]</div><div class="line">listtwo=[2*i for i in listone if i&gt;2]</div><div class="line">print(listtwo)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《简明Python教程》读书笔记&quot;&gt;&lt;a href=&quot;#《简明Python教程》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《简明Python教程》读书笔记&quot;&gt;&lt;/a&gt;《简明Python教程》读书笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用《简明Python教程》漠伦翻译版&lt;br&gt;&lt;a href=&quot;https://bop.mol.uno/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bop.mol.uno/&lt;/a&gt;&lt;br&gt;使用Python3.5.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于Python&quot;&gt;&lt;a href=&quot;#关于Python&quot; class=&quot;headerlink&quot; title=&quot;关于Python&quot;&gt;&lt;/a&gt;关于Python&lt;/h2&gt;&lt;p&gt;简单、易于学习、自由且开放（FLOSS）、高级语言、跨平台性、解释性、面向对象、可扩展性、可嵌入性、丰富的库&lt;/p&gt;
&lt;p&gt;在程序内部，Python会将源代码转换为称为字节码的中间形式，尔后再转换成你的电脑所使用的语，并运行它&lt;/p&gt;
&lt;h2 id=&quot;安装…&quot;&gt;&lt;a href=&quot;#安装…&quot; class=&quot;headerlink&quot; title=&quot;安装…&quot;&gt;&lt;/a&gt;安装…&lt;/h2&gt;&lt;h2 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h2&gt;&lt;p&gt;通过Python&lt;strong&gt;运行程序有两种方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用交互式解释器提示符&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;直接运行一个源代码&lt;code&gt;python test.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python区分大小写&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取帮助&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;help(&amp;apos;input&amp;apos;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最好使用引号，不使用引号有时会出错，比如&lt;code&gt;help(return)&lt;/code&gt;&lt;br&gt;按&lt;code&gt;q&lt;/code&gt;退出&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>利用Python备份文件</title>
    <link href="http://yoursite.com/post/90c43b0e.html"/>
    <id>http://yoursite.com/post/90c43b0e.html</id>
    <published>2018-06-10T00:41:24.000Z</published>
    <updated>2018-06-11T05:10:31.767Z</updated>
    
    <content type="html"><![CDATA[<p>来自《简明Python教程》中解决问题一章，单独拿出来进行说明</p>
<p>需要解决的问题是</p>
<blockquote>
<p>我想要一款程序来备份我所有的重要文件。</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>5W1H<br>What？Where？When？Why？Who？How？<br>备份什么？备份到哪里？– ？–？–？ 怎么备份？<br>我们应该如何指定哪些文件是我们需要备份的？<br>它们应该如何进行备份？以什么方式存储？<br>储存到哪里?</p>
<h2 id="设计："><a href="#设计：" class="headerlink" title="设计："></a>设计：</h2><ol>
<li>需要备份的文件与目录应在一份列表中予以指定</li>
<li>备份必须存储在一个主备份目录中</li>
<li>备份文件将打包压缩成 zip 文件</li>
<li>zip 压缩文件的文件名由当前日期与时间构成</li>
<li>使用在任何 GNU/Linux 或 Unix 发行版中都会默认提供的标准 zip 命令进行打包</li>
</ol>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">import time</div><div class="line"></div><div class="line">#1.指定源目录列表</div><div class="line">source=[&apos;/home/lee/Documents/pyte&apos;]</div><div class="line"></div><div class="line">#2.指定目标目录</div><div class="line">target_dir=&apos;/home/lee/Templates&apos;</div><div class="line"></div><div class="line">#3.指定目标文件名</div><div class="line">target=target_dir+os.sep+time.strftime(&apos;%Y%m%d%H%M%S&apos;)+&apos;.zip&apos;</div><div class="line"></div><div class="line">if not os.path.exists(target_dir):</div><div class="line">    os.mkdir(target_dir)</div><div class="line"></div><div class="line">#4.组装zip命令</div><div class="line">zip_command=&apos;zip -r &#123;0&#125; &#123;1&#125;&apos;.format(target,&apos; &apos;.join(source))</div><div class="line"></div><div class="line">print(&apos;Zip command is:&apos;)</div><div class="line">print(zip_command)</div><div class="line">print(&apos;Running:&apos;)</div><div class="line">#5. 执行压缩命令os.system(zip_command)</div><div class="line">if os.system(zip_command)==0:</div><div class="line">    print(&apos;Successful backup to&apos;,target)</div><div class="line">else:</div><div class="line">    print(&apos;Backup Failed&apos;)</div></pre></td></tr></table></figure>
<h2 id="测试-调试"><a href="#测试-调试" class="headerlink" title="测试/调试"></a>测试/调试</h2><h2 id="部署-使用"><a href="#部署-使用" class="headerlink" title="部署/使用"></a>部署/使用</h2><h2 id="维护-改进"><a href="#维护-改进" class="headerlink" title="维护/改进"></a>维护/改进</h2><p>第二版，创建日期目录，将压缩文件放在对应的目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">import time</div><div class="line"></div><div class="line">source=[&apos;/home/lee/Documents/pyte&apos;]</div><div class="line"></div><div class="line">target_dir=&apos;/home/lee/Templates&apos;</div><div class="line"></div><div class="line">today=target_dir+os.sep+time.strftime(&apos;%Y%m%d&apos;)</div><div class="line">now=time.strftime(&apos;%H%M%S&apos;)</div><div class="line">#target=target_dir+os.sep+time.strftime(&apos;%Y%m%d%H%M%S&apos;)+&apos;.zip&apos;</div><div class="line">target=today+os.sep+now+&apos;.zip&apos;</div><div class="line"></div><div class="line">if not os.path.exists(today):</div><div class="line">    os.mkdir(today)</div><div class="line"></div><div class="line">zip_command=&apos;zip -r &#123;0&#125; &#123;1&#125;&apos;.format(target,&apos; &apos;.join(source))</div><div class="line"></div><div class="line">print(&apos;Zip command is:&apos;)</div><div class="line">print(zip_command)</div><div class="line">print(&apos;Running:&apos;)</div><div class="line">if os.system(zip_command)==0:</div><div class="line">    print(&apos;Successful backup to&apos;,target)</div><div class="line">else:</div><div class="line">    print(&apos;Backup Failed&apos;)</div></pre></td></tr></table></figure></p>
<p>第三版，压缩文件名添加注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">import time</div><div class="line"></div><div class="line">source=[&apos;/home/lee/Documents/pyte&apos;]</div><div class="line"></div><div class="line">target_dir=&apos;/home/lee/Templates&apos;</div><div class="line"></div><div class="line">today=target_dir+os.sep+time.strftime(&apos;%Y%m%d&apos;)</div><div class="line">now=time.strftime(&apos;%H%M%S&apos;)</div><div class="line">#target=target_dir+os.sep+time.strftime(&apos;%Y%m%d%H%M%S&apos;)+&apos;.zip&apos;</div><div class="line">comment=input(&apos;Enter some comment:&apos;)</div><div class="line">if len(comment)==0:</div><div class="line">    target=today+os.sep+now+&apos;.zip&apos;</div><div class="line">else:</div><div class="line">    target=today+os.sep+now+&apos;_&apos;+comment.replace(&apos; &apos;,&apos;_&apos;)+&apos;.zip&apos;</div><div class="line"></div><div class="line">if not os.path.exists(today):</div><div class="line">    os.mkdir(today)</div><div class="line"></div><div class="line">zip_command=&apos;zip -r &#123;0&#125; &#123;1&#125;&apos;.format(target,&apos; &apos;.join(source))</div><div class="line"></div><div class="line">print(&apos;Zip command is:&apos;)</div><div class="line">print(zip_command)</div><div class="line">print(&apos;Running:&apos;)</div><div class="line">if os.system(zip_command)==0:</div><div class="line">    print(&apos;Successful backup to&apos;,target)</div><div class="line">else:</div><div class="line">    print(&apos;Backup Failed&apos;)</div></pre></td></tr></table></figure></p>
<p>zip命令可以使用<code>-p</code>静默执行</p>
<p>第四版，使用zipfile而不是os压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">import time</div><div class="line">import zipfile</div><div class="line"></div><div class="line">sources=[&apos;/home/lee/Documents/pyte&apos;]</div><div class="line"></div><div class="line">target_dir=&apos;/home/lee/Templates&apos;</div><div class="line"></div><div class="line">today=target_dir+os.sep+time.strftime(&apos;%Y%m%d&apos;)</div><div class="line">now=time.strftime(&apos;%H%M%S&apos;)</div><div class="line">#target=target_dir+os.sep+time.strftime(&apos;%Y%m%d%H%M%S&apos;)+&apos;.zip&apos;</div><div class="line">comment=input(&apos;Enter some comment:&apos;)</div><div class="line">if len(comment)==0:</div><div class="line">    target=today+os.sep+now+&apos;.zip&apos;</div><div class="line">else:</div><div class="line">    target=today+os.sep+now+&apos;_&apos;+comment.replace(&apos; &apos;,&apos;_&apos;)+&apos;.zip&apos;</div><div class="line"></div><div class="line">if not os.path.exists(today):</div><div class="line">    os.mkdir(today)</div><div class="line"></div><div class="line">f=zipfile.ZipFile(target,&apos;a&apos;,zipfile.ZIP_DEFLATED)</div><div class="line">for source in sources:</div><div class="line">    for dirpath,dirnames,filenames in os.walk(source):</div><div class="line">        for dirname in dirnames:</div><div class="line">            #这个循环是为了保证空目录也可以被压缩</div><div class="line">            f.write(os.path.join(dirpath,dirname))</div><div class="line">        for filename in filenames:</div><div class="line">            f.write(os.path.join(dirpath,filename))</div><div class="line"></div><div class="line">print(f.namelist())</div><div class="line">f.close()</div></pre></td></tr></table></figure>
<p>也可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import shutil</div><div class="line">shutil.make_archive(output_filename, &apos;zip&apos;, dir_name)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自《简明Python教程》中解决问题一章，单独拿出来进行说明&lt;/p&gt;
&lt;p&gt;需要解决的问题是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我想要一款程序来备份我所有的重要文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;5W1H&lt;br&gt;What？Where？When？Why？Who？How？&lt;br&gt;备份什么？备份到哪里？– ？–？–？ 怎么备份？&lt;br&gt;我们应该如何指定哪些文件是我们需要备份的？&lt;br&gt;它们应该如何进行备份？以什么方式存储？&lt;br&gt;储存到哪里?&lt;/p&gt;
&lt;h2 id=&quot;设计：&quot;&gt;&lt;a href=&quot;#设计：&quot; class=&quot;headerlink&quot; title=&quot;设计：&quot;&gt;&lt;/a&gt;设计：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;需要备份的文件与目录应在一份列表中予以指定&lt;/li&gt;
&lt;li&gt;备份必须存储在一个主备份目录中&lt;/li&gt;
&lt;li&gt;备份文件将打包压缩成 zip 文件&lt;/li&gt;
&lt;li&gt;zip 压缩文件的文件名由当前日期与时间构成&lt;/li&gt;
&lt;li&gt;使用在任何 GNU/Linux 或 Unix 发行版中都会默认提供的标准 zip 命令进行打包&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之禅</title>
    <link href="http://yoursite.com/post/6be2dbca.html"/>
    <id>http://yoursite.com/post/6be2dbca.html</id>
    <published>2018-06-09T10:04:45.000Z</published>
    <updated>2018-06-11T05:10:31.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<blockquote>
<blockquote>
<p>import this<br>The Zen of Python, by Tim Peters</p>
</blockquote>
</blockquote>
</blockquote>
<p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import this&lt;br&gt;The Zen of Python, by Tim Peters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;B
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用virtualenv</title>
    <link href="http://yoursite.com/post/d528f132.html"/>
    <id>http://yoursite.com/post/d528f132.html</id>
    <published>2018-06-08T14:53:56.000Z</published>
    <updated>2018-06-11T05:10:31.751Z</updated>
    
    <content type="html"><![CDATA[<p>virtualenv用来为一个应用创建一套“隔离”的Python运行环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">pip3 install virtualenv</div><div class="line"># 安装virtualenv</div><div class="line"></div><div class="line">mkdir myproject</div><div class="line">cd myproject/</div><div class="line"></div><div class="line">virtualenv venv</div><div class="line">source venv/bin/activate     </div><div class="line"># 激活virtualenv</div><div class="line"></div><div class="line">pip install flexx</div><div class="line"></div><div class="line">deactivate          </div><div class="line"># 退出当前的venv环境</div></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="https://www.kancloud.cn/thinkphp/python-guide/39429" target="_blank" rel="external">https://www.kancloud.cn/thinkphp/python-guide/39429</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;virtualenv用来为一个应用创建一套“隔离”的Python运行环境&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python脚本文件的第一行和第二行</title>
    <link href="http://yoursite.com/post/a332154e.html"/>
    <id>http://yoursite.com/post/a332154e.html</id>
    <published>2018-06-08T14:28:13.000Z</published>
    <updated>2018-06-11T05:10:31.747Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># encoding=utf-8</div></pre></td></tr></table></figure>
<p>第一行会告诉系统使用的python路径，不建议使用<code>#!/usr/bin/python</code>，灵活性降低</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">sys.getdefaultencoding()</div><div class="line"></div><div class="line">&apos;utf-8&apos;</div></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="http://kethylar.github.io/pythonyuan-dai-ma-wen-jian-zhong-de-di-yi-xing-yu-di-er-xing.html" target="_blank" rel="external">http://kethylar.github.io/pythonyuan-dai-ma-wen-jian-zhong-de-di-yi-xing-yu-di-er-xing.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【转】字符编码常识及问题解析</title>
    <link href="http://yoursite.com/post/7444a34.html"/>
    <id>http://yoursite.com/post/7444a34.html</id>
    <published>2018-06-08T09:59:18.000Z</published>
    <updated>2018-06-08T11:29:12.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转自：<a href="http://sharecore.net/2014/08/10/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">http://sharecore.net/2014/08/10/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/</a></p>
</blockquote>
<p>在面试的笔试题里出了一道开放性的题：请简述Unicode与UTF-8之间的关系。一道看似简单的题，能给出满意答案的却寥寥无几，确实挺失望的。所以今天就结合我以前做过的一个关于字符编码的分享，总结一些与字符编码相关的知识和问题。如果你这方面的知识已经掌握的足够了，可以忽略这篇文字。但如果你没法很好的回答我上面的面试题，或经常被乱码的问题所困扰，还是不妨一读。</p>
<h2 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h2><h3 id="1-位和字节"><a href="#1-位和字节" class="headerlink" title="1.位和字节"></a>1.位和字节</h3><p>说起编码，我们必须从最基础的说起，<strong>位和字节</strong>(别觉得这个过于简单不值一说，我还真见过很多个不能区分这两者的程序员)。位（bit）是指计算机里存放的二进制值(0/1)，而8个位组合成的“位串”称为一个字节，容易算出，8个位的组合有256（ 2^8 ）个组合方式，其取值范围是“00000000-11111111”，常用十六进制来表示。比如“01000001”就是一个字节，其对应的十六进制值为“0x41”。</p>
<p>而我们通常所讲的字符编码，就是指<strong>定义一套规则</strong>，将真实世界里的字母/字符与计算机的二进制序列进行相互转化。如我们可以针对上面的字节定义如下的转换规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">01000001（0x41）&lt;-&gt; 65 &lt;-&gt; &apos;A&apos;</div></pre></td></tr></table></figure></p>
<p>即用字位序“01000001”来表示字母’A’。</p>
<a id="more"></a>
<h3 id="2-拉丁字符"><a href="#2-拉丁字符" class="headerlink" title="2.拉丁字符"></a>2.拉丁字符</h3><p>拉丁字符是当今世界使用最广泛的符号了。通常我们说的拉丁字母，指的的是<strong>基础拉丁字母</strong>,即指常见的”ABCD“等26个英文字母，这些字母与英语中一些常见的符号（如数字，标点符号）称为<strong>基础拉丁字符</strong>，这些基础拉丁字符在使用英语的国家广为流行，当然在中国，也被用来当作汉语拼音使用。在欧洲其它一些非英语国家，为满足其语言需要，在基础拉丁字符的基础上，加上一些连字符，变音字符(如’Á’)，形成了<strong>派生拉丁字母</strong>，其表示的字符范围在各种语言有所不同，而<strong>完整意义上的拉丁字符是指这些变体字符与基础拉丁字符的全集</strong>。是比基础拉丁字符集大很多的一个集合。</p>
<h2 id="编码标准"><a href="#编码标准" class="headerlink" title="编码标准"></a>编码标准</h2><p>前文提到，字符编码是一套规则。既然是规则，就必须有标准。下面我就仔细说说常见的字符编码标准。</p>
<h3 id="1-拉丁编码"><a href="#1-拉丁编码" class="headerlink" title="1.拉丁编码"></a>1.拉丁编码</h3><p>ASCII的全称是American Standard Code for Information Interchange（美国信息交换标准代码）。顾名思义，这是现代计算机的发明国美国人设计的标准，而美国是一个英语国家，他们设定的<strong>ASCII编码也只支持基础拉丁字符</strong>。ASCII的设计也很简单，<strong>用一个字节（8个位）来表示一个字符，并保证最高位的取值永远为’0’</strong>。即表示字符含义的位数为7位，不难算出其可表达字符数为2^7=128个。这128个字符包括95个可打印的字符（涵盖了26个英文字母的大小写以及英文标点符号能）与33个控制字符（不可打印字符）。例如下表，就是几个简单的规则对应：</p>
<table>
<thead>
<tr>
<th>字符类型</th>
<th>字符</th>
<th>二进制</th>
<th>16进制</th>
<th>10进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>可打印字符</td>
<td>A</td>
<td>01000001</td>
<td>0x41</td>
<td>65</td>
</tr>
<tr>
<td>可打印字符</td>
<td></td>
<td>a    01100001</td>
<td>0x61</td>
<td>97</td>
</tr>
<tr>
<td>控制字符</td>
<td>\r</td>
<td>00001101</td>
<td>0x0D</td>
<td>13</td>
</tr>
<tr>
<td>控制字符</td>
<td>\n</td>
<td>00001010</td>
<td>0xA</td>
<td>10</td>
</tr>
</tbody>
</table>
<p>前面说到了，ASCII是美国人设计的，只能支持基础拉丁字符，而当计算机发展到欧洲，欧洲其它不只是用的基础拉丁字符的国家（即用更大的派生拉丁字符集）该怎么办呢？</p>
<p>当然，最简单的办法就是将美国人没有用到的<strong>第8位也用上</strong>就好了，这样能表达的字符个数就达到了2^8 =256个，相比较原来，增长了一倍，这个编码规则也常被称为<strong>EASCII</strong>。EASCII基本解决了整个西欧的字符编码问题。但是对于欧洲其它地方如北欧，东欧地区，256个字符还是不够用，如是出现了<strong>ISO 8859</strong>,为解决256个字符不够用的问题，<strong>ISO8859采取的不再是单个独立的编码规则，而是由一系列的字符集（共15个）所组成</strong>，分别称为ISO 8859-n(n=1,2,3…11,13…16,没有12)。其每个字符集对应不同的语言,如ISO 8859-1对应西欧语言，ISO 8859-2对应中欧语言等。其中大家所熟悉的<strong>Latin-1就是ISO 8859-1的别名,它表示整个西欧的字符集范围</strong>。<br><strong>需要注意的一点的是，ISO 8859-n与ASCII是兼容的，即其0000000(0x00)-01111111(0x7f)范围段与ASCII保持一致，而10000000（0x80）-11111111(0xFF)范围段被扩展用到不同的字符集。</strong></p>
<h3 id="2-中文编码"><a href="#2-中文编码" class="headerlink" title="2.中文编码"></a>2.中文编码</h3><p>以上我们接触到的拉丁编码，都是单字节编码，即用一个字节来对应一个字符。但这一规则对于其它字符集更大的语言来说，并不适应，比如中文，而是出现了用多个字节表示一个字符的编码规则。常见的中文GB2312（国家简体中文字符集）就是用两个字节来表示一个汉字（注意是表示一个汉字，对于拉丁字母，GB2312还是是用一个字节来表示以兼容ASCII）。我们用下表来说明各中文编码之间的规则和兼容性。</p>
<p><img src="/img/IMG58.jpg" alt=""></p>
<p>对于中文编码，其规则实现上是很简单的，一般都是简单的<strong>字符查表</strong>即可，重要的是要注意其相互之间的<strong>兼容性</strong>问题。如如果选择BIG5字符集编码，就不能很好的兼容GB2312，当做繁转简时有可能导致个别字的冲突与不一致，但是GBK与GB2312之间就不存在这样的问题。</p>
<h3 id="3-Unicode"><a href="#3-Unicode" class="headerlink" title="3.Unicode"></a>3.Unicode</h3><p>以上可以看到，针对不同的语言采用不同的编码，有可能导致冲突与不兼容性，如果我们打开一份字节序文件，如果不知道其编码规则，就无法正确解析其语义，这也是产生乱码的根本原因。有没有一种规则是全世界字符统一的呢？当然有，Unicode就是一种。为了能独立表示世界上所有的字符，Unicode采用<strong>4个字节表示一个字符</strong>,这样理论上Unicode能表示的字符数就达到了2^31 = 2147483648 = 21 亿左右个字符，完全可以涵盖世界上一切语言所用的符号。我们以汉字”微信“两字举例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">微 &lt;-&gt;  \u5fae   &lt;-&gt;  00000000 00000000 01011111 10101110</div><div class="line">信 &lt;-&gt; \u4fe1   &lt;-&gt;  00000000 00000000 01001111 11100001</div></pre></td></tr></table></figure></p>
<p>容易从上面的例子里看出，Unicode对所有的字符编码均需要四个字节，而这对于拉丁字母或汉字来说是浪费的，其前面三个或两个字节均是0，这对信息存储来说是极大的浪费。另外一个问题就是，如何区分Unicode与其它编码这也是一个问题，比如计算机怎么知道四个字节表示一个Unicode中的字符，还是分别表示四个ASCII的字符呢？</p>
<p>以上两个问题，困扰着Unicode，让Unicode的推广上一直面临着困难。直至UTF-8作为Unicode的一种实现后，部分问题得到解决，才得以完成推广使用。说到此，我们可以回答文章一开始提出的问题了，<strong>UTF-8是Unicode的一种实现方式，而Unicode是一个统一标准规范，Unicode的实现方式除了UTF-8还有其它的，比如UTF-16等</strong>。</p>
<p>话说当初大牛Ben Thomson吃饭时，在一张餐巾纸上，设计出了UTF-8，然后回到房间，实现了第一版的UTF-8。关于UTF-8的基本规则，其实简单来说就两条（来自阮一峰老师的总结）：</p>
<blockquote>
<p>规则1：对于单字节字符，字节的第一位为0，后7位为这个符号的Unicode码，所以对于拉丁字母，UTF-8与ASCII码是一致的。</p>
<p>规则2：对于n字节(n&gt;1)的字符，第一个字节前n位都设为1，第n+1位为0，后面字节的前两位一律设为10，<br>剩下没有提及的位，全部为这个符号的Unicode编码。</p>
</blockquote>
<p>通过，根据以上规则，可以建立一个Unicode取值范围与UTF-8字节序表示的对应关系，如下表，</p>
<p><img src="/img/IMG59.jpg" alt=""></p>
<p>举例来说，’微’的Unicode是’\u5fae’，二进制表示是”00000000 00000000 01011111 10101110“，其取值就位于’0000 0800-0000 FFFF’之间，所以其UTF-8编码为’<strong>111</strong>00101 <strong>10</strong>111110 <strong>10</strong>101110’ （加粗部分为固定编码内容）。</p>
<p>通过以上简单规则，UTF-8采取变字节的方式，解决了我们前文提到的关于Unicode的两大问题。同时，作为中文使用者需要注意的一点是<strong>Unicode(UTF-8)与GBK，GB2312这些汉字编码规则是完全不兼容的，也就是说这两者之间不能通过任何算法来进行转换，如需转换，一般通过GBK查表的方式来进行</strong>。</p>
<h2 id="常见问题及解答"><a href="#常见问题及解答" class="headerlink" title="常见问题及解答"></a>常见问题及解答</h2><h3 id="1-windows-Notepad中的编码ANSI保存选项，代表什么含义？"><a href="#1-windows-Notepad中的编码ANSI保存选项，代表什么含义？" class="headerlink" title="1.windows Notepad中的编码ANSI保存选项，代表什么含义？"></a>1.windows Notepad中的编码ANSI保存选项，代表什么含义？</h3><p>ANSI是windows的默认的编码方式，对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。所以，<strong>如果将一个UTF-8编码的文件，另存为ANSI的方式，对于中文部分会产生乱码</strong>。</p>
<h3 id="2-什么是UTF-8的BOM？"><a href="#2-什么是UTF-8的BOM？" class="headerlink" title="2.什么是UTF-8的BOM？"></a>2.什么是UTF-8的BOM？</h3><p>BOM的全称是Byte Order Mark，BOM是微软给UTF-8编码加上的，用于标识文件使用的是UTF-8编码，即在UTF-8编码的文件起始位置，加入三个字节“EE BB BF”。这是微软特有的，标准并不推荐包含BOM的方式。采用加BOM的UTF-8编码文件，对于一些只支持标准UTF-8编码的环境，可能导致问题。比如，在Go语言编程中，对于包含BOM的代码文件，会导致编译出错。详细可见我的<a href="http://sharecore.info/blog/2013/04/05/parse-csv-to-sql-for-insert/" target="_blank" rel="external">这篇文章</a>。</p>
<h3 id="3-为什么数据库Latin1字符集（单字节）可以存储中文呢？"><a href="#3-为什么数据库Latin1字符集（单字节）可以存储中文呢？" class="headerlink" title="3.为什么数据库Latin1字符集（单字节）可以存储中文呢？"></a>3.为什么数据库Latin1字符集（单字节）可以存储中文呢？</h3><p>其实不管需要使用几个字节来表示一个字符，但最小的存储单位都是字节,所以，只要能保证传输和存储的字节顺序不会乱即可。作为数据库，只是作为存储的使用的话，<strong>只要能保证存储的顺序与写入的顺序一致</strong>，然后再按相同的字节顺序读出即可，翻译成语义字符的任务交给应用程序。比如’微’的UTF-8编码是’0xE5 0xBE 0xAE’，那数据库也存储’0xE5 0xBE 0xAE’三个字节，其它应用按顺序从数据库读取，再按UTF-8编码进行展现。这当然是一个看似完美的方案，但是只要写入，存储，读取过程中岔出任何别的编码，都可能导致乱码。</p>
<h3 id="4-Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？"><a href="#4-Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？" class="headerlink" title="4.Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？"></a>4.Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？</h3><p><img src="/img/IMG60.jpg" alt=""></p>
<p>我们分别解释：</p>
<p><strong>character_set_client</strong>：客户端来源的数据使用的字符集，用于客户端显式告诉客户端所发送的语句中的的字符编码。</p>
<p><strong>character_set_connection</strong>：连接层的字符编码，mysql一般用character_set_connection将客户端的字符转换为连接层表示的字符。</p>
<p><strong>character_set_results</strong>：查询结果从数据库读出后，将转换为character_set_results返回给前端。</p>
<p>而我们常见的解决乱码问题的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_query(&apos;SET NAMES GBK&apos;)</div></pre></td></tr></table></figure></p>
<p>其相当于将以上三个字符集统一全部设置为GBK，这三者一致时，一般就解决了乱码问题。</p>
<p>character_set_database:当前选中数据库的默认字符集，如当create table时没有指定字符集，将默认选择该字符集。</p>
<p>character_set_database已经character_set_system，一般用于数据库系统内部的一些字符编码，处理数据乱码问题时，我们基本可以忽略。</p>
<h3 id="5-什么情况下，表示信息丢失？"><a href="#5-什么情况下，表示信息丢失？" class="headerlink" title="5.什么情况下，表示信息丢失？"></a>5.什么情况下，表示信息丢失？</h3><p>对于mysql数据库，我们可以通过<strong>hex(colname)</strong>函数（其它数据库也有类似的函数，一些文本文件编辑器也具有这个功能），查看实际存储的字节内容，如：</p>
<p><img src="/img/IMG61.jpg" alt=""></p>
<p>通过查看存储的字节序，我们可以从根本上了解存储的内容是什么编码了。而当发现<strong>存储的内容全部是’3F’时，就表明存储的内容由于编码问题，信息已经丢失了，无法再找回</strong>。</p>
<p>之所以出现这种信息丢失的情况，一般是将不能相互转换的字符集之间做了转换，比如我们在前文说到，UTF-8只能一个个字节地变成Latin-1，但是根本不能转换的，因为两者之间没有转换规则，Unicode的字符对应范围也根本不在Latin-1范围内，所以只能用’?(0x3F)’代替了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从基础知识与实际中碰到的问题上，解析了字符编码相关内容。而之所以要从头介绍字符编码的基础知识，是为了更好的从原理上了解与解决日常碰到的编码问题，只有从根本上了解了不同字符集的规则及其之间的关系与兼容性，才能更好的解决碰到的乱码问题，也能避免由于程序中不正确的编码转换导致的信息丢失问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转自：&lt;a href=&quot;http://sharecore.net/2014/08/10/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sharecore.net/2014/08/10/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%B8%B8%E8%AF%86%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在面试的笔试题里出了一道开放性的题：请简述Unicode与UTF-8之间的关系。一道看似简单的题，能给出满意答案的却寥寥无几，确实挺失望的。所以今天就结合我以前做过的一个关于字符编码的分享，总结一些与字符编码相关的知识和问题。如果你这方面的知识已经掌握的足够了，可以忽略这篇文字。但如果你没法很好的回答我上面的面试题，或经常被乱码的问题所困扰，还是不妨一读。&lt;/p&gt;
&lt;h2 id=&quot;基本常识&quot;&gt;&lt;a href=&quot;#基本常识&quot; class=&quot;headerlink&quot; title=&quot;基本常识&quot;&gt;&lt;/a&gt;基本常识&lt;/h2&gt;&lt;h3 id=&quot;1-位和字节&quot;&gt;&lt;a href=&quot;#1-位和字节&quot; class=&quot;headerlink&quot; title=&quot;1.位和字节&quot;&gt;&lt;/a&gt;1.位和字节&lt;/h3&gt;&lt;p&gt;说起编码，我们必须从最基础的说起，&lt;strong&gt;位和字节&lt;/strong&gt;(别觉得这个过于简单不值一说，我还真见过很多个不能区分这两者的程序员)。位（bit）是指计算机里存放的二进制值(0/1)，而8个位组合成的“位串”称为一个字节，容易算出，8个位的组合有256（ 2^8 ）个组合方式，其取值范围是“00000000-11111111”，常用十六进制来表示。比如“01000001”就是一个字节，其对应的十六进制值为“0x41”。&lt;/p&gt;
&lt;p&gt;而我们通常所讲的字符编码，就是指&lt;strong&gt;定义一套规则&lt;/strong&gt;，将真实世界里的字母/字符与计算机的二进制序列进行相互转化。如我们可以针对上面的字节定义如下的转换规则：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;01000001（0x41）&amp;lt;-&amp;gt; 65 &amp;lt;-&amp;gt; &amp;apos;A&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即用字位序“01000001”来表示字母’A’。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【转】五种常见的开源协议整理</title>
    <link href="http://yoursite.com/post/fe81a09d.html"/>
    <id>http://yoursite.com/post/fe81a09d.html</id>
    <published>2018-06-07T13:38:34.000Z</published>
    <updated>2018-06-08T11:28:52.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>来源： <a href="http://yansu.org/2013/04/23/opensource-licenses.html" target="_blank" rel="external">http://yansu.org/2013/04/23/opensource-licenses.html</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6" target="_blank" rel="external">开源软件</a>(Open source software)对我们来说越来越不陌生，开源软件一方面让我们免费享用到了“免费的午餐”，另一方面有效的利用和学习开源软件，也能促进我们开发软件时的效率、提升软件质量。但是在使用和借鉴开源软件的时候，我们不得不关心一下它对使用者的诸多限制，比较常见的方式即协议授权(licence)，这些协议中明确说明了使用者应该遵循的原则。</p>
<p>现在开源协议众多，通过<a href="http://opensource.org/licenses/category" target="_blank" rel="external">Open Source Initiative</a>组织批准的开源协议有50多种，本文提到的五种常见协议也在其中，而且出现频率非常频繁，我们在使用开源代码或者开放自己源代码的时候，也应该尽量选择这些协议。</p>
<a id="more"></a>
<h2 id="五种常见开源协议"><a href="#五种常见开源协议" class="headerlink" title="五种常见开源协议"></a>五种常见开源协议</h2><h3 id="BSD协议"><a href="#BSD协议" class="headerlink" title="BSD协议"></a><a href="http://zh.wikipedia.org/wiki/BSD%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="external">BSD协议</a></h3><p>BSD开源协议是一个给予使用者很大自由的协议。开发者可以自由使用和修改源代码，也可以将修改后的源代码作为开源或者专有软件再发布。但是有一下几个要求：</p>
<p>如果再发布的产品中含有源代码，则在源代码中必须带有原来代码中的BSD协议。<br>如果再发布的只是二进制类库/软件，则需要再类库/软件的文档和版权申明中包含原有代码中的BSD协议。<br>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。<br>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p>
<h3 id="Apache-Licence-2-0"><a href="#Apache-Licence-2-0" class="headerlink" title="Apache Licence 2.0"></a><a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache Licence 2.0</a></h3><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和最终原作者的著作权，同样允许源代码修改和再发布。但是也需要遵循以下条件：</p>
<p>需要给代码的用户一份Apache Licence。<br>如果修改了代码，需要再被修改的文件中说明。<br>在衍生的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。<br>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以再Notice中增加自己的许可，但是不可以表现为对Apache Licence构成更改。<br>Apache Licence也是对商业应用又好的许可。使用者也可以再需要的时候修改代码来满足并作为开源或商业产品发布/销售。</p>
<h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a><a href="http://en.wikipedia.org/wiki/GNU_General_Public_License" target="_blank" rel="external">GPL</a></h3><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p>
<p>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>
<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p>
<p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p>
<h3 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a><a href="http://www.gnu.org/copyleft/lesser.html" target="_blank" rel="external">LGPL</a></h3><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p>
<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>
<p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p>
<h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a><a href="http://opensource.org/licenses/mit-license.php" target="_blank" rel="external">MIT</a></h3><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制。也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p>
<p>各协议分析图<br>乌克兰程序员Paul Bagwell画了一张分析图，说明应该怎么选择。<a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰</a>对图进行了汉化，如下图：</p>
<p><img src="/img/IMG57.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;来源： &lt;a href=&quot;http://yansu.org/2013/04/23/opensource-licenses.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yansu.org/2013/04/23/opensource-licenses.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源软件&lt;/a&gt;(Open source software)对我们来说越来越不陌生，开源软件一方面让我们免费享用到了“免费的午餐”，另一方面有效的利用和学习开源软件，也能促进我们开发软件时的效率、提升软件质量。但是在使用和借鉴开源软件的时候，我们不得不关心一下它对使用者的诸多限制，比较常见的方式即协议授权(licence)，这些协议中明确说明了使用者应该遵循的原则。&lt;/p&gt;
&lt;p&gt;现在开源协议众多，通过&lt;a href=&quot;http://opensource.org/licenses/category&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Open Source Initiative&lt;/a&gt;组织批准的开源协议有50多种，本文提到的五种常见协议也在其中，而且出现频率非常频繁，我们在使用开源代码或者开放自己源代码的时候，也应该尽量选择这些协议。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>reStructuredText常用语法</title>
    <link href="http://yoursite.com/post/1d81ed52.html"/>
    <id>http://yoursite.com/post/1d81ed52.html</id>
    <published>2018-06-06T02:32:15.000Z</published>
    <updated>2018-06-06T23:10:47.485Z</updated>
    
    <content type="html"><![CDATA[<p>reStructuredText是一种标记语言，和markdown类似，但是能够提供比markdown更丰富的样式</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">==========</div><div class="line">一级标题</div><div class="line">==========</div><div class="line"></div><div class="line"></div><div class="line">二级标题</div><div class="line">==========</div><div class="line"></div><div class="line"></div><div class="line">三级标题</div><div class="line">----------</div><div class="line"></div><div class="line"></div><div class="line">四级标题</div><div class="line">^^^^^^^^^^^</div></pre></td></tr></table></figure>
<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*这里是强调内容*</div><div class="line"></div><div class="line">`这里是引用内容`</div><div class="line"></div><div class="line">**这里是粗体内容**</div><div class="line"></div><div class="line">``这里是等宽文本``</div><div class="line"></div><div class="line"></div><div class="line">上标</div><div class="line">E = mc\ :sup:`2`</div><div class="line"></div><div class="line">下标</div><div class="line">H\ :sub:`2`\ O</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">| 这里是段落</div><div class="line"></div><div class="line">  缩进的段落被视为引文。</div><div class="line"></div><div class="line">| 这里也是段落</div><div class="line"></div><div class="line">  缩进的段落被视为引文。</div><div class="line"></div><div class="line">| 这里还是段落</div><div class="line"></div><div class="line">  缩进的段落被视为引文。</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">行内代码</div><div class="line">``echo &quot;Hello World!&quot;;``</div><div class="line"></div><div class="line">代码块</div><div class="line">在代码块的上一个段落后面加2个冒号，空一行后开始代码块，代码块要缩进</div><div class="line">::</div><div class="line"></div><div class="line">    hello world</div><div class="line">    hello world</div><div class="line">    hello world</div></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">下级列表需要有空格缩进</div><div class="line">无序列表</div><div class="line">- jj</div><div class="line">- kk</div><div class="line">- jj</div><div class="line"></div><div class="line">有序列表</div><div class="line">1. ll</div><div class="line">2. oo</div><div class="line">3. pp</div></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.. image:: https://help.github.com/assets/images/site/favicon.ico</div></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">外部引用</div><div class="line">这篇文章来自我的Github,请参考 reference_。</div><div class="line">.. _reference: https://github.com/SeayXu/</div><div class="line"></div><div class="line">`SeayXu &lt;https://github.com/SeayXu/&gt;`_</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">简单表格</div><div class="line">=====  =====  ======</div><div class="line">输入          输出</div><div class="line">------------  ------</div><div class="line">A      B      A or B</div><div class="line">=====  =====  ======</div><div class="line">False  False  False</div><div class="line">True   False  True</div><div class="line">False  True   True</div><div class="line">True   True   True</div><div class="line">=====  =====  ======</div><div class="line"></div><div class="line"></div><div class="line">普通表格</div><div class="line">+------------------------+------------+----------+----------+</div><div class="line">| Header row, column 1   | Header 2   | Header 3 | Header 4 |</div><div class="line">| (header rows optional) |            |          |          |</div><div class="line">+========================+============+==========+==========+</div><div class="line">| body row 1, column 1   | column 2   | column 3 | column 4 |</div><div class="line">+------------------------+------------+----------+----------+</div><div class="line">| body row 2             | Cells may span columns.          |</div><div class="line">+------------------------+------------+---------------------+</div><div class="line">| body row 3             | Cells may  | - Table cells       |</div><div class="line">+------------------------+ span rows. | - contain           |</div><div class="line">| body row 4             |            | - body elements.    |</div><div class="line">+------------------------+------------+---------------------+</div><div class="line"></div><div class="line"></div><div class="line">CSV表格</div><div class="line">.. csv-table:: 表头</div><div class="line"> :header: &quot;Treat&quot;, &quot;Quantity&quot;, &quot;Description&quot;</div><div class="line"> :widths: 15, 10, 30</div><div class="line"></div><div class="line"> &quot;Albatross&quot;, 2.99, &quot;On a stick!&quot;</div><div class="line"> &quot;Crunchy Frog&quot;, 1.49, &quot;If we took the bones out, it wouldn&apos;t be</div><div class="line"> crunchy, now would it?&quot;</div><div class="line"> &quot;Gannet Ripple&quot;, 1.99, &quot;On a stick!&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">列表表格</div><div class="line">.. list-table:: 表头</div><div class="line">  :widths: 15 10 30</div><div class="line">  :header-rows: 1</div><div class="line"></div><div class="line">  * - Treat</div><div class="line">    - Quantity</div><div class="line">    - Description</div><div class="line">  * - Albatross</div><div class="line">    - 2.99</div><div class="line">    - On a stick!</div><div class="line">  * - Crunchy Frog</div><div class="line">    - 1.49</div><div class="line">    - If we took the bones out, it wouldn&apos;t be</div><div class="line">      crunchy, now would it?</div><div class="line">  * - Gannet Ripple</div><div class="line">    - 1.99</div><div class="line">    - On a stick!</div></pre></td></tr></table></figure>
<p>表格可以使用插件<a href="https://macplay.github.io/posts/shi-yong-vim-zai-markdown-ji-rst-wen-dang-zhong-chuang-jian-biao-ge/" target="_blank" rel="external">https://macplay.github.io/posts/shi-yong-vim-zai-markdown-ji-rst-wen-dang-zhong-chuang-jian-biao-ge/</a></p>
<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/f60e9be4781d" target="_blank" rel="external">https://www.jianshu.com/p/f60e9be4781d</a></li>
<li><a href="https://3vshej.cn/rstSyntax/index.html" target="_blank" rel="external">https://3vshej.cn/rstSyntax/index.html</a></li>
<li><a href="https://www.jianshu.com/p/9b8c2e10e5e9" target="_blank" rel="external">https://www.jianshu.com/p/9b8c2e10e5e9</a></li>
<li><a href="http://docutils-zh-cn.readthedocs.io/zh_CN/latest/ref/rst/restructuredtext.html" target="_blank" rel="external">http://docutils-zh-cn.readthedocs.io/zh_CN/latest/ref/rst/restructuredtext.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;reStructuredText是一种标记语言，和markdown类似，但是能够提供比markdown更丰富的样式&lt;/p&gt;
&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;==========&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;一级标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;==========&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;二级标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;==========&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;三级标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;----------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;四级标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;^^^^^^^^^^^&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;字体样式&quot;&gt;&lt;a href=&quot;#字体样式&quot; class=&quot;headerlink&quot; title=&quot;字体样式&quot;&gt;&lt;/a&gt;字体样式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*这里是强调内容*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;`这里是引用内容`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**这里是粗体内容**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;``这里是等宽文本``&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;上标&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E = mc\ :sup:`2`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;下标&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;H\ :sub:`2`\ O&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab+sphinx+Readthedocs</title>
    <link href="http://yoursite.com/post/89c53863.html"/>
    <id>http://yoursite.com/post/89c53863.html</id>
    <published>2018-06-06T01:54:05.000Z</published>
    <updated>2018-06-06T23:09:46.049Z</updated>
    
    <content type="html"><![CDATA[<p>利用GitLab、sphinx、Readthedocs可以制作文档和博客，利用这种方式制作出来的博客更像一本书，能够结构化展示文章，比较适合笔记类<br>Gitlab用来存储代码<br>sphinx用来写博客<br>Readthedocs用来展示</p>
<h2 id="安装-Sphinx"><a href="#安装-Sphinx" class="headerlink" title="安装 Sphinx"></a>安装 Sphinx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install sphinx</div></pre></td></tr></table></figure>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir mybook</div><div class="line">cd mybook</div><div class="line">sphinx-quickstart</div></pre></td></tr></table></figure>
<p>输入工程名、作者名、版本号，分离source和build目录<code>Separate source and build directories (y/N) [n]: y</code></p>
<p>build目录 运行make命令后，生成的文件都在这个目录里面<br>source目录 放置文档的源文件</p>
<a id="more"></a>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>改主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html_theme = &apos;sphinx_rtd_theme&apos;</div></pre></td></tr></table></figure></p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>在gitlab上创建仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;sphinx start&quot;</div><div class="line">git remote add origin https://github.com/[yourusename]/[yourrepository].git</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h2 id="导入ReadtheDocs"><a href="#导入ReadtheDocs" class="headerlink" title="导入ReadtheDocs"></a>导入ReadtheDocs</h2><p>注册ReadtheDocs账号，因为直接用gitlab账号登录，所以没有设置Webhooks<br>从<a href="https://readthedocs.org/dashboard/import/" target="_blank" rel="external">https://readthedocs.org/dashboard/import/</a><br>导入git链接<br>在管理中设置Python 配置文件<code>source/conf.py</code>，Python interpreter<code>Cpython 3.x</code>，保存</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>index.rst<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div><div class="line">   :caption: Contents:</div><div class="line"></div><div class="line">   linux/index</div><div class="line">   python/index</div></pre></td></tr></table></figure></p>
<p>python/index.rst<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Python</div><div class="line">==================================</div><div class="line"></div><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div><div class="line">   :caption: Contents:</div><div class="line">   :numbered:</div><div class="line"></div><div class="line">   变量</div><div class="line">   语句</div></pre></td></tr></table></figure></p>
<h2 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h2><p>命令行执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make html</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="https://www.jianshu.com/p/78e9e1b8553a" target="_blank" rel="external">https://www.jianshu.com/p/78e9e1b8553a</a><br><a href="http://abnerzhao.com/2017/10/14/quickstart-wiki/" target="_blank" rel="external">http://abnerzhao.com/2017/10/14/quickstart-wiki/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用GitLab、sphinx、Readthedocs可以制作文档和博客，利用这种方式制作出来的博客更像一本书，能够结构化展示文章，比较适合笔记类&lt;br&gt;Gitlab用来存储代码&lt;br&gt;sphinx用来写博客&lt;br&gt;Readthedocs用来展示&lt;/p&gt;
&lt;h2 id=&quot;安装-Sphinx&quot;&gt;&lt;a href=&quot;#安装-Sphinx&quot; class=&quot;headerlink&quot; title=&quot;安装 Sphinx&quot;&gt;&lt;/a&gt;安装 Sphinx&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install sphinx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建工程&quot;&gt;&lt;a href=&quot;#创建工程&quot; class=&quot;headerlink&quot; title=&quot;创建工程&quot;&gt;&lt;/a&gt;创建工程&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir mybook&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd mybook&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sphinx-quickstart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入工程名、作者名、版本号，分离source和build目录&lt;code&gt;Separate source and build directories (y/N) [n]: y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;build目录 运行make命令后，生成的文件都在这个目录里面&lt;br&gt;source目录 放置文档的源文件&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL存储引擎</title>
    <link href="http://yoursite.com/post/4fa63392.html"/>
    <id>http://yoursite.com/post/4fa63392.html</id>
    <published>2018-06-04T06:16:53.000Z</published>
    <updated>2018-06-06T23:10:07.153Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL可以将数据以不同的技术存储在文件（内存）中，这种技术就称为存储引擎，每种存数引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能。</p>
<h2 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h2><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>当多个连接对记录进行修改时保证数据的一致性和完整性。</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul>
<li>共享锁(读锁)：在同一时间内，多个用户可读取同一个资源，读取过程中数据不会发生任何变化。</li>
<li>排他锁(写锁)：在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作。</li>
</ul>
<h3 id="锁的力度-锁颗粒–锁定时的单位"><a href="#锁的力度-锁颗粒–锁定时的单位" class="headerlink" title="锁的力度(锁颗粒–锁定时的单位)"></a>锁的力度(锁颗粒–锁定时的单位)</h3><ul>
<li>表锁，是一种开销最小的锁策略。对表进行写锁，所有用户不能对该表的任何记录操作。</li>
<li>行锁，是一种开销最大的锁策略。并行性最大，可能对表的所有记录写锁，开销大。</li>
</ul>
<a id="more"></a>
<h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><h3 id="事务处理-1"><a href="#事务处理-1" class="headerlink" title="事务处理"></a>事务处理</h3><p>整个过程每一个单元全部完成才算事务处理成功，某一个单元失败事务就会回滚。</p>
<h3 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h3><p>保证数据库的完整性</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>原子性(Atomic)：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li>一致性(Consistency)：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li>隔离性(Isolation)：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>
<li>持久性(Durable)：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<p>简称：ACID</p>
<h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>是保证数据一致性的策略</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>是对数据表中一列或者多列的值进行排序的一种结构。<br>索引好比目录。<br>索引可以划分为：普通索引、唯一索引、全文索引、btree索引、hash索引。</p>
<h2 id="各种存储引擎的特点"><a href="#各种存储引擎的特点" class="headerlink" title="各种存储引擎的特点"></a>各种存储引擎的特点</h2><h2 id="MySQL支持的存储引擎"><a href="#MySQL支持的存储引擎" class="headerlink" title="MySQL支持的存储引擎"></a>MySQL支持的存储引擎</h2><p>MyISAM、InnoDB、Memory、CSV、Archive</p>
<p><img src="/img/IMG56.png" alt=""></p>
<p>MyISAM/InnoDB：最广泛<br>MyISAM：适用于事务的处理不多的情况。<br>InnoDB：适用于事务处理比较多，需要有外键支持的情况。</p>
<h2 id="设置存储引擎"><a href="#设置存储引擎" class="headerlink" title="设置存储引擎"></a>设置存储引擎</h2><ol>
<li><p>修改MySQL配置文件实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default-storage-engine = engine_name</div></pre></td></tr></table></figure>
</li>
<li><p>创建数据表命令来实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE tbl_name(</div><div class="line">...</div><div class="line">) ENGINE = engine_name;</div></pre></td></tr></table></figure>
</li>
<li><p>修改数据表命令实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE tbl_name ENGINE [=] engine_name;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL可以将数据以不同的技术存储在文件（内存）中，这种技术就称为存储引擎，每种存数引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能。&lt;/p&gt;
&lt;h2 id=&quot;并发处理&quot;&gt;&lt;a href=&quot;#并发处理&quot; class=&quot;headerlink&quot; title=&quot;并发处理&quot;&gt;&lt;/a&gt;并发处理&lt;/h2&gt;&lt;h3 id=&quot;并发控制&quot;&gt;&lt;a href=&quot;#并发控制&quot; class=&quot;headerlink&quot; title=&quot;并发控制&quot;&gt;&lt;/a&gt;并发控制&lt;/h3&gt;&lt;p&gt;当多个连接对记录进行修改时保证数据的一致性和完整性。&lt;/p&gt;
&lt;h3 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;锁&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;共享锁(读锁)：在同一时间内，多个用户可读取同一个资源，读取过程中数据不会发生任何变化。&lt;/li&gt;
&lt;li&gt;排他锁(写锁)：在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;锁的力度-锁颗粒–锁定时的单位&quot;&gt;&lt;a href=&quot;#锁的力度-锁颗粒–锁定时的单位&quot; class=&quot;headerlink&quot; title=&quot;锁的力度(锁颗粒–锁定时的单位)&quot;&gt;&lt;/a&gt;锁的力度(锁颗粒–锁定时的单位)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;表锁，是一种开销最小的锁策略。对表进行写锁，所有用户不能对该表的任何记录操作。&lt;/li&gt;
&lt;li&gt;行锁，是一种开销最大的锁策略。并行性最大，可能对表的所有记录写锁，开销大。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL自定义函数</title>
    <link href="http://yoursite.com/post/ca4788ef.html"/>
    <id>http://yoursite.com/post/ca4788ef.html</id>
    <published>2018-06-04T05:03:17.000Z</published>
    <updated>2018-06-06T07:34:12.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>用户自定义函数(user-defined function, UDF)是一种对MySQL扩展的途径, 其用法与内置函数相同。 </p>
<h3 id="自定义函数的两个必要条件"><a href="#自定义函数的两个必要条件" class="headerlink" title="自定义函数的两个必要条件"></a>自定义函数的两个必要条件</h3><ol>
<li>参数：最多1024个任意类型的参数</li>
<li>返回值：任意类型</li>
</ol>
<p>函数可以返回任意类型的值，同样可以接受这些类型的参数；<br>函数的参数与返回值之间，没有必然的联系。</p>
<h3 id="创建自定义函数"><a href="#创建自定义函数" class="headerlink" title="创建自定义函数"></a>创建自定义函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE FUNCTION function_name</div><div class="line">RETURNS</div><div class="line">&#123;STRING|INTEGER|REAL|DECIMAL&#125;</div><div class="line">routine_body</div></pre></td></tr></table></figure>
<p><code>routine_body</code>是函数体<br><a id="more"></a></p>
<h3 id="关于函数体"><a href="#关于函数体" class="headerlink" title="关于函数体"></a>关于函数体</h3><ol>
<li>函数体由合法的SQL语法构成;</li>
<li>函数体可以是简单的SELECT或INSERT语句;</li>
<li>函数体如果为复合结构则使用BEGIN…END语句；</li>
<li>复合结构可以包括声明，循环，控制结构。</li>
</ol>
<h3 id="创建不带参数的自定义函数"><a href="#创建不带参数的自定义函数" class="headerlink" title="创建不带参数的自定义函数"></a>创建不带参数的自定义函数</h3><p>创建日期时间自定义函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE FUNCTION f1() </div><div class="line">RETURNS VARCHAR(30)</div><div class="line">RETURN DATE_FORMAT(NOW(),&apos;%Y年%m月%d日 %H点:%i分:%s秒&apos;);</div><div class="line"></div><div class="line">SELECT f1();</div></pre></td></tr></table></figure></p>
<h3 id="创建带有参数的自定义函数"><a href="#创建带有参数的自定义函数" class="headerlink" title="创建带有参数的自定义函数"></a>创建带有参数的自定义函数</h3><p>创建带参数的自定义函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE FUNCTION f2(num1 SMALLINT UNSIGNED,num2 SMALLINT UNSIGNED)</div><div class="line">RETURNS FLOAT(10,2) UNSIGNED</div><div class="line">RETURN (num1+num2)/2;</div><div class="line"></div><div class="line">SELECT f2();        //报错</div><div class="line">SELECT f2(10,15);   //结果：12.5</div></pre></td></tr></table></figure></p>
<h3 id="创建具有复合结构函数体的自定义函数"><a href="#创建具有复合结构函数体的自定义函数" class="headerlink" title="创建具有复合结构函数体的自定义函数"></a>创建具有复合结构函数体的自定义函数</h3><p>修改分隔符：DELEMITER 分隔符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DELIMITER //  </div><div class="line">//将分隔符修改为 &apos;//&apos;</div></pre></td></tr></table></figure></p>
<p>当函数体内执行多条语句时，使用BEGIN…END语句；<br>当编写函数体内容的时候，使用 DELIMITER 关键字将分隔符;修改为别的，否则写到 ‘;’ 时会执行，导致函数编写失败。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DELIMITER //</div><div class="line">CREATE FUNCTION ADD_USER(p_id SMALLINT,username VARCHAR(20))</div><div class="line">RETURNS INT UNSIGNED</div><div class="line">BEGIN</div><div class="line">INSERT user(p_id,username) VALUES(p_id,username);</div><div class="line">RETURN LAST_INSERT_ID();</div><div class="line">END</div><div class="line">//</div><div class="line"></div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure>
<h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP FUNCTION [IF EXISTS] function_name;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义函数&quot;&gt;&lt;a href=&quot;#自定义函数&quot; class=&quot;headerlink&quot; title=&quot;自定义函数&quot;&gt;&lt;/a&gt;自定义函数&lt;/h2&gt;&lt;p&gt;用户自定义函数(user-defined function, UDF)是一种对MySQL扩展的途径, 其用法与内置函数相同。 &lt;/p&gt;
&lt;h3 id=&quot;自定义函数的两个必要条件&quot;&gt;&lt;a href=&quot;#自定义函数的两个必要条件&quot; class=&quot;headerlink&quot; title=&quot;自定义函数的两个必要条件&quot;&gt;&lt;/a&gt;自定义函数的两个必要条件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;参数：最多1024个任意类型的参数&lt;/li&gt;
&lt;li&gt;返回值：任意类型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;函数可以返回任意类型的值，同样可以接受这些类型的参数；&lt;br&gt;函数的参数与返回值之间，没有必然的联系。&lt;/p&gt;
&lt;h3 id=&quot;创建自定义函数&quot;&gt;&lt;a href=&quot;#创建自定义函数&quot; class=&quot;headerlink&quot; title=&quot;创建自定义函数&quot;&gt;&lt;/a&gt;创建自定义函数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;CREATE FUNCTION function_name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RETURNS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;STRING|INTEGER|REAL|DECIMAL&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;routine_body&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;routine_body&lt;/code&gt;是函数体&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo插入图片</title>
    <link href="http://yoursite.com/post/e01ea1fb.html"/>
    <id>http://yoursite.com/post/e01ea1fb.html</id>
    <published>2018-06-04T01:49:54.000Z</published>
    <updated>2018-06-07T13:58:58.126Z</updated>
    
    <content type="html"><![CDATA[<p>在写博客中添加图片是很正常的，这里列举了本人使用的两种方法</p>
<h2 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h2><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](/img/image.jpg)</div></pre></td></tr></table></figure>
<p>要注意这是绝对路径</p>
<h2 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h2><p>将图片上传到一些免费的CDN服务中。上传图片后，会生成对应的url地址，将地址直接拿来引用即可<br>参考<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛</a>、<a href="https://cloudinary.com/" target="_blank" rel="external">cloudinary</a></p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写博客中添加图片是很正常的，这里列举了本人使用的两种方法&lt;/p&gt;
&lt;h2 id=&quot;本地引用&quot;&gt;&lt;a href=&quot;#本地引用&quot; class=&quot;headerlink&quot; title=&quot;本地引用&quot;&gt;&lt;/a&gt;本地引用&lt;/h2&gt;&lt;p&gt;当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;![](/img/image.jpg)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要注意这是绝对路径&lt;/p&gt;
&lt;h2 id=&quot;CDN引用&quot;&gt;&lt;a href=&quot;#CDN引用&quot; class=&quot;headerlink&quot; title=&quot;CDN引用&quot;&gt;&lt;/a&gt;CDN引用&lt;/h2&gt;&lt;p&gt;将图片上传到一些免费的CDN服务中。上传图片后，会生成对应的url地址，将地址直接拿来引用即可&lt;br&gt;参考&lt;a href=&quot;https://www.qiniu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七牛&lt;/a&gt;、&lt;a href=&quot;https://cloudinary.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cloudinary&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MySQL子查询</title>
    <link href="http://yoursite.com/post/9da3e761.html"/>
    <id>http://yoursite.com/post/9da3e761.html</id>
    <published>2018-06-03T14:14:15.000Z</published>
    <updated>2018-06-04T01:48:21.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询是指出现在其他SQL语句内的SELECT子句</p>
<ul>
<li>子查询嵌套在查询内部，且必须始终出现在<strong>圆括号内</strong>。</li>
<li>可以包含多个关键字或者条件，如<code>DISTINCT</code>、<code>GROUP BY</code>、<code>ORDER BY</code>、<code>LIMIT</code>、函数等</li>
<li>外层查询可以是：<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>SET</code>或<code>DO</code></li>
<li>返回值：标量、一行、一列或者子查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);</div></pre></td></tr></table></figure>
<p><code>SELECT * FROM t1;</code>称为Outer Query/外查询/Outer Statement<br><code>SELECT column1 FROM t2;</code> 称为Sub Query/子查询</p>
<a id="more"></a>
<h3 id="使用比较运算符的子查询"><a href="#使用比较运算符的子查询" class="headerlink" title="使用比较运算符的子查询"></a>使用比较运算符的子查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、&lt;=&gt;</div></pre></td></tr></table></figure>
<p>语法结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">operand comparison_operator [ANY|SOME|ALL] subquery</div></pre></td></tr></table></figure></p>
<p>当子查询返回多个结果的时候就可以用到<code>ANY</code>、<code>SOME</code>、<code>ALL</code>修饰符的比较运算符</p>
<p>Any: &gt;Any 表示至少大于一个值，即大于最小值。<br>Any: <any 表示小于最大的那个值，即小于最大值="" all:="">All 表示大于每一个值。换句话说，它表示大于最大值<br>All: &lt;All 表示小于每一个值。换句话说，它表示小于最小值<br>ANY: =ANY 或者 SOME 都是等于他们本身</any></p>
<table>
<thead>
<tr>
<th></th>
<th>ANY</th>
<th>SOME</th>
<th>ALL</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt; &gt;=</td>
<td>最小值</td>
<td>最小值</td>
<td>最大值</td>
</tr>
<tr>
<td>&lt; &lt;=</td>
<td>最大值</td>
<td>最大值</td>
<td>最小值</td>
</tr>
<tr>
<td>=</td>
<td>任意值</td>
<td>任意值</td>
<td>–</td>
</tr>
<tr>
<td>&lt;&gt;  !=</td>
<td>–</td>
<td>–</td>
<td>任意值</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price&gt;=5636.36; </div><div class="line">//查询所有商品不小于平均价格的</div><div class="line"></div><div class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods </div><div class="line">WHERE goods_price&gt;=(</div><div class="line">    SELECT ROUND(AVG(goods_price),2) FROM tdb_goods);	</div><div class="line">//利用子查询来进行两者的结合查找</div><div class="line"></div><div class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods </div><div class="line">WHERE goods_price&gt;=ANY (</div><div class="line">    SELECT goods_price FROM tdb_goods </div><div class="line">    WHERE goods_cate=&apos;超级本&apos;);</div><div class="line"></div><div class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods </div><div class="line">WHERE goods_price&gt;=ALL (</div><div class="line">    SELECT goods_price FROM tdb_goods </div><div class="line">    WHERE goods_cate=&apos;超级本&apos;);</div><div class="line"></div><div class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods </div><div class="line">WHERE goods_price&gt;=SOME (</div><div class="line">    SELECT goods_price FROM tdb_goods </div><div class="line">    WHERE goods_cate=&apos;超级本&apos;);</div></pre></td></tr></table></figure>
<h3 id="使用-NOT-IN-的子查询"><a href="#使用-NOT-IN-的子查询" class="headerlink" title="使用[NOT] IN 的子查询"></a>使用[NOT] IN 的子查询</h3><p>语法结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">operand comparison_operator [NOT] &#123;IN|EXISTS&#125; (subquery)</div></pre></td></tr></table></figure></p>
<p>IN 相当于 =ANY 或 =SOME<br>NOT IN 相当于 !=ALL 或 &lt;&gt;ALL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods</div><div class="line">WHERE goods_price IN (</div><div class="line">    SELECT goods_price FROM tdb_goods </div><div class="line">    WHERE goods_cate = &apos;超级本&apos;);</div></pre></td></tr></table></figure>
<h3 id="使用-NOT-EXISTS-的子查询"><a href="#使用-NOT-EXISTS-的子查询" class="headerlink" title="使用[NOT] EXISTS 的子查询"></a>使用[NOT] EXISTS 的子查询</h3><p>如果子查询返任何行，EXISTS返true；反之，返false。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS tdb_goods_cates(</div><div class="line">cate_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</div><div class="line">cate_name VARCHAR(40) NOT NULL</div><div class="line">);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;子查询&quot;&gt;&lt;a href=&quot;#子查询&quot; class=&quot;headerlink&quot; title=&quot;子查询&quot;&gt;&lt;/a&gt;子查询&lt;/h2&gt;&lt;p&gt;子查询是指出现在其他SQL语句内的SELECT子句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子查询嵌套在查询内部，且必须始终出现在&lt;strong&gt;圆括号内&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;可以包含多个关键字或者条件，如&lt;code&gt;DISTINCT&lt;/code&gt;、&lt;code&gt;GROUP BY&lt;/code&gt;、&lt;code&gt;ORDER BY&lt;/code&gt;、&lt;code&gt;LIMIT&lt;/code&gt;、函数等&lt;/li&gt;
&lt;li&gt;外层查询可以是：&lt;code&gt;SELECT&lt;/code&gt;、&lt;code&gt;INSERT&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt;、&lt;code&gt;SET&lt;/code&gt;或&lt;code&gt;DO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值：标量、一行、一列或者子查询&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;SELECT * FROM t1;&lt;/code&gt;称为Outer Query/外查询/Outer Statement&lt;br&gt;&lt;code&gt;SELECT column1 FROM t2;&lt;/code&gt; 称为Sub Query/子查询&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL连接</title>
    <link href="http://yoursite.com/post/b63304bd.html"/>
    <id>http://yoursite.com/post/b63304bd.html</id>
    <published>2018-06-03T14:14:10.000Z</published>
    <updated>2018-06-06T23:10:30.909Z</updated>
    
    <content type="html"><![CDATA[<p>联合查询的效率比较高</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作<br>语法结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table_reference A</div><div class="line">&#123;[INNER|CROSS] JOIN | &#123;LEFT|RIGHT&#125; [OUTER] JOIN&#125;</div><div class="line">table_reference B</div><div class="line">ON condition_expr</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="连接类型"><a href="#连接类型" class="headerlink" title="连接类型"></a>连接类型</h3><p><img src="/img/IMG54.jpg" alt=""></p>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>在MySQL中，JOIN, CROSS JOIN 和 INNER JOIN 是等价的。<br>显示左表及右表符合连接条件的记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT goods_id,goods_name,cate_name FROM tdb_goods </div><div class="line">INNER JOIN tdb_goods_cate </div><div class="line">ON tdb_goods.cate_id = tdb_goods_cate.cate_id;</div></pre></td></tr></table></figure></p>
<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>左外连接：LEFT [OUTER] JOIN：显示左表的全部记录及右表符合连接条件的记录。<br>右外连接：RIGHT [OUTER] JOIN：显示右表的全部记录及左表符合连接条件的记录。</p>
<p>如果使用LEFT JOIN，左表中存在一条记录A，在右表中没有找到相应的记录，则在返回结果用会出现一条只有记录A中的相应字段内容，其他字段都为NULL在记录(RIGHT JOIN类似)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//查询所有商品的详细信息(通过左外连接实现)   </div><div class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price </div><div class="line">FROM tdb_goods AS g</div><div class="line">LEFT JOIN tdb_goods_cates AS c </div><div class="line">ON g.cate_id = c.cate_id;</div><div class="line">//LEFT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</div><div class="line"></div><div class="line">//查询所有商品的详细信息(通过右外连接实现)   </div><div class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price </div><div class="line">FROM tdb_goods AS g   </div><div class="line">RIGHT JOIN tdb_goods_cates AS c </div><div class="line">ON g.cate_id = c.cate_id;</div><div class="line">//RIGHT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</div></pre></td></tr></table></figure>
<p>外链接 A LEFT JOIN B join_condition<br>数据表B的结果集依赖数据表A。<br>数据表A的结果集根据左连接条件依赖于所有数据表（B表除外）。<br>左外连接条件决定如何检索数据表B（在没有指定WHERE条件的情况下）。<br>如果数据表A的某条记录符合WHERE条件，但是在数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行。</p>
<h4 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h4><p>显示左表、右表两边中的所有行，即把左联结果表 + 右联结果表组合在一起，然后过滤掉重复的。</p>
<p>多表的连接跟两张表的连接一样<br>表的连接实质就是外键的逆向约束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT goods_id,goods_name,b.cate_name,c.brand_name,goods_price</div><div class="line">FROM products AS a </div><div class="line">INNER JOIN products_cate AS b </div><div class="line">ON a.goods_cate = b.cate_id</div><div class="line">INNER JOIN products_brand AS c </div><div class="line">ON a.brand_name = c.brand_id;</div></pre></td></tr></table></figure></p>
<h3 id="数据表参照"><a href="#数据表参照" class="headerlink" title="数据表参照"></a>数据表参照</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">table_reference</div><div class="line">tbl_name [[AS] alias] | table_subquery [AS] alias</div></pre></td></tr></table></figure>
<p>数据表可以使用<code>tbl_name AS alias_name</code> 或 <code>tbl_name alias_name</code>赋予别名。<br><code>table_subquery</code>可以作为子查询使用在FROM子句中，这样的子查询必须为其赋予别名。</p>
<h3 id="连接条件"><a href="#连接条件" class="headerlink" title="连接条件"></a>连接条件</h3><p>使用ON关键字来设定连接条件，也可以使用WHERE来代替</p>
<p>通常使用ON关键字来设定连接条件<br>使用WHERE关键字来进行结果集记录的过滤</p>
<h3 id="自身连接-–-无限分类"><a href="#自身连接-–-无限分类" class="headerlink" title="自身连接 – 无限分类"></a>自身连接 – 无限分类</h3><p>自身连接：同一个数据表对其自身进行连接</p>
<p>对于常见的分类，比如商城中的书籍&gt;&gt;文学&gt;&gt;小说，并不是使用多个表，而是使用一个表来进行联合查询</p>
<p>在同一张表中既有父类，又有子类。<br>通过对同一张数据表的自身连接来进行查询，需要对表标识别名。<br>做自身连接的话一定要起别名，以区分是子表还是父表</p>
<p>表的结构是这样的，使用parent_id表示父类目的id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE tdb_goods_types(</div><div class="line">type_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</div><div class="line">type_name VARCHAR(20) NOT NULL,</div><div class="line">parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>查找所有分类及其父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT s.type_id ,s.type_name,p.type_name </div><div class="line">FROM tdb_goods_types s </div><div class="line">LEFT JOIN tdb_goods_types p </div><div class="line">ON s.parent_id=p.type_id;</div></pre></td></tr></table></figure></p>
<p>查找所有分类及其子类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT p.type_id ,p.type_name,s.type_name </div><div class="line">FROM tdb_goods_types p </div><div class="line">LEFT JOIN tdb_goods_types s </div><div class="line">ON p.type_id=s.parent_id;</div></pre></td></tr></table></figure></p>
<p>查找所有分类及其子类的数目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT p.type_id ,p.type_name,COUNT(s.type_name) </div><div class="line">FROM tdb_goods_types p </div><div class="line">LEFT JOIN tdb_goods_types s </div><div class="line">ON p.type_id=s.parent_id</div><div class="line">GROUP BY p.type_name </div><div class="line">ORDER BY p.type_id;</div></pre></td></tr></table></figure></p>
<p>补充：</p>
<ul>
<li><a href="https://www.jianshu.com/p/c4c43f32b66f" target="_blank" rel="external">https://www.jianshu.com/p/c4c43f32b66f</a></li>
<li><a href="http://wxb.github.io/2016/12/15/MySQL%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8Djoin.html" target="_blank" rel="external">http://wxb.github.io/2016/12/15/MySQL%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8Djoin.html</a></li>
<li><a href="http://www.zsythink.net/archives/1105" target="_blank" rel="external">http://www.zsythink.net/archives/1105</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;联合查询的效率比较高&lt;/p&gt;
&lt;h2 id=&quot;连接&quot;&gt;&lt;a href=&quot;#连接&quot; class=&quot;headerlink&quot; title=&quot;连接&quot;&gt;&lt;/a&gt;连接&lt;/h2&gt;&lt;p&gt;MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作&lt;br&gt;语法结构&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;table_reference A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;[INNER|CROSS] JOIN | &amp;#123;LEFT|RIGHT&amp;#125; [OUTER] JOIN&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;table_reference B&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ON condition_expr&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL函数</title>
    <link href="http://yoursite.com/post/ed90cb85.html"/>
    <id>http://yoursite.com/post/ed90cb85.html</id>
    <published>2018-06-03T14:14:04.000Z</published>
    <updated>2018-06-04T05:02:04.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
<th>举例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONCAT()</td>
<td>字符连接</td>
<td>SELECT CONCAT(‘a’,’-‘,’b’);</td>
<td>a-b</td>
</tr>
<tr>
<td>CONCAT_WS()</td>
<td>使用指定的分隔符进行字符连接</td>
<td>SELECT CONCAT_WS(‘</td>
<td>‘,’A’,’B’,’C’);</td>
<td>A</td>
<td>B</td>
<td>C</td>
</tr>
<tr>
<td>FORMAT()</td>
<td>数字格式化</td>
<td>SELECT FORMAT(12560.78,1);</td>
<td>12,560.8</td>
</tr>
<tr>
<td>LOWER()</td>
<td>转换成小写字母</td>
<td></td>
<td></td>
</tr>
<tr>
<td>UPPER()</td>
<td>转换成大写字母</td>
<td></td>
<td></td>
</tr>
<tr>
<td>LEFT()</td>
<td>获取左侧字符</td>
<td>SELECT LEFT(‘mysql’,2);</td>
<td>my</td>
</tr>
<tr>
<td>RIGHT()</td>
<td>获取右侧字符</td>
<td></td>
<td></td>
</tr>
<tr>
<td>LTRIM()</td>
<td>删除前导空格(=LEFT TRIM())</td>
<td></td>
<td></td>
</tr>
<tr>
<td>RTRIM()</td>
<td>删除后续空格</td>
<td></td>
<td></td>
</tr>
<tr>
<td>TRIM()</td>
<td>删除前后两边的空格，还可以删除指定的前导和后续的字符,不能删除中间的字符</td>
<td>SELECT TRIM(LEADING’?’,’??MYSQL????’);<br> SELECT TRIM(TRAILING’?’,’??MYSQL????’);<br> SELECT TRIM(BOTH’?’,’??MYSQL???’);</td>
<td>MYSQL????<br>  ??MYSQL<br> MYSQL</td>
</tr>
<tr>
<td>REPLACE()</td>
<td>替换字符</td>
<td>SELECT REPLACE(‘??MYSQL???’,’?’,’-‘);</td>
<td>–MYSQL—</td>
</tr>
<tr>
<td>SUBSTRING(string，offset，length)</td>
<td>截取字符串</td>
<td>SELECT SUBSTRING(‘MYSQL’,2,3);</td>
<td>SQL</td>
</tr>
<tr>
<td>[NOT]LIKE</td>
<td>模糊匹配   (%)：代表任意个字符，0个或多个 <br>(_)：代表任意一个字符，只有一个</td>
<td>SELECT name FROM test WHERE name LIKE’%O%’; <br> SELECT name FROM test WHERE name LIKE’%1%%’ ESCAPE’1’;</td>
<td>name 中带‘O’的name<br>  中间带% 的匹配name</td>
</tr>
<tr>
<td>LEAGTH()</td>
<td>获取字符串长度</td>
<td></td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="数值运算符与函数"><a href="#数值运算符与函数" class="headerlink" title="数值运算符与函数"></a>数值运算符与函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
<th>举例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>CEIL(数值)</td>
<td>向上取整</td>
<td>SELECT CEIL(3.01);</td>
<td>4</td>
</tr>
<tr>
<td>FLOOR(数值)</td>
<td>向下取整</td>
<td>SELECT FLOOR(3.99);</td>
<td>3</td>
</tr>
<tr>
<td>DIV</td>
<td>整数除法</td>
<td>SELECT 3 DIV 4;</td>
<td>0</td>
</tr>
<tr>
<td>MOD</td>
<td>取余，可以用%号代替</td>
<td>SELECT 4 MOD 3; <br>SELECT 5.3 MOD 3;</td>
<td>1<br>2.3</td>
</tr>
<tr>
<td>POWER(数值,数值)</td>
<td>幂运算</td>
<td>SELECT POWER(3,3);</td>
<td>27</td>
</tr>
<tr>
<td>ROUND(数值,小数的位数)</td>
<td>四舍五入</td>
<td>ROUND(3.1415926,4)</td>
<td>3.142</td>
</tr>
<tr>
<td>TRUNCATE(数值，截取位数)</td>
<td>截断（不四舍五入）</td>
<td>SELECT TRUNCATE(123.89,1)<br> SELECT TRUNCATE(125.68,-1);</td>
<td>123.8<br>120</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="比较运算符与函数"><a href="#比较运算符与函数" class="headerlink" title="比较运算符与函数"></a>比较运算符与函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
<th>举例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>[NOT]BETWEEN…AND…</td>
<td>[不]在范围之间，1为是，0为否</td>
<td>15 BETWEEND 1 AND 20<br>15 NOT BETWEEND 1 AND 20</td>
<td>1<br>0</td>
</tr>
<tr>
<td>[NOT]IN()</td>
<td>[不]在列出值范围内</td>
<td>10 IN(5,10,15)</td>
<td>1</td>
</tr>
<tr>
<td>IS [NOT] NULL</td>
<td>[不]为空</td>
<td>NULL IS NULL  <br>  ‘’ IS NULL</td>
<td>1<br>0</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>NOW()</td>
<td>当前时间 含日期时间</td>
</tr>
<tr>
<td>CURDATE()</td>
<td>当前日期 只有日期</td>
</tr>
<tr>
<td>CURTIME()</td>
<td>当前时间 值有时间</td>
</tr>
<tr>
<td>DATE_ADD()</td>
<td>时间增减或减少</td>
</tr>
<tr>
<td>DATEDIFF()</td>
<td>日期差值</td>
</tr>
<tr>
<td>DATE_FORMAT()</td>
<td>日期格式化</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">SELECT DATE_ADD(&apos;2014-3-12&apos;,INTERVAL 365 DAY); </div><div class="line">2015-3-12 </div><div class="line">//在原有给定的时间上增加365天 </div><div class="line">//INTERVAL增加可以增加负值 单位 year,month,week,day</div><div class="line"></div><div class="line">SELECT DATEDIFF(&apos;2014-1-1&apos;,&apos;2015-1-1&apos;);</div><div class="line">-365 </div><div class="line">//时间差值计算 单位为日 前面时间减去后面时间</div><div class="line"></div><div class="line">SELECT DATE_FORMAT(&apos;2014-3-2&apos;,&apos;%m/%d/%d&apos;); </div><div class="line">03/02/2014</div><div class="line">//日期格式转换</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
<th>举例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONNECTION_ID()</td>
<td>连接ID</td>
<td>SELECT CONNECTION_ID();</td>
<td>SELECT CONNECTION_ID();</td>
<td>3</td>
</tr>
<tr>
<td>SELECT DATABASE()</td>
<td>当前数据库</td>
<td>SELECT DATABASE();</td>
<td>users</td>
</tr>
<tr>
<td>LAST_INSERT_ID();</td>
<td>最后插入记录的 ID 号</td>
<td>SELECT LAST_INSERT_ID();</td>
<td>如果是一次insert中插入的是多条记录，得到的是多条中的第一条（而不是最后一条！）</td>
</tr>
<tr>
<td>USER()</td>
<td>当前用户</td>
<td>SELECT USER();</td>
<td>root@localhost</td>
</tr>
<tr>
<td>VERSION();</td>
<td>版本的信息</td>
<td>SELECT VERSION();</td>
<td>5.7.21</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>AVG()</td>
<td>平均值</td>
<td>SELECT ROUND(AVG(goods_price),2) AS avg_price FROM tdb_goods;</td>
</tr>
<tr>
<td>COUNT()</td>
<td>计数</td>
<td>SELECT COUNT(goods_id) as counts FROM tdb_goods;</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大值</td>
<td>SELECT MAX(goods_price) as counts FROM tdb_goods;</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小值</td>
<td>SELECT MIN(goods_price) as counts FROM tdb_goods;</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
<td>SELECT SUM(goods_price) as counts FROM tdb_goods;</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
<th>举例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>MD5()</td>
<td>信息摘要算法，为以后的Web页面做准备，尽量使用MD5()</td>
<td>SELECT MD5(‘admin’);</td>
<td>21232f297a57a5a743894a0e4a801fc3</td>
</tr>
<tr>
<td>PASSWORD()</td>
<td>密码算法通过PASSWORD()修改(重要用于MYSQL数据库)当前用户和其他用户的密码，修改客户端自己的密码</td>
<td>SELECT PASSWORD(‘admin’); <br>SET PASSWORD=PASSWORD(‘dimitar’);</td>
<td>*4ACFE3202A5FF5CF467898FC58AAB1D615029441 <br>把密码修改成dimitar</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符函数&quot;&gt;&lt;a href=&quot;#字符函数&quot; class=&quot;headerlink&quot; title=&quot;字符函数&quot;&gt;&lt;/a&gt;字符函数&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;举例&lt;/th&gt;
&lt;th&gt;结果
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储过程</title>
    <link href="http://yoursite.com/post/392b408.html"/>
    <id>http://yoursite.com/post/392b408.html</id>
    <published>2018-06-03T14:13:52.000Z</published>
    <updated>2018-06-04T05:46:44.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>存储过程是SQL语句与控制语句的预编译集合，以一个名称存储作为一个单元处理</p>
<p><img src="/img/IMG55.png" alt=""></p>
<p>输入SQL命令，MySQL引擎对命令进行分析，查看输入的语法是否正确，如果正确，再进行编译，编译成MySQL引擎可识别的命令，最后再进行执行，并将执行结果返回给客户端。</p>
<p>如果省略了语法分析和编译的阶段，则效率可提高。</p>
<p>存储过程：是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理（类似函数）。存储过程存储在数据库内，可以由应用程序调用执行，而且允许用户申明变量以及进行流程控制。存储过程可以接受输入类型的参数和输出类型的参数，并且可以存在多个返回值。只在第一次调用时进行语法分析和编译，以后的调用直接调用编译的结果，效率大大提高。<br><a id="more"></a></p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>增强SQL语句的功能和灵活性：可以通过控制语句对流程进行控制和判断</li>
<li>实现较快的执行速度：客户端第一次调用存储过程时，MySQL引擎会对其进行语法分析、编译等操作，然后将编译结果存储到内存中，所以第一次和之前的效率一样，然而以后会直接调用内存中的编译结果，效率提高</li>
<li>减少网络流量：例如删除一个记录，我们原本要输入DELETE FROM xx WHERE …; 要传输的字符较多，如果写成存储过程，就只要调用存储过程的名字和相应参数就行，传输的字符数量较少，所以减少了网络流量。</li>
</ol>
<h2 id="创建储存过程"><a href="#创建储存过程" class="headerlink" title="创建储存过程"></a>创建储存过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE</div><div class="line">[DEFINER = &#123;user|CURRENT_USER&#125;]</div><div class="line">PROCEDURE sp_name ([proc_parameter[,...]]) //可以带0到多个参数</div><div class="line">[characteristic ...] routine_body</div></pre></td></tr></table></figure>
<p>其中参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">proc_parameter:</div><div class="line">[IN | OUT | INOUT] param_name type</div></pre></td></tr></table></figure></p>
<p>IN, 表示该参数的值必须在调用存储过程时指定<br>OUT, 表示该参数的值可以被存储过程改变，并且可以返回<br>INOUT, 表示该参数的值调用时指定，并且可以被改变和返回</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">COMMENT &apos;string&apos;</div><div class="line">| &#123;CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA</div><div class="line">| SQL SECURITY&#123;DEFINER|INVOKER&#125;</div></pre></td></tr></table></figure>
<p>COMMENT:            注释<br>CONTAINS SQL:       包含SQL语句, 但不包含读或写数据的语句<br>NO SQL:             不包含SQL语句<br>READS SQL DATA:     包含读数据的语句<br>MODIFIES SQL DATA:  包含写数据的语句<br>SQL SECURITY {DEFINER|INVOKER}  指明谁有权限来执行</p>
<h2 id="过程体"><a href="#过程体" class="headerlink" title="过程体"></a>过程体</h2><ul>
<li>过程体由合法的SQL语句构成;</li>
<li>过程体可以是任意SQL语句;</li>
<li>过程体如果为复合结构则使用BEGIN…END语句</li>
<li>复合结构可以使用条件、循环等控制语句</li>
</ul>
<h2 id="创建无参的存储过程"><a href="#创建无参的存储过程" class="headerlink" title="创建无参的存储过程"></a>创建无参的存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE PROCEDURE sp1() SELECT VERSION(); //创建</div><div class="line">CALL sp1; //调用</div><div class="line">CALL sp1();</div></pre></td></tr></table></figure>
<h2 id="创建带IN类型参数的存储过程"><a href="#创建带IN类型参数的存储过程" class="headerlink" title="创建带IN类型参数的存储过程"></a>创建带IN类型参数的存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//若带的参数与数据表中的字段一致，则删除整个数据表。</div><div class="line">DELIMITER //</div><div class="line">CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)</div><div class="line">BEGIN </div><div class="line">DELETE FROM users WHERE id = p_id;</div><div class="line">END</div><div class="line">//</div><div class="line">DELIMITER ;</div><div class="line"></div><div class="line">SELECT * FROM users;</div><div class="line">CALL removeUserById(22);</div><div class="line">SELECT * FROM users WHERE id = 22;</div></pre></td></tr></table></figure>
<h2 id="创建带IN-OUT类型参数的存储过程"><a href="#创建带IN-OUT类型参数的存储过程" class="headerlink" title="创建带IN OUT类型参数的存储过程"></a>创建带IN OUT类型参数的存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">DELIMITER //</div><div class="line">CREATE PROCEDURE removeUserAndReturnUserNums(IN p_id INT UNSIGNED,OUT userNums INT UNSIGNED)</div><div class="line">BEGIN</div><div class="line">DELETE FROM users WHERE id=p_id;</div><div class="line">SELECT COUNT(id) FROM users INTO userNums; </div><div class="line">END</div><div class="line">//</div><div class="line">DELIMITER ;</div><div class="line">CALL removerUserAndReturnUserName(10,@nums); </div><div class="line">SELECT @nums; </div><div class="line">SET @i = 7;</div></pre></td></tr></table></figure>
<p>INTO将SELECT语句结果返回给userNums变量<br>通过@或SET设置的变量称为用户变量<br>@nums 所代表的就是用户变量，可用 SELECT @nums 输出</p>
<p>局部变量与用户变量的区别<br>用 DECLARE 声明的变量是局部变量，局部变量只能存在于 BEGIN…END 之间，<br>且声明时必须置于 BEGIN…END 的第一行。而通过 SELECT…INTO…/SET @id = 07<br>设置的变量称用户变量，只能存在于当前用户所使用的客户端有效。</p>
<h2 id="创建带有多个OUT类型参数的存储过程"><a href="#创建带有多个OUT类型参数的存储过程" class="headerlink" title="创建带有多个OUT类型参数的存储过程"></a>创建带有多个OUT类型参数的存储过程</h2><h3 id="明确OUT类型的参数的定义与作用"><a href="#明确OUT类型的参数的定义与作用" class="headerlink" title="明确OUT类型的参数的定义与作用"></a>明确OUT类型的参数的定义与作用</h3><p>OUT类型参数，表示在调用存储过程时，值可被存储过程改变，并且返回一个值。通常变量用“@”符号开头的变量，在BEGIN和END之中的变量是局部变量，在调用存储过程时写入的变量是“用户变量”。比如有一个存储过程的名称叫做“addUser()”，调用时addUser(@sum),sum就是用户变量。</p>
<h3 id="ROW-COUNT-函数"><a href="#ROW-COUNT-函数" class="headerlink" title="ROW_COUNT()函数"></a>ROW_COUNT()函数</h3><p>相当于PHP的MySQL函数库中的mysql_affected_rows()数作用相同，计算增删改查的个数总和。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">DELIMITER //</div><div class="line">CREATE PROCEDURE removeUserByAgeAndReturnInfos(</div><div class="line">IN p_age SMALLINT UNSIGNED,</div><div class="line">OUT deleteUsers SMALLINT UNSIGNED,</div><div class="line">OUT userCounts SMALLINT UNSIGNED)</div><div class="line">BEGIN</div><div class="line">DELETE FROM users WHERE age=p_age;</div><div class="line">SELECT ROW_COUNT() INTO deleteUsers; #返回被增删改查的记录总数</div><div class="line">SELECT COUNT(id) FROM users INTO userCounts;</div><div class="line">END</div><div class="line">//</div><div class="line">DELIMITER ;</div><div class="line">CALL removeUserByAgeAndReturnInfos(20,@a,@b);</div><div class="line">SELECT @a,@b; #a是删除的记录数，b是剩余的记录数</div></pre></td></tr></table></figure>
<h2 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ALTER PROCEDURE sp_name [characteristic]</div><div class="line">COMMENT &apos;string&apos;</div><div class="line">|&#123;CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA&#125;</div><div class="line">|SQL SECURITY&#123;DEFINER|INVOKER&#125;</div></pre></td></tr></table></figure>
<h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CALL sp_name([parameter[,...]]) </div><div class="line">//带参数的存储过程的调用</div><div class="line">CALL sp_name[()] </div><div class="line">//不带参数的存储过程调用</div></pre></td></tr></table></figure>
<h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DROP PROCEDURE [IF EXISTS] sp_name;</div><div class="line"></div><div class="line">DROP PROCEDURE removeUserById;</div></pre></td></tr></table></figure>
<h2 id="储存过程与自定义函数的区别："><a href="#储存过程与自定义函数的区别：" class="headerlink" title="储存过程与自定义函数的区别："></a>储存过程与自定义函数的区别：</h2><ul>
<li>储存过程实现的功能要复杂一些；而函数的针对性更强。</li>
<li>储存过程可以返回多个值；函数只能有一个返回值。</li>
<li>储存过程一般独立的来执行；而函数可以作为其他SQL语句组成部分来出现。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;存储过程是SQL语句与控制语句的预编译集合，以一个名称存储作为一个单元处理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/IMG55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;输入SQL命令，MySQL引擎对命令进行分析，查看输入的语法是否正确，如果正确，再进行编译，编译成MySQL引擎可识别的命令，最后再进行执行，并将执行结果返回给客户端。&lt;/p&gt;
&lt;p&gt;如果省略了语法分析和编译的阶段，则效率可提高。&lt;/p&gt;
&lt;p&gt;存储过程：是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理（类似函数）。存储过程存储在数据库内，可以由应用程序调用执行，而且允许用户申明变量以及进行流程控制。存储过程可以接受输入类型的参数和输出类型的参数，并且可以存在多个返回值。只在第一次调用时进行语法分析和编译，以后的调用直接调用编译的结果，效率大大提高。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL记录操作</title>
    <link href="http://yoursite.com/post/2aaa8b1b.html"/>
    <id>http://yoursite.com/post/2aaa8b1b.html</id>
    <published>2018-06-03T02:13:18.000Z</published>
    <updated>2018-06-04T03:54:21.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="insert-插入记录"><a href="#insert-插入记录" class="headerlink" title="insert 插入记录"></a>insert 插入记录</h2><h3 id="INSERT…VALUES"><a href="#INSERT…VALUES" class="headerlink" title="INSERT…VALUES"></a>INSERT…VALUES</h3><p>比较常用，一次性插入多条记录，可输入表达式甚至是函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INSERT [INTO] table_name [(column_name,...)] </div><div class="line">&#123;VALUES|VALUE&#125; (&#123;expr|DEFAULT&#125;,...),(...),...;</div></pre></td></tr></table></figure></p>
<p>expr 表示表达式<br>对于自动编号的字段，插入<code>NULL</code>或<code>DEFAULT</code>系统将自动依次递增编号；<br>对于有默认约束的字段，可以插入<code>DEFAULT</code>表示使用默认值；<br>列值可传入数值、表达式或函数，如密码可以用md5()函数进行加密（如md5(‘123’)）；<br>可同时插入多条记录，多条记录括号间用逗号<code>,</code>隔开</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">INSERT test VALUES(NULL,&apos;Tom&apos;);</div><div class="line">//插入单条记录</div><div class="line"></div><div class="line">INSERT users </div><div class="line">VALUES(DEFAULT,&apos;Tom&apos;,&apos;123&apos;,1+9*2,1),</div><div class="line">(NULL,&apos;John&apos;,md5(&apos;123&apos;),DEFAULT,0); </div><div class="line">//插入两条记录</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="INSERT…SET"><a href="#INSERT…SET" class="headerlink" title="INSERT…SET"></a>INSERT…SET</h3><p>这种方法一次只能插入一条记录<br>列值中有自动编号、默认值或Boolean类型均可以不赋值(使用子查询)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT [INTO] table_name SET col_name=&#123; expr | DEFAULT &#125;,...;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT users SET username=&apos;Ben&apos;,password=&apos;456&apos;;</div></pre></td></tr></table></figure>
<h3 id="INSERT…SELECT"><a href="#INSERT…SELECT" class="headerlink" title="INSERT…SELECT"></a>INSERT…SELECT</h3><p>一般用于将其他表的数据插入到指定表，注意对应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INSERT [INTO] table_name(col_name,...) </div><div class="line">SELECT col_name,... FROM table_name [GROUP BY/HAVING/ORDER BY/LIMIT...];</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">INSERT test SELECT username FROM users WHERE age &gt;=30; </div><div class="line">// 字段不匹配提示</div><div class="line">INSERT test (username) SELECT username FROM users WHERE age &gt;=30;</div><div class="line"></div><div class="line">INSERT tdb_goods_cates(cate_name) </div><div class="line">SELECT goods_cate FROM tdb_goods </div><div class="line">GROUP BY goods_cate;</div><div class="line">//在表tdb_goods_cates中插入tdb_goods中的cate</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="update-更新记录"><a href="#update-更新记录" class="headerlink" title="update 更新记录"></a>update 更新记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_reference </div><div class="line">SET col_name1=&#123;exp1|DEFAULT&#125;</div><div class="line">[,col_name2=&#123;exp1|DEFAULT&#125;,...]</div><div class="line">[WHERE where_condition]</div></pre></td></tr></table></figure>
<p>省略WHERE条件则更新所有记录该列的值</p>
<h3 id="单表更新"><a href="#单表更新" class="headerlink" title="单表更新"></a>单表更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UPDATE users SET age = age + 5,sex = 0; </div><div class="line">//使表里所有记录的age加5</div><div class="line">UPDATE users SET age = age + 10 WHERE id % 2=0; </div><div class="line">//取id为偶数的位置</div></pre></td></tr></table></figure>
<h3 id="多表更新"><a href="#多表更新" class="headerlink" title="多表更新"></a>多表更新</h3><p>使用连接进行多表更新，以下为连接的语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table_reference</div><div class="line">&#123;[INNER | CROSS] JOIN | &#123;LEFT|RIGHT&#125; [OUTER] JOIN&#125;</div><div class="line">table_reference</div><div class="line">ON conditional_expr</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UPDATE tdb_goods INNER JOIN tdb_goods_cates </div><div class="line">ON goods_cate=cate_name </div><div class="line">SET goods_cate=cate_id;</div><div class="line">//如果goods_cate等于cate_name那么就让goods_cate=cate_id</div></pre></td></tr></table></figure>
<p>创建数据表同时将查询结果写入到数据表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE [IF NOT EXISTS] tbl_name</div><div class="line">[(create_definition,...)]</div><div class="line">select_statement</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE tdb_goods_brands (</div><div class="line">brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</div><div class="line">brand_name VARCHAR(40) NOT NULL</div><div class="line">) </div><div class="line">SELECT brand_name FROM tdb_goods </div><div class="line">GROUP BY brand_name;</div><div class="line"> </div><div class="line">UPDATE tdb_goods AS g </div><div class="line">INNER JOIN tdb_goods_brands AS b </div><div class="line">ON g.brand_name = b.brand_name </div><div class="line">SET g.brand_name = b.brand_id;</div><div class="line">//多表更新</div><div class="line"> </div><div class="line">ALTER TABLE tdb_goods </div><div class="line">CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,</div><div class="line">CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;</div><div class="line">//通过ALTER TABLE语句修改数据表结构</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="delete-删除记录"><a href="#delete-删除记录" class="headerlink" title="delete 删除记录"></a>delete 删除记录</h2><h3 id="单表删除"><a href="#单表删除" class="headerlink" title="单表删除"></a>单表删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE FROM table_name [WHERE where_conditon];</div></pre></td></tr></table></figure>
<p>省略条件则默认删除该表所有记录(仅删除所有记录，不删除数据表)<br>删除后再插入，插入的id号从最大的往上加，而不是填补删除的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE FROM users WHERE id=6;</div></pre></td></tr></table></figure>
<h3 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h3><p>INSERT … SELECT实现复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSERT tdb_goods(goods_name,cate_id,brand_id) </div><div class="line">SELECT goods_name,cate_id,brand_id </div><div class="line">FROM tdb_goods </div><div class="line">WHERE goods_id IN (19,20);</div></pre></td></tr></table></figure></p>
<p>查找重复记录<br>SELECT goods_id,goods_name<br>FROM tdb_goods<br>GROUP BY goods_name HAVING count(goods_name) &gt;= 2;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">删除重复记录</div></pre></td></tr></table></figure></p>
<p>DELETE t1<br>FROM tdb_goods AS t1<br>LEFT JOIN (<br>    SELECT goods_id,goods_name<br>    FROM tdb_goods<br>    GROUP BY goods_name HAVING count(goods_name) &gt;= 2 ) AS t2<br>ON t1.goods_name = t2.goods_name<br>WHERE t1.goods_id &gt; t2.goods_id;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">## select 查找记录</div></pre></td></tr></table></figure></p>
<p>SELECT select_expr [,select expr2…]           //只查找某一个函数或表达式<br>[<br>FROM table_references                           //查询表名<br>[WHERE where_conditon]                          //查询条件<br>[GROUP BY {col_name|position} [ASC|DESC],…]   //按某个字段进行分组，相同的只显示第一个<br>[HAVING where_conditon]                         //分组时，给出显示条件<br>[ORDER BY {col_name|expr|position} [ASC|DESC],…] //排序<br>[LIMIT {[offset,]row_count|row_count OFFSET offset}] //限制返回数量<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 查询表达式</div><div class="line">* 每一个表达式表示想要的一列，必须至少有一个</div><div class="line">* 多个列之间以英文逗号分隔</div><div class="line">* 星号(*)表示所以列 table_name.*可以表示命名表的所有列</div><div class="line">* 查询表达式可以使用`[As]alias_name`为其赋予别名</div><div class="line">* 别名可用于GROUP BY，ORDRE BY或HAVING子句</div><div class="line"></div><div class="line">SELECT 字段出现顺序影响结果集出现顺序，字段别名也影响结果集字段别名</div></pre></td></tr></table></figure></p>
<p>SELECT * FROM users;<br>SELECT id AS userid,usrname AS uname FROM users;<br>SELECT users.id FROM users;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### WHERE 条件表达式</div><div class="line"></div><div class="line">对记录进行过滤，如果没有指定的WHERE子句，则显示所有记录</div><div class="line">在WHERE表达式中，可以使用MYSQL支持的函数或运算符</div></pre></td></tr></table></figure></p>
<p>SELECT * FROM users WHERE id=1;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### GROUP BY 查询结果分组</div></pre></td></tr></table></figure></p>
<p>[GROUP BY {col_name|position} [ASC|DESC],…]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ASC：升序，默认</div><div class="line">DESC：降序</div><div class="line">position：SELECT语句中列的序号</div></pre></td></tr></table></figure></p>
<p>SELECT sex FROM users GROUP BY sex;<br>//对users中的sex按sex进行分组<br>SELECT * FROM users GROUP BY 1;<br>//1表示查询的第一个字段，这里是表中的第一个字段id<br>SELECT sex FROM users GROUP BY 1;<br>//1表示sex<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">如果存在相同的值（例如上面的age可能有多个相同的值），**只会保留一个**。但使用ORDER BY 就不会省略。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">### HAVING 分组条件</div><div class="line">用在GROUP BY后面追加条件，条件要么为一个聚合函数，要么出现在SELECT要查询的字段中。</div></pre></td></tr></table></figure></p>
<p>[HAVING when where_condition]</p>
<p>SELECT sex FROM users GROUP BY 1 HAVING age &gt; 35; //有错<br>SELECT sex,age FROM users GROUP BY 1 HAVING age &gt; 35;<br>SELECT sex FROM users GROUP BY 1 HAVING count(id) &gt;= 2;<br>//按照sex分组，条件id数大于2的分组留下显示<br>//工作流程就是先从表中查询字段，然后根据GROUP BY的条件对查询结果进行分组，再根据HAVING条件对分组进行筛选，最后留下满足所有条件的分组结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">聚合函数永远只有一个返回结果</div><div class="line">count是记录指定列的值的个数（NULL不计入）</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">### ORDER BY 排序</div><div class="line">对查询结果进行排序，默认是升序，DESC是降序</div></pre></td></tr></table></figure></p>
<p>[ORDER BY [col_name | expr | position } [ASC|DESC],…]</p>
<p>SELECT <em> FROM users ORDER BY id DESC;<br>//对一个字段排序<br>SELECT </em> FROM users ORDER BY age,id DESC;<br>//多字段排序，先按照age排序，如果age有重复的，重复的字段里按id排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">多个排序条件之间以逗号相隔，在前面的排序条件满足时，忽略后面的排序条件，否则按照后面的排序条件进行排序。</div><div class="line"></div><div class="line"></div><div class="line">### LIMIT 限制查询结果数量</div></pre></td></tr></table></figure></p>
<p>[LIMIT {[offset,] row_count | row_count OFFSET offset}]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">获取头部记录LIMIT 10; //获取查询结果的前10条记录，**默认从0开始**</div><div class="line">获取中间记录LIMIT 2,10;//获取从第3条开始的10条记录</div></pre></td></tr></table></figure></p>
<p>SELECT <em> FROM users LIMIT 2;<br>//从第一条开始（第一个为0），返回两条<br>SELECT </em> FROM users LIMIT 2,3;<br>//从第三条开始（第一个为0），返回三条<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;insert-插入记录&quot;&gt;&lt;a href=&quot;#insert-插入记录&quot; class=&quot;headerlink&quot; title=&quot;insert 插入记录&quot;&gt;&lt;/a&gt;insert 插入记录&lt;/h2&gt;&lt;h3 id=&quot;INSERT…VALUES&quot;&gt;&lt;a href=&quot;#INSERT…VALUES&quot; class=&quot;headerlink&quot; title=&quot;INSERT…VALUES&quot;&gt;&lt;/a&gt;INSERT…VALUES&lt;/h3&gt;&lt;p&gt;比较常用，一次性插入多条记录，可输入表达式甚至是函数。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;INSERT [INTO] table_name [(column_name,...)] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;VALUES|VALUE&amp;#125; (&amp;#123;expr|DEFAULT&amp;#125;,...),(...),...;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;expr 表示表达式&lt;br&gt;对于自动编号的字段，插入&lt;code&gt;NULL&lt;/code&gt;或&lt;code&gt;DEFAULT&lt;/code&gt;系统将自动依次递增编号；&lt;br&gt;对于有默认约束的字段，可以插入&lt;code&gt;DEFAULT&lt;/code&gt;表示使用默认值；&lt;br&gt;列值可传入数值、表达式或函数，如密码可以用md5()函数进行加密（如md5(‘123’)）；&lt;br&gt;可同时插入多条记录，多条记录括号间用逗号&lt;code&gt;,&lt;/code&gt;隔开&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;INSERT test VALUES(NULL,&amp;apos;Tom&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//插入单条记录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INSERT users &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;VALUES(DEFAULT,&amp;apos;Tom&amp;apos;,&amp;apos;123&amp;apos;,1+9*2,1),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(NULL,&amp;apos;John&amp;apos;,md5(&amp;apos;123&amp;apos;),DEFAULT,0); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//插入两条记录&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL修改数据表</title>
    <link href="http://yoursite.com/post/5f31036f.html"/>
    <id>http://yoursite.com/post/5f31036f.html</id>
    <published>2018-06-02T14:49:01.000Z</published>
    <updated>2018-06-03T10:06:17.716Z</updated>
    
    <content type="html"><![CDATA[<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ADD/DROP ...;</div></pre></td></tr></table></figure>
<h1 id="添加-删除列"><a href="#添加-删除列" class="headerlink" title="添加/删除列"></a>添加/删除列</h1><h2 id="添加单列"><a href="#添加单列" class="headerlink" title="添加单列"></a>添加单列</h2><p>如果指定FIRST，则在整个表的最前方，默认不写为整个表的最后方；如果指定AFTER col_name，则在col_name的后面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name];</div><div class="line"></div><div class="line">ALTER TABLE user1 ADD password varchar(32) not NULL AFTER name;</div></pre></td></tr></table></figure></p>
<h2 id="添加多列"><a href="#添加多列" class="headerlink" title="添加多列"></a>添加多列</h2><p>无法指定FIRST/AFTER、只能默认为最后方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ADD [COLUMN] (col_name column_definition,...);</div><div class="line"></div><div class="line">ALTER TABLE user1 ADD password varchar(32) not NULL,pid smallint unsigned;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="删除单列"><a href="#删除单列" class="headerlink" title="删除单列"></a>删除单列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name DROP [COLUMN] col_name;</div><div class="line"></div><div class="line">ALTER TABLE user1 DROP password;</div></pre></td></tr></table></figure>
<h2 id="删除多列"><a href="#删除多列" class="headerlink" title="删除多列"></a>删除多列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name DROP [COLUMN] col_name, </div><div class="line">DROP [COLUMN] col_name,</div><div class="line">DROP [COLUMN] col_name;</div></pre></td></tr></table></figure>
<p><br></p>
<h1 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h1><h2 id="添加-删除主键约束"><a href="#添加-删除主键约束" class="headerlink" title="添加/删除主键约束"></a>添加/删除主键约束</h2><p>constraint 给主键起名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...);</div><div class="line">ALTER TABLE table_name DROP PRIMARY KEY;</div><div class="line"></div><div class="line">ALTER TABLE users ADD CONSTRAINT pk_users_id PRIMARY KEY (id);</div><div class="line">ALTER TABLE users DROP PRIMARY KEY;</div></pre></td></tr></table></figure></p>
<h2 id="添加-删除唯一约束"><a href="#添加-删除唯一约束" class="headerlink" title="添加/删除唯一约束"></a>添加/删除唯一约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,...)</div><div class="line">ALTER TABLE table_name DROP &#123;INDEX|KEY&#125; index_name;</div><div class="line">//删除唯一约束只用删掉它的索引就行了</div><div class="line"></div><div class="line">ALTER TABLE users ADD UNIQUE (username);</div><div class="line">ALTER TABLE users drop INDEX username;</div></pre></td></tr></table></figure>
<h2 id="添加-删除外键约束"><a href="#添加-删除外键约束" class="headerlink" title="添加/删除外键约束"></a>添加/删除外键约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name](index_col_name,...) reference_definition;</div><div class="line">ALTER TABLE table_name DROP FOREIGN KEY（fk_symbol);</div><div class="line">//fk_symbol 是CONSTRAINT定义的名字，如果没有定义可以通过 show create table table_name来查看</div><div class="line"></div><div class="line">ALTER TABLE users ADD FOREIGN KEY (pid) REFERENCES provinces (id);</div><div class="line">SHOW TABLE TABLE users;</div><div class="line">ALTER TABLE users DROP FOREIGN KEY (pid);</div></pre></td></tr></table></figure>
<h2 id="添加-删除默认约束"><a href="#添加-删除默认约束" class="headerlink" title="添加/删除默认约束"></a>添加/删除默认约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ALTER [COLUMN] col_name &#123;SET DEFAULT literal | DROP DEFAULT&#125;</div><div class="line"></div><div class="line">ALTER TABLE users ALTER age SET DEFAULT 15;</div><div class="line">ALTER TABLE users ALTER age DROP DEFAULT;</div></pre></td></tr></table></figure>
<p><br></p>
<h1 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h1><h2 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name MODIFY [COLUMN] col_name column_definition [FIRST |AFTER col_name];</div><div class="line"></div><div class="line">ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST; </div><div class="line">//将id字段的位置提到第一列</div><div class="line">ALTER TABLE users2 MODIFY id TINYINT UNSIGNED NOT NULL; </div><div class="line">//修改数据类型，需注意数据丢失的问题（范围大转范围小）</div></pre></td></tr></table></figure>
<h2 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name CHANGE [COLUMN] col_name new_col_name column_definition [FIRST|AFTER col_name];</div><div class="line"></div><div class="line">ALTER TABLE users2 CHANGE pid p_id TINYINT UNSIGNED; </div><div class="line">//修改列名称，类型可以通过show create table table_name复制原来的</div></pre></td></tr></table></figure>
<p><br></p>
<h1 id="数据表更名"><a href="#数据表更名" class="headerlink" title="数据表更名"></a>数据表更名</h1><p>方法1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name RENAME [TO/AS] new_table_name;</div><div class="line"></div><div class="line">ALTER TABLE users2 RENAME (to/as) users3;</div></pre></td></tr></table></figure></p>
<p>方法2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RENAME TABLE table_name TO new_table_name [,table_name2 TO new_table_name2] ...;</div><div class="line"></div><div class="line">RENAME TABLE users5 TO users2;</div></pre></td></tr></table></figure></p>
<p>尽量少使用数据表的列名及表名的更名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ALTER TABLE table_name ADD/DROP ...;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;添加-删除列&quot;&gt;&lt;a href=&quot;#添加-删除列&quot; class=&quot;headerlink&quot; title=&quot;添加/删除列&quot;&gt;&lt;/a&gt;添加/删除列&lt;/h1&gt;&lt;h2 id=&quot;添加单列&quot;&gt;&lt;a href=&quot;#添加单列&quot; class=&quot;headerlink&quot; title=&quot;添加单列&quot;&gt;&lt;/a&gt;添加单列&lt;/h2&gt;&lt;p&gt;如果指定FIRST，则在整个表的最前方，默认不写为整个表的最后方；如果指定AFTER col_name，则在col_name的后面。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ALTER TABLE table_name ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ALTER TABLE user1 ADD password varchar(32) not NULL AFTER name;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;添加多列&quot;&gt;&lt;a href=&quot;#添加多列&quot; class=&quot;headerlink&quot; title=&quot;添加多列&quot;&gt;&lt;/a&gt;添加多列&lt;/h2&gt;&lt;p&gt;无法指定FIRST/AFTER、只能默认为最后方&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ALTER TABLE table_name ADD [COLUMN] (col_name column_definition,...);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ALTER TABLE user1 ADD password varchar(32) not NULL,pid smallint unsigned;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
</feed>
